(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    596706,      12546]
NotebookOptionsPosition[    554908,      11671]
NotebookOutlinePosition[    555922,      11701]
CellTagsIndexPosition[    555806,      11695]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Monad code generation and extension", "Title",
 CellID->1610336651,ExpressionUUID->"e283ef4d-b6ce-4504-9829-c5e67a5e70d0"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.706473742963523*^9, 3.70647374520277*^9}},
 CellID->1392984828,ExpressionUUID->"96249701-d33f-47e7-824f-d69d5ba90b6e"],

Cell["\<\
This document aims to introduce monadic programming in Mathematica / Wolfram \
Language (WL) in a concise and code-direct manner. The core of the monad \
codes discussed is simple, derived from the fundamental principles of \
Mathematica / WL.\
\>", "Text",
 CellChangeTimes->{{3.706482154879069*^9, 3.706482247788632*^9}, {
   3.706482281100176*^9, 3.706482293698454*^9}, {3.706565755366576*^9, 
   3.706565756815756*^9}, 3.706954739330334*^9, {3.707130556359235*^9, 
   3.7071305574704127`*^9}, {3.707134070074885*^9, 3.7071340702317348`*^9}, {
   3.707134101431201*^9, 3.7071341475204988`*^9}, {3.707158678423714*^9, 
   3.707158703880233*^9}, {3.7071591098727493`*^9, 3.707159124204875*^9}},
 CellID->29284602,ExpressionUUID->"c5982a83-dbbc-4df1-8f43-e67cd2c8417b"],

Cell["\<\
The usefulness of the monadic programming approach manifests in multiple \
ways. Here are a few we are interested in:\
\>", "Text",
 CellChangeTimes->{{3.706473884280079*^9, 3.706473887298491*^9}, 
   3.706474010346648*^9, {3.707158722096324*^9, 3.707158723916379*^9}, {
   3.707158754552294*^9, 3.70715881360207*^9}},
 CellID->412550651,ExpressionUUID->"db8f8301-d262-4bb0-8442-1f8f7db2d654"],

Cell["\<\
Easy to construct, read, and modify sequences of commands (pipelines)\
\>", "ItemNumbered",
 CellChangeTimes->{{3.706473884280079*^9, 3.706473887298491*^9}, 
   3.706508526008462*^9, {3.706828619592206*^9, 3.706828646210382*^9}, {
   3.7071342477498717`*^9, 3.707134248545643*^9}, {3.891247657104548*^9, 
   3.891247682455015*^9}},
 CellID->1661578841,ExpressionUUID->"c429c127-1b57-483f-994c-7b3ff6ba4ae7"],

Cell["Easy to program polymorphic behaviour", "ItemNumbered",
 CellChangeTimes->{{3.706473884280079*^9, 3.706473887298491*^9}, 
   3.706508526008462*^9, {3.706828619592206*^9, 3.706828646210382*^9}, {
   3.7071342477498717`*^9, 3.707134248545643*^9}, {3.891247657901657*^9, 
   3.89124767941775*^9}},
 CellID->278235099,ExpressionUUID->"d5840070-563f-4901-847d-afcef30bca7c"],

Cell["Easy to program context utilization", "ItemNumbered",
 CellChangeTimes->{{3.706473884280079*^9, 3.706473887298491*^9}, 
   3.706508526008462*^9, {3.706828619592206*^9, 3.706828646210382*^9}, {
   3.7071342477498717`*^9, 3.707134248545643*^9}, {3.891247675693934*^9, 
   3.891247680844559*^9}},
 CellID->1225409374,ExpressionUUID->"595fe633-d74e-4b64-9719-8b7f16faf002"],

Cell[CellGroupData[{

Cell["Speaking informally,", "Text",
 CellChangeTimes->{{3.706473884280079*^9, 3.706473887969698*^9}},
 CellID->1087174088,ExpressionUUID->"3f823950-da6c-47ef-9078-8d3da37f28ac"],

Cell["\<\
Monad programming provides an interface that allows interactive, dynamic \
creation and change of sequentially structured computations with polymorphic \
and context-aware behavior.\
\>", "SubitemParagraph",
 CellChangeTimes->{{3.706473884280079*^9, 3.706473889206205*^9}, {
  3.707134292401452*^9, 3.707134292904801*^9}, {3.707134341899166*^9, 
  3.707134345577928*^9}, {3.707158867141897*^9, 3.707158874881227*^9}, {
  3.707158947735688*^9, 3.707159015967415*^9}},
 CellID->1344028340,ExpressionUUID->"0a0f9d77-3672-4a1b-98dc-19d8db5826db"]
}, Open  ]],

Cell[TextData[{
 "The theoretical background provided in this document is given in the \
Wikipedia article on Monadic programming, [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 "], and the article ",
 ButtonBox["\[OpenCurlyDoubleQuote]The essence of functional programming\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/the-\
essence-of-functional-programming.pdf"], None},
  ButtonNote->
   "https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/the-\
essence-of-functional-programming.pdf"],
 " by Philip Wadler, [",
 ButtonBox["H3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/the-\
essence-of-functional-programming.pdf"], None},
  ButtonNote->
   "https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/the-\
essence-of-functional-programming.pdf"],
 "]. The code in this document is based on the primary monad definition given \
[Wk1,H3]. (Based on the ",
 ButtonBox["\[OpenCurlyDoubleQuote]Kleisli triple\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Kleisli_category"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Kleisli_category"],
 " and used in Haskell.)"
}], "Text",
 CellChangeTimes->{{3.705576350201664*^9, 3.70557657931916*^9}, {
   3.7055766549752917`*^9, 3.705576763380635*^9}, {3.7055769335373497`*^9, 
   3.705576971787661*^9}, {3.705577033788293*^9, 3.7055770532156157`*^9}, 
   3.705577237306262*^9, {3.706474250982448*^9, 3.7064742826824713`*^9}, {
   3.706474588667118*^9, 3.706474588669922*^9}, {3.7065086358771753`*^9, 
   3.7065086373945503`*^9}, 3.7065087402847576`*^9, {3.706828720447865*^9, 
   3.706828733370947*^9}, {3.706972983175243*^9, 3.7069730631175537`*^9}, {
   3.706973145885434*^9, 3.706973215648332*^9}, {3.706973250027355*^9, 
   3.706973286850868*^9}, {3.707134449205845*^9, 3.70713458672425*^9}, {
   3.70713469148861*^9, 3.707134739471408*^9}, {3.707159264056221*^9, 
   3.707159276464294*^9}},
 CellID->1851311234,ExpressionUUID->"35f6a4aa-bde6-428a-b67c-d06c55d4de47"],

Cell["The general monad structure can be seen as:", "Text",
 CellChangeTimes->{{3.706828764679476*^9, 3.706828774714531*^9}, {
  3.706828835813441*^9, 3.706828851552127*^9}, {3.706974588934143*^9, 
  3.706974590022981*^9}, {3.7071593254368157`*^9, 3.70715932884335*^9}},
 CellID->97348455,ExpressionUUID->"20b5ee83-dfe7-4fcb-a1cd-47582a02317e"],

Cell["A software design pattern", "ItemNumbered",
 CellChangeTimes->{{3.7068287768067217`*^9, 3.706828866199847*^9}, {
  3.706830634974445*^9, 3.70683065218456*^9}, {3.706830708863549*^9, 
  3.706830768768085*^9}, {3.706830820338266*^9, 3.706830846652258*^9}, {
  3.891247975236098*^9, 3.8912479866466413`*^9}},
 CellID->1900427818,ExpressionUUID->"803fe9ff-c8ea-4542-988c-2f5aa19121ce"],

Cell["\<\
A fundamental programming construct (similar to class in object-oriented \
programming)\
\>", "ItemNumbered",
 CellChangeTimes->{{3.7068287768067217`*^9, 3.706828866199847*^9}, {
  3.706830634974445*^9, 3.70683065218456*^9}, {3.706830708863549*^9, 
  3.706830768768085*^9}, {3.706830820338266*^9, 3.706830846652258*^9}, {
  3.891247976077115*^9, 3.891247991539507*^9}},
 CellID->966055295,ExpressionUUID->"ab2a4230-1ced-402c-ab2c-e1ef9471850c"],

Cell["An interface for software types to have implementations of", \
"ItemNumbered",
 CellChangeTimes->{{3.7068287768067217`*^9, 3.706828866199847*^9}, {
  3.706830634974445*^9, 3.70683065218456*^9}, {3.706830708863549*^9, 
  3.706830768768085*^9}, {3.706830820338266*^9, 3.706830846652258*^9}, {
  3.891247995195744*^9, 3.891247996939515*^9}},
 CellID->1514971745,ExpressionUUID->"5e8f4872-088e-46fd-b3c9-512e93b93e2d"],

Cell[TextData[{
 "In this document we treat the monad structure as a ",
 ButtonBox["design pattern",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Software_design_pattern"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Software_design_pattern"],
 ", [",
 ButtonBox["Wk3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Software_design_pattern"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Software_design_pattern"],
 "]. (After reading [H3] point 2 becomes more obvious. A similar in spirit, \
minimalistic approach to ",
 ButtonBox["Object-oriented Design Patterns",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Design_Patterns"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Design_Patterns"],
 " is given in [AA1].)"
}], "Text",
 CellChangeTimes->{{3.706830773178216*^9, 3.7068308095157003`*^9}, {
  3.706830855271016*^9, 3.70683094848773*^9}, {3.706831073218947*^9, 
  3.706831122166362*^9}, {3.706831217051651*^9, 3.706831241123307*^9}, {
  3.706866895143092*^9, 3.706867000722017*^9}, {3.7068670325372677`*^9, 
  3.7068670343149357`*^9}, {3.706867093625208*^9, 3.706867128332694*^9}, {
  3.706974630312134*^9, 3.706974650931842*^9}, {3.707132018789336*^9, 
  3.707132041233439*^9}, {3.70713207194739*^9, 3.707132077740015*^9}, {
  3.707132825388446*^9, 3.70713284307557*^9}, {3.7071332306040297`*^9, 
  3.707133230992229*^9}},
 CellID->1563999383,ExpressionUUID->"84a35e97-fe8e-4dec-b3de-b3b9be31ebc5"],

Cell["\<\
We do not deal with types for monads explicitly, we generate code for monads \
instead. One reason for this is the \[OpenCurlyDoubleQuote]monad design \
pattern\[CloseCurlyDoubleQuote] perspective; another one is that in \
Mathematica / WL the notion of algebraic data type is not needed -- pattern \
matching comes from the core \[OpenCurlyDoubleQuote]book of replacement rules\
\[CloseCurlyDoubleQuote] principle.\
\>", "Text",
 CellChangeTimes->{{3.707132079848714*^9, 3.707132205372579*^9}, {
  3.707132382319098*^9, 3.707132498988842*^9}, {3.707133269869726*^9, 
  3.70713327401823*^9}, {3.707133311795828*^9, 3.707133327310401*^9}, {
  3.70713479732794*^9, 3.707134797775961*^9}},
 CellID->937790801,ExpressionUUID->"45ef28f1-9b14-471b-8d0d-3b69266a1b8e"],

Cell["The rest of the document is organized as follows. ", "Text",
 CellChangeTimes->{{3.707023539394634*^9, 3.707023802368737*^9}, {
   3.707023861577937*^9, 3.707023948993268*^9}, {3.707024056873081*^9, 
   3.707024437187009*^9}, {3.70702447691128*^9, 3.707024478565422*^9}, 
   3.707024812024271*^9, {3.7070248584551907`*^9, 3.707024905747851*^9}, {
   3.707132014260058*^9, 3.707132015303647*^9}, 3.707133345978057*^9, 
   3.707133468848277*^9},
 CellID->1067507074,ExpressionUUID->"93b44d2d-dcff-47f6-937e-5d20f5543bf6"],

Cell[TextData[{
 StyleBox["1.",
  FontWeight->"Bold"],
 " ",
 StyleBox["Fundamental sections",
  FontSlant->"Italic"],
 "\nThe section \"What is a monad?\" gives the necessary definitions. The \
section \"The basic Maybe monad\" shows how to program a monad from scratch \
in Mathematica / WL. The section \"Extensions with polymorphic behavior\" \
shows how extensions of the basic monad functions can be made. (These three \
sections form a complete read on monadic programming, the rest of document \
can be skipped.) "
}], "Text",
 CellChangeTimes->{{3.707023539394634*^9, 3.707023802368737*^9}, {
   3.707023861577937*^9, 3.707023948993268*^9}, {3.707024056873081*^9, 
   3.707024437187009*^9}, {3.70702447691128*^9, 3.707024478565422*^9}, 
   3.707024812024271*^9, {3.7070248584551907`*^9, 3.707024905747851*^9}, {
   3.707132014260058*^9, 3.707132015303647*^9}, 3.707133345978057*^9, 
   3.707133472660933*^9, {3.707133546270438*^9, 3.707133556384137*^9}, {
   3.707133621522373*^9, 3.707133628474646*^9}, {3.707134836005889*^9, 
   3.707134836319343*^9}},
 CellID->1513005680,ExpressionUUID->"bebf7aa6-c2d0-409f-a8b2-992e10713f07"],

Cell[TextData[{
 StyleBox["2.",
  FontWeight->"Bold"],
 " ",
 StyleBox["Monadic programming in practice",
  FontSlant->"Italic"],
 "\nThe section \"Monad code generation\" describes packages for generating \
monad code. The section \"Flow control in monads\" describes additional, \
control flow functionalities. The section \"General work-flow of monad code \
generation utilization\" gives a general perspective on the use monad code \
generation. The section \"Software design with monadic programming\" \
discusses (small scale) software design with monadic programming. "
}], "Text",
 CellChangeTimes->{{3.707023539394634*^9, 3.707023802368737*^9}, {
   3.707023861577937*^9, 3.707023948993268*^9}, {3.707024056873081*^9, 
   3.707024437187009*^9}, {3.70702447691128*^9, 3.707024478565422*^9}, 
   3.707024812024271*^9, {3.7070248584551907`*^9, 3.707024905747851*^9}, {
   3.707132014260058*^9, 3.707132015303647*^9}, 3.707133345978057*^9, 
   3.707133530386334*^9, {3.707133572989254*^9, 3.707133579413183*^9}, {
   3.707133644157454*^9, 3.7071337001940527`*^9}, {3.707133919067452*^9, 
   3.707133922834095*^9}, {3.707134896642756*^9, 3.707134898250345*^9}},
 CellID->732599633,ExpressionUUID->"28aae1f2-d334-400f-8fe3-d85e271dc9e6"],

Cell[TextData[{
 StyleBox["3.",
  FontWeight->"Bold"],
 " ",
 StyleBox["Case study sections",
  FontSlant->"Italic"],
 "\nThe case study sections \"Contextual monad classification\" and \"Tracing \
monad pipelines\" hopefully have interesting and engaging examples of monad \
code generation, extension, and utilization."
}], "Text",
 CellChangeTimes->{{3.707023539394634*^9, 3.707023802368737*^9}, {
   3.707023861577937*^9, 3.707023948993268*^9}, {3.707024056873081*^9, 
   3.707024437187009*^9}, {3.70702447691128*^9, 3.707024478565422*^9}, 
   3.707024812024271*^9, {3.7070248584551907`*^9, 3.707024905747851*^9}, {
   3.707132014260058*^9, 3.707132015303647*^9}, 3.707133345978057*^9, {
   3.707133589571628*^9, 3.707133597019862*^9}},
 CellID->1278283580,ExpressionUUID->"5a4ae84c-096b-4a3a-9ffb-67e80becf050"]
}, Open  ]],

Cell[CellGroupData[{

Cell["What is a monad?", "Section",
 CellChangeTimes->{{3.706828757210916*^9, 3.706828762474551*^9}},
 CellID->685724472,ExpressionUUID->"d1fccbc0-d5b2-4f9d-a13e-350f83f862ca"],

Cell[CellGroupData[{

Cell["The monad definition", "Subsection",
 CellChangeTimes->{{3.7060534940603943`*^9, 3.706053517642954*^9}, {
  3.70613292794285*^9, 3.706132933544066*^9}, {3.70697350543437*^9, 
  3.7069735808757157`*^9}},
 CellID->1573951102,ExpressionUUID->"0be6b56c-1671-48de-b253-d564ba3e92b6"],

Cell[TextData[{
 "In this document a monad is any set of a symbol ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "7f71582d-bb26-4e51-95c0-655857868958"],
 " and two operators ",
 StyleBox["unit",
  FontSlant->"Italic"],
 " and ",
 StyleBox["bind",
  FontSlant->"Italic"],
 " that adhere to the monad laws. (See the next sub-section.) The definition \
is taken from [Wk1] and [H3] and phrased in Mathematica / WL terms in this \
section. In order to be brief, we deliberately do not consider the equivalent \
monad definition based on ",
 StyleBox["unit",
  FontSlant->"Italic"],
 ", ",
 StyleBox["join",
  FontSlant->"Italic"],
 ", and ",
 StyleBox["map",
  FontSlant->"Italic"],
 " (also given in [H3].) "
}], "Text",
 CellChangeTimes->{{3.706973764379893*^9, 3.706973789747993*^9}, {
  3.706973859834511*^9, 3.706973861850654*^9}, {3.7069739325603848`*^9, 
  3.706973941255409*^9}, {3.706973977380806*^9, 3.7069739877862267`*^9}, {
  3.706975152420505*^9, 3.7069751819353857`*^9}, {3.707159452864998*^9, 
  3.707159456081925*^9}},
 CellID->692607568,ExpressionUUID->"2eb51a6f-19de-48a4-b6f5-a0b00c200a07"],

Cell[TextData[{
 "Here are operators for a monad associated with a certain symbol ",
 StyleBox["M", "Program"],
 ":"
}], "Text",
 CellChangeTimes->{
  3.7060534940603943`*^9, {3.706053528431412*^9, 3.7060535315039*^9}, {
   3.706482307839299*^9, 3.7064823143855743`*^9}},
 CellID->1294028636,ExpressionUUID->"b62f6f8e-f5c0-4033-9213-363e747d9f53"],

Cell[TextData[{
 "1. monad ",
 StyleBox["unit",
  FontSlant->"Italic"],
 " function (\"return\" in Haskell notation) is ",
 StyleBox["Unit[x_] := M[x]", "Program"],
 ";"
}], "Text",
 CellChangeTimes->{
  3.7060534940603943`*^9, 3.706053529949847*^9, {3.706053573534188*^9, 
   3.70605360366289*^9}},
 CellID->1172392083,ExpressionUUID->"aa810fcd-956a-4521-9510-b91d616b1f89"],

Cell[TextData[{
 "2. monad ",
 StyleBox["bind",
  FontSlant->"Italic"],
 " function (\">>=\" in Haskell notation) is a rule like ",
 StyleBox["Bind[M[x_], f_] := f[x]", "Program"],
 " with ",
 StyleBox["MatchQ[f[x],M[_]]", "Program"],
 " giving ",
 StyleBox["True", "Program"],
 "."
}], "Text",
 CellChangeTimes->{
  3.7060534940603943`*^9, {3.706053538474583*^9, 3.706053540245316*^9}, {
   3.706053582793703*^9, 3.706053583671089*^9}, {3.706053618906926*^9, 
   3.706053640833705*^9}},
 CellID->1231277756,ExpressionUUID->"21d0fefd-da60-4da9-ab0e-02118a14d30b"],

Cell["Note that:", "Text",
 CellChangeTimes->{{3.7061383021625977`*^9, 3.70613836875279*^9}, {
  3.706138605612139*^9, 3.7061388676164236`*^9}, {3.7061389348619556`*^9, 
  3.706138944068523*^9}, {3.706139069026448*^9, 3.706139086059465*^9}, {
  3.70686481102235*^9, 3.706864816591126*^9}, {3.706864846594505*^9, 
  3.706864879276247*^9}},
 CellID->932822600,ExpressionUUID->"c1ae988c-74ad-4836-838b-c7ec430bae6a"],

Cell[TextData[{
 "the function ",
 StyleBox["Bind", "Program"],
 " unwraps the content of ",
 StyleBox["M[_]", "Program"],
 " and gives it to the function ",
 StyleBox["f", "Program"],
 ";"
}], "Subitem",
 CellChangeTimes->{{3.7061383021625977`*^9, 3.70613836875279*^9}, {
  3.706138605612139*^9, 3.7061388676164236`*^9}, {3.7061389348619556`*^9, 
  3.706138946025678*^9}, {3.706139052163564*^9, 3.706139062469482*^9}, {
  3.706139116121141*^9, 3.706139117043728*^9}},
 CellID->1318815100,ExpressionUUID->"ac807d5e-8a5e-443d-ae2c-b3fa10318ca3"],

Cell[TextData[{
 "the functions ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox[
     StyleBox["f",
      FontSlant->"Plain"], 
     StyleBox["i",
      FontSlant->"Plain"]], "Program"], TraditionalForm]],ExpressionUUID->
  "0db0a58e-41ac-4372-95c0-f75c0f8dff66"],
 " are responsible to return results wrapped with the monad symbol ",
 StyleBox["M", "Program"],
 "."
}], "Subitem",
 CellChangeTimes->{{3.7061383021625977`*^9, 3.70613836875279*^9}, {
  3.706138605612139*^9, 3.7061388676164236`*^9}, {3.7061389348619556`*^9, 
  3.706138940586095*^9}, {3.706139119527987*^9, 3.706139119665703*^9}, {
  3.706257060454463*^9, 3.706257061251528*^9}},
 CellID->1146665013,ExpressionUUID->"640a0576-5290-42cd-9597-ec2233996da8"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is an illustration formula showing a ",
 StyleBox["monad pipeline",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{
  3.7060534940603943`*^9, {3.706053547903516*^9, 3.706053564400215*^9}, {
   3.706053659557834*^9, 3.706053678454565*^9}},
 CellID->480625313,ExpressionUUID->"b2eabd56-5457-4ed4-947f-a14c551ad7d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", "[", "_", "]"}], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"Bind", "[", 
    RowBox[{
     RowBox[{"M", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "1"], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"Bind", "[", 
    RowBox[{
     RowBox[{"M", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "2"], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"Bind", "[", 
    RowBox[{
     RowBox[{"M", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "3"], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"Bind", "[", 
    RowBox[{
     RowBox[{"M", "[", "_", "]"}], ",", "f_"}], "]"}]], "\[Ellipsis]", 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"Bind", "[", 
    RowBox[{
     RowBox[{"M", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "k"]}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.7058415800987587`*^9, 3.7058416110501013`*^9}, {
   3.705841645638204*^9, 3.705841727356278*^9}, {3.705842008672937*^9, 
   3.705842032273075*^9}, 3.705842164892056*^9, {3.7058433888986998`*^9, 
   3.705843451077479*^9}, {3.7058450038863297`*^9, 3.705845053428492*^9}, 
   3.705845147446558*^9, {3.706006685056164*^9, 3.706006688498361*^9}, {
   3.706565647454422*^9, 3.706565650014637*^9}, 3.706973379971839*^9},
 CellTags->"GenericPipeline",
 CellID->1183639224,ExpressionUUID->"47873a1c-69dd-4521-9898-49ddd33f234f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "From the definition and formula it should be clear that if for the result \
of ",
 StyleBox["Bind[_M,f[x]]", "Program"],
 " the test ",
 StyleBox["MatchQ[f[x],_M]", "Program"],
 " is ",
 StyleBox["True", "Program"],
 " then the result is ready to be fed to the next binding operation in \
monad's pipeline. Also, it is clear that it is easy to program the pipeline \
functionality with ",
 StyleBox["Fold", "Program"],
 ":"
}], "Text",
 CellChangeTimes->{
  3.7060534940603943`*^9, {3.706053553564725*^9, 3.706053556513089*^9}, {
   3.70605368456314*^9, 3.706053711721194*^9}, {3.706257089645173*^9, 
   3.70625714261255*^9}, {3.70715955129305*^9, 3.707159650011685*^9}},
 CellID->1283415607,ExpressionUUID->"a37d4c1e-647d-4df9-9d1f-7e32cb67e3d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fold", "[", 
  RowBox[{"Bind", ",", 
   RowBox[{"M", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["f", "1"], ",", 
     SubscriptBox["f", "2"], ",", 
     SubscriptBox["f", "3"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.706203697220408*^9, 3.706203757904672*^9}},
 CellID->1040356381,ExpressionUUID->"e0b05f37-79ee-4bd5-b7be-30782d275023"],

Cell[BoxData[
 RowBox[{"Bind", "[", 
  RowBox[{
   RowBox[{"Bind", "[", 
    RowBox[{
     RowBox[{"Bind", "[", 
      RowBox[{
       RowBox[{"M", "[", "x", "]"}], ",", 
       SubscriptBox["f", "1"]}], "]"}], ",", 
     SubscriptBox["f", "2"]}], "]"}], ",", 
   SubscriptBox["f", "3"]}], "]"}]], "Output",
 CellChangeTimes->{{3.706203732280352*^9, 3.706203735829999*^9}, 
   3.706257176065113*^9, 3.706283831313231*^9, 3.706283943211639*^9, 
   3.70628672643364*^9, 3.706287013148623*^9, 3.706287110840163*^9, 
   3.706457023622271*^9, 3.706485453844367*^9, 3.706955604786318*^9, 
   3.7069725976771*^9, 3.707161026539687*^9, 3.707179011249875*^9},
 CellID->457841593,ExpressionUUID->"5f748953-03a6-401d-8278-5fb73dfe5355"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The monad laws", "Subsection",
 CellChangeTimes->{{3.706865026271327*^9, 3.706865029532772*^9}},
 CellID->509746350,ExpressionUUID->"d4f5b456-b9a5-4d79-8778-5f59da95618b"],

Cell[TextData[{
 "The monad laws definitions are taken from [",
 ButtonBox["H1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://wiki.haskell.org/Monad_laws"], None},
  ButtonNote->"https://wiki.haskell.org/Monad_laws"],
 "] and [H3].",
 ButtonBox[" ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://wiki.haskell.org/Monad_laws"], None},
  ButtonNote->"https://wiki.haskell.org/Monad_laws"],
 "In the monad laws given below the symbol \[OpenCurlyDoubleQuote]\
\[DoubleLongRightArrow]\[CloseCurlyDoubleQuote] is for \
monad\[CloseCurlyQuote]s binding operation and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", "\[RightTeeArrow]", "expr"}], ")"}], TraditionalForm]],
  ExpressionUUID->"8356ad4e-494e-4273-95b3-8a5917365f22"],
 " is for a function in anonymous form."
}], "Text",
 CellChangeTimes->{{3.7059208331314497`*^9, 3.705920955589033*^9}, {
  3.705921161235221*^9, 3.705921171278922*^9}, {3.706865051309722*^9, 
  3.7068650544517117`*^9}, {3.706865271333023*^9, 3.706865290807957*^9}, {
  3.706973959020671*^9, 3.706973961809504*^9}, {3.707159676978821*^9, 
  3.7071596823545856`*^9}},
 CellID->994636567,ExpressionUUID->"7c2127d1-5117-422e-bc3e-f0b7ff153937"],

Cell[CellGroupData[{

Cell["Here is a table with the laws:", "Text",
 CellChangeTimes->{{3.705920971138155*^9, 3.705920980946821*^9}},
 CellID->844073321,ExpressionUUID->"73d6da03-91fe-46cd-93b5-ce1664558960"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Left identity\>\"", ",", " ", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<unit a \[DoubleLongRightArrow] f\>\"", ",", "\"\<Formula\>\""}], 
        "]"}], ",", "\"\<\[Congruent]\>\"", ",", " ", 
       RowBox[{"Style", "[", 
        RowBox[{"\"\<f a\>\"", ",", "\"\<Formula\>\""}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Right identity\>\"", ",", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<m \[DoubleLongRightArrow] unit\>\"", ",", "\"\<Formula\>\""}], 
        "]"}], ",", "\"\<\[Congruent]\>\"", " ", ",", 
       RowBox[{"Style", "[", "\"\<m\>\"", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Associativity\>\"", ",", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<(m \[DoubleLongRightArrow] f) \[DoubleLongRightArrow] g\>\"", 
         ",", "\"\<Formula\>\""}], "]"}], ",", "\"\<\[Congruent]\>\"", ",", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<m \[DoubleLongRightArrow] (x \[RightTeeArrow] f x \
\[DoubleLongRightArrow] g)\>\"", ",", "\"\<Formula\>\""}], "]"}]}], "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"t", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"#", ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], "&"}], "/@", 
    RowBox[{"t", "\[LeftDoubleBracket]", 
     RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"GridTableForm", "[", 
  RowBox[{"t", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<name\>\"", ",", "\"\<LHS\>\"", ",", "\"\<\>\"", ",", 
      "\"\<RHS\>\""}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutoCollapse", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.7058768829331408`*^9, 3.7058768918451366`*^9}, {
  3.705915145976546*^9, 3.705915453332415*^9}, {3.705920605607696*^9, 
  3.7059206090387783`*^9}, {3.705920710134044*^9, 3.705920739439473*^9}, {
  3.705920962894299*^9, 3.705920966119819*^9}, {3.705921002047496*^9, 
  3.705921048023518*^9}, {3.7059210827330036`*^9, 3.705921101921279*^9}},
 CellID->63333965,ExpressionUUID->"81800f7b-b48b-47cd-8a06-9169944d8249"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"#\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"name\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"LHS\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"RHS\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]]},
    {"1", 
     StyleBox["\<\"Left identity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     StyleBox["\<\"unit a \[DoubleLongRightArrow] f\"\>", "Formula",
      StripOnInput->False], "\<\"\[Congruent]\"\>", 
     StyleBox["\<\"f a\"\>", "Formula",
      StripOnInput->False]},
    {"2", 
     StyleBox["\<\"Right identity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     StyleBox["\<\"m \[DoubleLongRightArrow] unit\"\>", "Formula",
      StripOnInput->False], "\<\"\[Congruent]\"\>", "\<\"m\"\>"},
    {"3", 
     StyleBox["\<\"Associativity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     StyleBox["\<\"(m \[DoubleLongRightArrow] f) \[DoubleLongRightArrow] \
g\"\>", "Formula",
      StripOnInput->False], "\<\"\[Congruent]\"\>", 
     StyleBox["\<\"m \[DoubleLongRightArrow] (x \[RightTeeArrow] f x \
\[DoubleLongRightArrow] g)\"\>", "Formula",
      StripOnInput->False]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{Automatic}}, "Rows" -> {
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96]}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {
      1 -> GrayLevel[0], 2 -> GrayLevel[0], 3 -> GrayLevel[0.8], 4 -> 
       GrayLevel[0.8], 5 -> GrayLevel[0.8], 6 -> GrayLevel[0.8], 6 -> 
       GrayLevel[0]}, "Rows" -> {True, True, {False}, True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.705915288290884*^9, 3.705915334812973*^9}, {
   3.705915400166631*^9, 3.705915460128318*^9}, 3.705920610144546*^9, 
   3.705920769040758*^9, 3.705920966984571*^9, {3.705921034369842*^9, 
   3.705921048493954*^9}, 3.705921102555973*^9, 3.706097141769649*^9, 
   3.706097411886108*^9, 3.706097456181221*^9, 3.706098662303817*^9, 
   3.70622897594256*^9, 3.706229162216526*^9, 3.706283833809732*^9, 
   3.706283946074368*^9, 3.706286729535647*^9, 3.706287017256941*^9, 
   3.706287114312318*^9, 3.7062874748590097`*^9, 3.706457025678316*^9, 
   3.706485454462871*^9, 3.7068643694328833`*^9, 3.706955604887937*^9, 
   3.706972598073517*^9, 3.707161026842853*^9, 3.707179011503107*^9},
 CellID->1449544490,ExpressionUUID->"e51006fd-618b-446a-9548-c278a0ffb191"]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " The monad laws are satisfied for every symbol in Mathematica / WL with ",
 StyleBox["List", "Program"],
 " being the unit operation and ",
 StyleBox["Apply", "Program"],
 " being the binding operation. "
}], "Text",
 CellChangeTimes->{{3.706258670425273*^9, 3.706258804544221*^9}, {
  3.7070246038573112`*^9, 3.7070246434469857`*^9}},
 CellID->1439751862,ExpressionUUID->"eb8d539b-2232-4678-a092-26435f104526"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"DoubleLongRightArrow", ",", 
     RowBox[{"Unit", "=", "List"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DoubleLongRightArrow", "[", 
      RowBox[{"x_", ",", "f_"}], "]"}], ":=", 
     RowBox[{"f", "@@", "x"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"t", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Left identity\>\"", ",", " ", 
         RowBox[{"HoldForm", "[", 
          RowBox[{
           RowBox[{"Unit", "[", "a", "]"}], "\[DoubleLongRightArrow]", "f"}], 
          "]"}], ",", " ", 
         RowBox[{"f", "@@", 
          RowBox[{"Unit", "[", "a", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Right identity\>\"", ",", 
         RowBox[{"HoldForm", "[", 
          RowBox[{
           RowBox[{"{", "a", "}"}], "\[DoubleLongRightArrow]", "Unit"}], 
          "]"}], " ", ",", 
         RowBox[{
          RowBox[{"{", "a", "}"}], "\[DoubleLongRightArrow]", "Unit"}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Associativity LHS\>\"", ",", 
         RowBox[{"HoldForm", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"List", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"List", "@", 
                RowBox[{"f1", "[", "#1", "]"}]}], "&"}], ")"}]}], ")"}], 
           "\[DoubleLongRightArrow]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"List", "@", 
              RowBox[{"f2", "[", "#1", "]"}]}], "&"}], ")"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"List", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"List", "@", 
               RowBox[{"f1", "[", "#1", "]"}]}], "&"}], ")"}]}], ")"}], 
          "\[DoubleLongRightArrow]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"List", "@", 
             RowBox[{"f2", "[", "#1", "]"}]}], "&"}], ")"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Associativity RHS\>\"", ",", 
         RowBox[{"HoldForm", "[", 
          RowBox[{
           RowBox[{"List", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", "x", "}"}], ",", 
             RowBox[{
              RowBox[{"List", "@", 
               RowBox[{"f1", "[", "x", "]"}]}], "\[DoubleLongRightArrow]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"List", "@", 
                 RowBox[{"f2", "[", "#", "]"}]}], "&"}], ")"}]}]}], "]"}]}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"List", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "x", "}"}], ",", 
            RowBox[{
             RowBox[{"List", "@", 
              RowBox[{"f1", "[", "x", "]"}]}], "\[DoubleLongRightArrow]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"List", "@", 
                RowBox[{"f2", "[", "#", "]"}]}], "&"}], ")"}]}]}], "]"}]}]}], 
        "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"t", "\[LeftDoubleBracket]", 
      RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"#", ",", 
         RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], "&"}], "/@", 
      RowBox[{"t", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"GridTableForm", "[", 
     RowBox[{"t", ",", 
      RowBox[{"TableHeadings", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<name\>\"", ",", "\"\<Input\>\"", ",", "\"\<Output\>\""}],
         "}"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutoCollapse", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.7062577359157753`*^9, 3.7062579003639297`*^9}, {
  3.70625818946457*^9, 3.706258203081437*^9}, {3.70625827876188*^9, 
  3.706258560773974*^9}, {3.706258936376696*^9, 3.706258940991365*^9}, {
  3.707024770668938*^9, 3.70702477651607*^9}},
 CellID->63810238,ExpressionUUID->"1485a5d1-295f-4b4f-ba4b-0344dba20dc5"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"#\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"name\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Input\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Output\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]]},
    {"1", 
     StyleBox["\<\"Left identity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"Unit", "[", "a", "]"}], "\[DoubleLongRightArrow]", "f"}],
      HoldForm], 
     RowBox[{"f", "[", "a", "]"}]},
    {"2", 
     StyleBox["\<\"Right identity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"{", "a", "}"}], "\[DoubleLongRightArrow]", "Unit"}],
      HoldForm], 
     RowBox[{"{", "a", "}"}]},
    {"3", 
     StyleBox["\<\"Associativity LHS\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", "a", "}"}], "\[DoubleLongRightArrow]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"f1", "[", "#1", "]"}], "}"}], "&"}], ")"}]}], ")"}], 
       "\[DoubleLongRightArrow]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"f2", "[", "#1", "]"}], "}"}], "&"}], ")"}]}],
      HoldForm], 
     RowBox[{"{", 
      RowBox[{"f2", "[", 
       RowBox[{"f1", "[", "a", "]"}], "]"}], "}"}]},
    {"4", 
     StyleBox["\<\"Associativity RHS\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"{", "a", "}"}], "\[DoubleLongRightArrow]", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "x", "}"}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"f1", "[", "x", "]"}], "}"}], "\[DoubleLongRightArrow]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"f2", "[", "#1", "]"}], "}"}], "&"}], ")"}]}]}], "]"}]}],
      
      HoldForm], 
     RowBox[{"{", 
      RowBox[{"f2", "[", 
       RowBox[{"f1", "[", "a", "]"}], "]"}], "}"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{Automatic}}, "Rows" -> {
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96]}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {
      1 -> GrayLevel[0], 2 -> GrayLevel[0], 3 -> GrayLevel[0.8], 4 -> 
       GrayLevel[0.8], 5 -> GrayLevel[0.8], 5 -> GrayLevel[0]}, 
     "Rows" -> {True, True, {False}, True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.706258294218594*^9, {3.706258332793261*^9, 3.706258347299045*^9}, 
   3.706258441108767*^9, {3.70625848644605*^9, 3.706258499079122*^9}, {
   3.7062585374644423`*^9, 3.706258561433181*^9}, 3.706258941322584*^9, 
   3.706283834544422*^9, 3.706283946733584*^9, 3.70628673034256*^9, 
   3.706287017979805*^9, 3.706287115064393*^9, 3.706287475691091*^9, 
   3.706457026149928*^9, 3.7070247773638296`*^9, 3.707161027104375*^9, 
   3.70717901168628*^9},
 CellID->864330213,ExpressionUUID->"035c3099-6c71-4b08-85e5-bc2979cfe74d"]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Expected monadic programming features", "Subsection",
 CellChangeTimes->{{3.706203421108522*^9, 3.706203425675221*^9}, {
  3.706203539345417*^9, 3.706203554724166*^9}, {3.7064821203109007`*^9, 
  3.7064821365519047`*^9}},
 CellID->1218501583,ExpressionUUID->"1bd7a009-c088-42ba-894d-cd0d4246dbf2"],

Cell[TextData[{
 "Looking at formula (",
 
 CounterBox["Title", "GenericPipeline"],
 ") -- and having certain programming experiences -- we can expect the \
following features when using monadic programming."
}], "Text",
 CellChangeTimes->{{3.706133043175449*^9, 3.706133068083064*^9}, {
  3.706133159275072*^9, 3.706133189550221*^9}, {3.706133224424821*^9, 
  3.7061332356087914`*^9}, {3.706203438173069*^9, 3.706203499184109*^9}, {
  3.7064820051447277`*^9, 3.706482078739949*^9}, {3.706831657682827*^9, 
  3.706831674240532*^9}},
 CellID->952047689,ExpressionUUID->"f9063bef-56f8-45cb-bf64-0dee868fb600"],

Cell["\<\
Computations that can be expressed with monad pipelines are easy to construct \
and read.\
\>", "Subitem",
 CellChangeTimes->{{3.706133043175449*^9, 3.706133068083064*^9}, {
  3.706133159275072*^9, 3.706133189550221*^9}, {3.706133224424821*^9, 
  3.7061332356087914`*^9}, {3.706203438173069*^9, 3.706203471810717*^9}, {
  3.706203502737338*^9, 3.706203507259491*^9}, {3.706229246792305*^9, 
  3.706229281228194*^9}},
 CellID->164855226,ExpressionUUID->"4f33f7b9-0fef-443a-ad55-76dd336fe0f5"],

Cell["\<\
By programming the binding function we can tuck-in a variety of monad \
behaviours -- this is the so called \[OpenCurlyDoubleQuote]programmable \
semicolon\[CloseCurlyDoubleQuote] feature of monads.\
\>", "Subitem",
 CellChangeTimes->{{3.706133043175449*^9, 3.706133068083064*^9}, {
  3.706133159275072*^9, 3.706133189550221*^9}, {3.706133224424821*^9, 
  3.7061332356087914`*^9}, {3.706203438173069*^9, 3.706203471810717*^9}, {
  3.706203502737338*^9, 3.706203527961594*^9}, {3.706203560013584*^9, 
  3.7062036434429708`*^9}, {3.706229290368229*^9, 3.706229298677948*^9}, {
  3.706974039584865*^9, 3.706974044712899*^9}, {3.70715974542246*^9, 
  3.707159757986685*^9}},
 CellID->467878752,ExpressionUUID->"eb51873d-9ee0-4cbe-842c-dd8520ea2e4a"],

Cell[TextData[{
 "Monad pipelines can be constructed with ",
 StyleBox["Fold", "Program"],
 StyleBox[", but with suitable definitions of infix operators like ", 
  "Text"],
 StyleBox["DoubleLongRightArrow", "Program"],
 StyleBox[" (", "Text"],
 Cell[BoxData[
  FormBox["\[DoubleLongRightArrow]", TraditionalForm]],ExpressionUUID->
  "e02441f9-c01d-43bd-9400-642c9154bf9e"],
 StyleBox[") we can produce code that resembles the pipeline in formula (", 
  "Text"],
 
 CounterBox["DisplayFormulaNumbered", "GenericPipeline"],
 StyleBox[").", "Text"]
}], "Subitem",
 CellChangeTimes->{{3.706133043175449*^9, 3.706133068083064*^9}, {
   3.706133159275072*^9, 3.706133189550221*^9}, {3.706133224424821*^9, 
   3.7061332356087914`*^9}, {3.706203438173069*^9, 3.706203471810717*^9}, {
   3.706203502737338*^9, 3.706203527961594*^9}, {3.706203560013584*^9, 
   3.706203693753536*^9}, {3.706203807975897*^9, 3.706203807976787*^9}, {
   3.7062039260465*^9, 3.706204069082287*^9}, {3.706204102853751*^9, 
   3.706204158035684*^9}, {3.706229317175714*^9, 3.706229325828196*^9}, {
   3.706256866234408*^9, 3.7062569091189623`*^9}, 3.706481981837702*^9},
 CellID->1700553197,ExpressionUUID->"add486e4-cf00-482b-8883-f2c8067fb2dd"],

Cell[TextData[{
 StyleBox["A monad pipeline can have polymorphic behaviour by overloading the \
signatures of ", "Text"],
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox[
     StyleBox["f",
      FontSlant->"Plain"], 
     StyleBox["i",
      FontSlant->"Plain"]], "Program"], TraditionalForm]],ExpressionUUID->
  "15c6a907-0927-455f-8313-f56f56211d9b"],
 " (and if we have to, ",
 StyleBox["Bind", "Program"],
 ".)"
}], "Subitem",
 CellChangeTimes->{{3.706133043175449*^9, 3.706133068083064*^9}, {
  3.706133159275072*^9, 3.706133189550221*^9}, {3.706133224424821*^9, 
  3.7061332356087914`*^9}, {3.706203438173069*^9, 3.706203471810717*^9}, {
  3.706203502737338*^9, 3.706203527961594*^9}, {3.706203560013584*^9, 
  3.706203693753536*^9}, {3.7062038141889353`*^9, 3.706203901532596*^9}, {
  3.706229346830665*^9, 3.706229348212837*^9}, {3.706256919860775*^9, 
  3.706256945161424*^9}, {3.706831710816875*^9, 3.706831710949421*^9}},
 CellID->337724056,ExpressionUUID->"21ec4e04-f675-4cb9-a22f-0bd800fc7479"],

Cell[TextData[{
 "These points are clarified below. For more complete discussions see [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 "] or [H3]."
}], "Text",
 CellChangeTimes->{{3.7062568183935757`*^9, 3.706256833009359*^9}, {
  3.7062571855318747`*^9, 3.706257187466827*^9}, {3.706482083543634*^9, 
  3.70648211442447*^9}, {3.706974067090263*^9, 3.706974070047888*^9}, {
  3.706974701707005*^9, 3.706974705067846*^9}},
 CellID->328930171,ExpressionUUID->"bce7830c-1318-4f4c-a79e-143f33b41f8a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The basic Maybe monad", "Section",
 CellChangeTimes->{{3.706473750513975*^9, 3.706473764427038*^9}, {
  3.706474310662725*^9, 3.706474313160454*^9}, {3.7064874173004436`*^9, 
  3.706487442162887*^9}, {3.70683151273705*^9, 3.7068315192031593`*^9}},
 CellID->706476619,ExpressionUUID->"1bd4724c-d709-4f8e-bb6a-ec1416667d19"],

Cell[TextData[{
 "It is fairly easy to program the basic monad Maybe discussed in [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 "]."
}], "Text",
 CellChangeTimes->{{3.706474531228466*^9, 3.706474582898899*^9}, {
  3.706866636763273*^9, 3.706866640034311*^9}},
 CellID->315451270,ExpressionUUID->"7414315c-cb4d-4b6e-a86f-2bb5273ad456"],

Cell[TextData[{
 "The goal of the Maybe monad is to provide easy exception handling in a \
sequence of chained computational steps. If one of the computation steps \
fails then the whole pipeline returns a designated failure symbol, say ",
 Cell[BoxData[
  FormBox[
   StyleBox["None", "Program"], TraditionalForm]],ExpressionUUID->
  "04998227-ecce-47e4-83c4-fc56b616ff71"],
 "; otherwise the result after the last step is wrapped in another designated \
symbol, say ",
 StyleBox["Maybe", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.705839914148795*^9, 3.705839977555404*^9}, {
   3.706133005580281*^9, 3.706133031048676*^9}, {3.706133094762998*^9, 
   3.70613315406706*^9}, {3.706133414745503*^9, 3.706133444119071*^9}, {
   3.70613352902304*^9, 3.7061335375149*^9}, {3.706133923731386*^9, 
   3.7061339469620543`*^9}, {3.706137966259427*^9, 3.706138105872965*^9}, {
   3.7061382307941732`*^9, 3.706138269352143*^9}, 3.706221935698387*^9, {
   3.706474685645891*^9, 3.706474701486904*^9}},
 CellID->1799854094,ExpressionUUID->"947a7647-c656-49f3-9637-8e9eb0bf5d46"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the special version of the generic pipeline formula (",
 
 CounterBox["DisplayFormulaNumbered", "GenericPipeline"],
 ") for the Maybe monad:"
}], "Text",
 CellChangeTimes->{{3.7061382799118*^9, 3.706138285379029*^9}, {
   3.706138412458793*^9, 3.706138472558254*^9}, 3.706138580774545*^9, {
   3.7061918719306097`*^9, 3.706191873844305*^9}, 3.706192669382153*^9},
 CellID->693106216,ExpressionUUID->"b783ff87-c347-49b3-8752-927d110991bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Maybe", "[", "_", "]"}], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   FormBox[
    RowBox[{"Bind", "[", 
     RowBox[{"m_", ",", "f_"}], "]"}],
    TraditionalForm]], "\[Ellipsis]", 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   FormBox[
    RowBox[{"Bind", "[", 
     RowBox[{"m_", ",", "f_"}], "]"}],
    TraditionalForm]], 
  RowBox[{"(", 
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {"None", 
          RowBox[{"m", "\[Congruent]", "None"}]},
         {
          RowBox[{
           SubscriptBox["f", "i"], "[", "x", "]"}], 
          RowBox[{"m", " ", 
           StyleBox["is",
            FontSlant->"Italic"], " ", 
           RowBox[{"Maybe", "[", "x_", "]"}]}]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}},
        Selectable->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ")"}], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   FormBox[
    RowBox[{"Bind", "[", 
     RowBox[{"m_", ",", "f_"}], "]"}],
    TraditionalForm]], "\[Ellipsis]"}]], "DisplayFormulaNumbered",
 CellChangeTimes->{{3.7058415800987587`*^9, 3.7058416110501013`*^9}, {
   3.705841645638204*^9, 3.705841727356278*^9}, {3.705842008672937*^9, 
   3.705842032273075*^9}, {3.7058421067386723`*^9, 3.705842230314228*^9}, {
   3.705842362752913*^9, 3.7058424149282904`*^9}, {3.7058424462189007`*^9, 
   3.705842463420093*^9}, {3.705842644875393*^9, 3.7058426809670143`*^9}, {
   3.705843152340897*^9, 3.70584321688457*^9}, {3.705843270131932*^9, 
   3.705843295835958*^9}, {3.705844576779033*^9, 3.705844593914673*^9}, 
   3.705844999374545*^9, {3.705845375491191*^9, 3.70584537682789*^9}, {
   3.705878653114572*^9, 3.705878654676671*^9}, {3.705950704365228*^9, 
   3.705950705590889*^9}, {3.706006840771297*^9, 3.706006846598633*^9}, 
   3.706014706799456*^9, {3.70601475826876*^9, 3.706014758807725*^9}, {
   3.706139233673126*^9, 3.70613923939569*^9}, {3.7061392924515886`*^9, 
   3.706139323512179*^9}, {3.706221921405919*^9, 3.706221925420204*^9}, {
   3.706455752440599*^9, 3.7064557605784607`*^9}, {3.706565650981925*^9, 
   3.706565652197357*^9}, 3.707129277639826*^9},
 CellTags->"MaybePipeline",
 CellID->1084870984,ExpressionUUID->"7aadc862-95af-4b15-8022-061a53abaa63"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here is the minimal code to get a functional Maybe monad (for a more detailed \
exposition of code and explanations see [AA7]):\
\>", "Text",
 CellChangeTimes->{{3.706474598431561*^9, 3.706474645211678*^9}, {
  3.706474821657597*^9, 3.70647484532717*^9}, {3.706951454135872*^9, 
  3.70695145516795*^9}},
 CellID->1290465058,ExpressionUUID->"a92adb48-d48e-434a-8af8-e503cce6dee4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MaybeUnitQ", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"MatchQ", "[", 
     RowBox[{"x", ",", "None"}], "]"}], "||", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"x", ",", 
      RowBox[{"Maybe", "[", "___", "]"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.70622203188728*^9, 3.706222036759837*^9}},
 CellID->1408878753,ExpressionUUID->"25727bc7-f64f-4724-a6d1-567bd2a17242"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MaybeUnit", "[", "None", "]"}], ":=", "None"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MaybeUnit", "[", "x_", "]"}], ":=", 
   RowBox[{"Maybe", "[", "x", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7062869745656548`*^9, 3.706286995592457*^9}},
 CellID->870509849,ExpressionUUID->"1387537b-9b18-43dd-b58d-b6ead8ecb7ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MaybeBind", "[", 
    RowBox[{"None", ",", "f_"}], "]"}], ":=", "None"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MaybeBind", "[", 
    RowBox[{
     RowBox[{"Maybe", "[", "x_", "]"}], ",", "f_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"res", "=", 
       RowBox[{"f", "[", "x", "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{"res", ",", "None"}], "]"}], ",", "res", ",", "None"}], 
      "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQA2IQrfPkcOGhWa8d54VwN4Bog6jVrSD6RlJPG4hmePpi
C4iOj1+8FUT3GO86AqKFrx0C05+yos6B6PLdcWCa/QjDTRB9JO7RHRCt8Kvp
y2EgfXpi8S8Q3fVlF9MRIH0ixFMARO8K/esAonkY2B1B9JTqlicgeta+5U9B
tEzGv/YHQFrkoVUXiL4fkKbdOfu1o+lWIR0Q/VLzvDWIVnOKtQfRMQbMHSC6
YOqbXhDteePVFhDtU92+B0SX3goX7ALSS64ngumFp5o9lwHpV7mTvEC0SpF1
KoiWCXYG053nz0/bBaT/8F0A0z4MivNBdJwlhPY+82gV39zXjh27f4LpK+8z
P+gCafd5eWAaAMifxqA=
  "],
 CellID->2000428779,ExpressionUUID->"1034fe4e-6b38-45d9-80ce-4b5d37100292"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MaybeEcho", "[", "x_", "]"}], ":=", 
   RowBox[{"Maybe", "@", 
    RowBox[{"Echo", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MaybeEchoFunction", "[", "f___", "]"}], "[", "x_", "]"}], ":=", 
   RowBox[{"Maybe", "@", 
    RowBox[{
     RowBox[{"EchoFunction", "[", "f", "]"}], "[", "x", "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7061918051072206`*^9, 3.7061918453482127`*^9}, 
   3.706221917342641*^9, {3.706270599996495*^9, 3.706270600507215*^9}, {
   3.706287265439727*^9, 3.706287266348579*^9}, {3.70647493656483*^9, 
   3.706474954619274*^9}},
 CellID->202511221,ExpressionUUID->"c2009b40-7938-49d8-83b4-e666ef6597ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MaybeOption", "[", "f_", "]"}], "[", "xs_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"res", "=", 
       RowBox[{"f", "[", "xs", "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{"res", ",", "None"}], "]"}], ",", "res", ",", 
       RowBox[{"Maybe", "@", "xs"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.706228356121695*^9, 3.706228380378304*^9}},
 CellID->1991994499,ExpressionUUID->"cf63271a-ee18-4210-acb0-4401e7426b5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "In order to make the pipeline form of the code we write let us give \
definitions to a suitable infix operator (like \[OpenCurlyDoubleQuote]\
\[DoubleLongRightArrow]\[CloseCurlyDoubleQuote]) to use ",
 StyleBox["MaybeBind", "Program"],
 ":"
}], "Text",
 CellChangeTimes->{{3.70619358851236*^9, 3.706193598637636*^9}, {
  3.706193818710615*^9, 3.706193871664394*^9}, {3.7061939328642473`*^9, 
  3.706193995671919*^9}, {3.707159905343502*^9, 3.707159918393118*^9}},
 CellID->181487963,ExpressionUUID->"74edad52-83f3-4ea6-92d8-fd7a1e20bd8b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"DoubleLongRightArrow", "[", 
    RowBox[{
     RowBox[{"x_", "?", "MaybeUnitQ"}], ",", "f_"}], "]"}], ":=", 
   RowBox[{"MaybeBind", "[", 
    RowBox[{"x", ",", "f"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DoubleLongRightArrow", "[", 
    RowBox[{"x_", ",", "y_", ",", "z__"}], "]"}], ":=", 
   RowBox[{"DoubleLongRightArrow", "[", 
    RowBox[{
     RowBox[{"DoubleLongRightArrow", "[", 
      RowBox[{"x", ",", "y"}], "]"}], ",", "z"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.705019667466213*^9, 3.705019674118647*^9}, {
   3.70501975649477*^9, 3.705019775875351*^9}, {3.705019844099067*^9, 
   3.705019856617247*^9}, {3.705020155216647*^9, 3.705020157162862*^9}, {
   3.705020854194694*^9, 3.705020912930917*^9}, 3.70502101984025*^9, {
   3.7050212255588493`*^9, 3.705021228776246*^9}, {3.705022266595969*^9, 
   3.705022287644268*^9}, {3.705048701578329*^9, 3.705048704817139*^9}, {
   3.705061618682856*^9, 3.705061640901429*^9}, {3.705061687499438*^9, 
   3.705061696733509*^9}, 3.705061741231071*^9, {3.705525430746241*^9, 
   3.705525430761937*^9}, {3.705525497293652*^9, 3.705525497308969*^9}, {
   3.706142395097943*^9, 3.706142443977816*^9}, {3.7061428249816437`*^9, 
   3.706142826077677*^9}, {3.706193666993018*^9, 3.7061936817901173`*^9}, {
   3.706193873643674*^9, 3.706193906689987*^9}, {3.706222054030163*^9, 
   3.706222058820178*^9}},
 CellID->841415401,ExpressionUUID->"3ed0972b-7211-45e2-81c8-20fa3a4367b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here is an example of a Maybe monad pipeline using the definitions so far:\
\>", "Text",
 CellChangeTimes->{{3.706142457961129*^9, 3.706142481339106*^9}, {
  3.7061917817295723`*^9, 3.706191784473988*^9}, {3.7061940959770947`*^9, 
  3.706194110896705*^9}},
 CellID->488829112,ExpressionUUID->"ccc9da7c-dfb3-4096-a93d-812a8ae266ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
    "0.61", ",", "0.48", ",", "0.92", ",", "0.90", ",", "0.32", ",", "0.11"}],
     "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.70614248335867*^9, 3.706142537586325*^9}, {
  3.706142572815717*^9, 3.706142743601222*^9}, {3.70614284296531*^9, 
  3.706142871605355*^9}, {3.706185405566462*^9, 3.7061854369435577`*^9}, {
  3.706185472530124*^9, 3.70618556363418*^9}, {3.70618560148638*^9, 
  3.706185607904906*^9}, {3.706193207848769*^9, 3.7061932321869297`*^9}},
 CellID->1625935609,ExpressionUUID->"ecaec76f-ad17-4fb3-aa3d-f2f89a6bace3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\nMaybeUnit[data]\[DoubleLongRightArrow](* lift data into the monad \
*)\n (Maybe@Join[#,RandomInteger[8,3]]&)\[DoubleLongRightArrow](* add more \
values *)\n MaybeEcho\[DoubleLongRightArrow](* display current value *)\n \
(Maybe@Map[If[#<0.4,None,#]&,#]&)(* map values that are too small to None \
*)\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"GridOfCodeAndComments", "[", 
  RowBox[{"code", ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<GridFunction\>\"", "\[Rule]", "Automatic"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"ToExpression", "[", "code", "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutoCollapse", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.70614248335867*^9, 3.706142537586325*^9}, {
   3.706142572815717*^9, 3.706142743601222*^9}, {3.70614284296531*^9, 
   3.706142871605355*^9}, {3.706185405566462*^9, 3.7061854369435577`*^9}, {
   3.706185472530124*^9, 3.70618556363418*^9}, 3.70618560148638*^9, {
   3.706185707555558*^9, 3.70618594701559*^9}, {3.706186001112154*^9, 
   3.7061860166362457`*^9}, {3.7061860524356008`*^9, 3.70618605287683*^9}, {
   3.70618639821077*^9, 3.706186401293268*^9}, {3.706186450855618*^9, 
   3.7061864594908953`*^9}, {3.706186558586776*^9, 3.706186603089072*^9}, {
   3.706186636222533*^9, 3.706186652501627*^9}, {3.706190355473512*^9, 
   3.706190414914597*^9}, {3.706190463488427*^9, 3.706190473984031*^9}, 
   3.706190508473968*^9, {3.706190682274896*^9, 3.70619070756916*^9}, {
   3.706190752954215*^9, 3.7061907597910147`*^9}, {3.706190801284828*^9, 
   3.706190885245774*^9}, {3.7061930062664547`*^9, 3.706193006647694*^9}, {
   3.706193157284886*^9, 3.706193163652165*^9}, {3.706193689440126*^9, 
   3.7061937000370493`*^9}, {3.706193763688146*^9, 3.706193767127136*^9}, {
   3.706193910176658*^9, 3.706193922181838*^9}, {3.706194019951973*^9, 
   3.7061940217855797`*^9}, {3.706194065246999*^9, 3.7061940657735987`*^9}, {
   3.706195653009345*^9, 3.7061956567416286`*^9}, {3.706222149781198*^9, 
   3.706222168329625*^9}, {3.706222679223361*^9, 3.706222679883559*^9}, {
   3.706260726596794*^9, 3.706260741409894*^9}, {3.706287037267804*^9, 
   3.706287064525491*^9}, {3.706474971202601*^9, 3.706475048556962*^9}, {
   3.706475498757479*^9, 3.706475499117219*^9}},
 CellID->370372388,ExpressionUUID->"e3cfe45c-d3b6-4f0e-b016-317f33337ced"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"MaybeUnit[data]\[DoubleLongRightArrow]\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* lift data into the monad *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     StyleBox["\<\" \
(Maybe@Join[#,RandomInteger[8,3]]&)\[DoubleLongRightArrow]\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* add more values *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     StyleBox["\<\" MaybeEcho\[DoubleLongRightArrow]\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* display current value *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     StyleBox["\<\" (Maybe@Map[If[#<0.4,None,#]&,#]&)\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* map values that are too small to None *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.706475499718873*^9, 3.706485454192693*^9, 
  3.706864369136743*^9, 3.706955605175933*^9, 3.7069725989390597`*^9, 
  3.707161027530422*^9, 3.707177166883068*^9, 3.707179011990122*^9},
 CellID->1441116110,ExpressionUUID->"7bad8870-44dc-4857-8d0c-bd8180d2fc31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.61`", ",", "0.48`", ",", "0.92`", ",", "0.9`", ",", "0.32`", ",", 
   "0.11`", ",", "2", ",", "6", ",", "5"}], "}"}]], "Echo",
 CellChangeTimes->{3.7071790120009*^9},
 CellID->1517889904,ExpressionUUID->"c8badb9c-8f68-4740-9345-14700e6f1d9b"],

Cell[BoxData["None"], "Output",
 CellChangeTimes->{3.706475499718873*^9, 3.706485454192693*^9, 
  3.706864369136743*^9, 3.706955605175933*^9, 3.7069725989390597`*^9, 
  3.707161027530422*^9, 3.707177166883068*^9, 3.707179012079521*^9},
 CellID->1217373815,ExpressionUUID->"e35b5df9-5862-42af-a00f-1a81a4ca7dfb"]
}, {2, 3, 4}]]
}, Open  ]],

Cell[TextData[{
 "The result is ",
 StyleBox["None", "Program"],
 " because:"
}], "Text",
 CellChangeTimes->{{3.706475325553432*^9, 3.706475342078236*^9}, {
  3.706475539257576*^9, 3.706475668263358*^9}},
 CellID->1325003736,ExpressionUUID->"01f941cf-9915-43c1-8a87-bd221287b81a"],

Cell["1. the data has a number that is too small, and ", "Text",
 CellChangeTimes->{{3.706475325553432*^9, 3.706475342078236*^9}, {
  3.706475539257576*^9, 3.706475667265195*^9}},
 CellID->2079855209,ExpressionUUID->"fa5e48f0-5c46-4be9-95ea-d093074762aa"],

Cell[TextData[{
 "2. the definition of ",
 StyleBox["MaybeBind", "Program"],
 " stops the pipeline aggressively using a ",
 StyleBox["FreeQ[_,None]", "Program"],
 " test. "
}], "Text",
 CellChangeTimes->{{3.706475325553432*^9, 3.706475342078236*^9}, {
  3.706475539257576*^9, 3.706475663444447*^9}, {3.706482363717978*^9, 
  3.706482421202599*^9}},
 CellID->1535175444,ExpressionUUID->"6469ebd9-97c4-4f09-b226-f6966e195b6c"],

Cell[CellGroupData[{

Cell["Monad laws verification", "Subsection",
 CellChangeTimes->{{3.7062286996787353`*^9, 3.706228705798901*^9}, {
  3.706477188658794*^9, 3.7064771944161263`*^9}},
 CellID->1825152250,ExpressionUUID->"9ac5e434-9f66-47ff-94b6-48b3f2ebfaf8"],

Cell[TextData[{
 "Let us convince ourselves that the current definition of ",
 StyleBox["MaybeBind", "Program"],
 " gives a monad."
}], "Text",
 CellChangeTimes->{{3.706228761036691*^9, 3.706228769778063*^9}, {
   3.7062288511055098`*^9, 3.706228885766965*^9}, {3.706228996983399*^9, 
   3.706229110363598*^9}, 3.706287097383731*^9, {3.706477241365125*^9, 
   3.706477271503662*^9}, {3.706865040089231*^9, 3.706865040997734*^9}},
 CellID->677452002,ExpressionUUID->"8804fdcc-e919-4fef-8f45-3e21802a3e03"],

Cell[CellGroupData[{

Cell["\<\
The verification is straightforward to program and shows that the implemented \
Maybe monad adheres to the monad laws.\
\>", "Text",
 CellChangeTimes->{{3.706257936228244*^9, 3.706258002840798*^9}, {
  3.7062580337922564`*^9, 3.706258045152104*^9}},
 CellID->2124984867,ExpressionUUID->"75d13069-5c1f-40eb-951e-4ad3a340c459"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Left identity\>\"", ",", " ", 
       RowBox[{"HoldForm", "[", 
        RowBox[{
         RowBox[{"MaybeUnit", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
         "f"}], "]"}], ",", " ", 
       RowBox[{
        RowBox[{"MaybeUnit", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
        "f"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Right identity\>\"", ",", 
       RowBox[{"HoldForm", "[", 
        RowBox[{
         RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
         "MaybeUnit"}], "]"}], " ", ",", 
       RowBox[{
        RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
        "MaybeUnit"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Associativity LHS\>\"", ",", 
       RowBox[{"HoldForm", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Maybe", "@", 
              RowBox[{"f1", "[", "#1", "]"}]}], "&"}], ")"}]}], ")"}], 
         "\[DoubleLongRightArrow]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Maybe", "@", 
            RowBox[{"f2", "[", "#1", "]"}]}], "&"}], ")"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Maybe", "@", 
             RowBox[{"f1", "[", "#1", "]"}]}], "&"}], ")"}]}], ")"}], 
        "\[DoubleLongRightArrow]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Maybe", "@", 
           RowBox[{"f2", "[", "#1", "]"}]}], "&"}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Associativity RHS\>\"", ",", 
       RowBox[{"HoldForm", "[", 
        RowBox[{
         RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "x", "}"}], ",", 
           RowBox[{
            RowBox[{"Maybe", "@", 
             RowBox[{"f1", "[", "x", "]"}]}], "\[DoubleLongRightArrow]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Maybe", "@", 
               RowBox[{"f2", "[", "#", "]"}]}], "&"}], ")"}]}]}], "]"}]}], 
        "]"}], ",", 
       RowBox[{
        RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", "x", "}"}], ",", 
          RowBox[{
           RowBox[{"Maybe", "@", 
            RowBox[{"f1", "[", "x", "]"}]}], "\[DoubleLongRightArrow]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Maybe", "@", 
              RowBox[{"f2", "[", "#", "]"}]}], "&"}], ")"}]}]}], "]"}]}]}], 
      "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"t", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"#", ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], "&"}], "/@", 
    RowBox[{"t", "\[LeftDoubleBracket]", 
     RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"GridTableForm", "[", 
  RowBox[{"t", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<name\>\"", ",", "\"\<Input\>\"", ",", "\"\<Output\>\""}], 
     "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutoCollapse", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.7062577359157753`*^9, 3.7062579003639297`*^9}},
 CellID->1967610059,ExpressionUUID->"881be047-2f89-4e16-9ea9-fc40f1e19c00"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"#\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"name\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Input\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Output\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]]},
    {"1", 
     StyleBox["\<\"Left identity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"MaybeUnit", "[", "a", "]"}], "\[DoubleLongRightArrow]", "f"}],
      
      HoldForm], 
     RowBox[{"f", "[", "a", "]"}]},
    {"2", 
     StyleBox["\<\"Right identity\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
       "MaybeUnit"}],
      HoldForm], 
     RowBox[{"Maybe", "[", "a", "]"}]},
    {"3", 
     StyleBox["\<\"Associativity LHS\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Maybe", "[", 
            RowBox[{"f1", "[", "#1", "]"}], "]"}], "&"}], ")"}]}], ")"}], 
       "\[DoubleLongRightArrow]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Maybe", "[", 
          RowBox[{"f2", "[", "#1", "]"}], "]"}], "&"}], ")"}]}],
      HoldForm], 
     RowBox[{"Maybe", "[", 
      RowBox[{"f2", "[", 
       RowBox[{"f1", "[", "a", "]"}], "]"}], "]"}]},
    {"4", 
     StyleBox["\<\"Associativity RHS\"\>",
      StripOnInput->False,
      FontFamily->"Times"], 
     TagBox[
      RowBox[{
       RowBox[{"Maybe", "[", "a", "]"}], "\[DoubleLongRightArrow]", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "x", "}"}], ",", 
         RowBox[{
          RowBox[{"Maybe", "[", 
           RowBox[{"f1", "[", "x", "]"}], "]"}], "\[DoubleLongRightArrow]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Maybe", "[", 
             RowBox[{"f2", "[", "#1", "]"}], "]"}], "&"}], ")"}]}]}], "]"}]}],
      
      HoldForm], 
     RowBox[{"Maybe", "[", 
      RowBox[{"f2", "[", 
       RowBox[{"f1", "[", "a", "]"}], "]"}], "]"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{Automatic}}, "Rows" -> {
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96]}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {
      1 -> GrayLevel[0], 2 -> GrayLevel[0], 3 -> GrayLevel[0.8], 4 -> 
       GrayLevel[0.8], 5 -> GrayLevel[0.8], 5 -> GrayLevel[0]}, 
     "Rows" -> {True, True, {False}, True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.706257754532969*^9, 3.706257795566707*^9, 3.7062578294596863`*^9, {
   3.70625787122326*^9, 3.70625790101724*^9}, 3.706283834166553*^9, 
   3.706283946395614*^9, 3.706286729992001*^9, 3.706287017607335*^9, 
   3.706287114660359*^9, 3.706287475297664*^9, 3.706457025931507*^9, 
   3.706485454598426*^9, 3.706864369600855*^9, 3.706955605394238*^9, 
   3.706972599441313*^9, 3.707161027916882*^9, 3.707179012245375*^9},
 CellID->521581460,ExpressionUUID->"ef261c48-389e-4437-9c63-0251a9f9913f"]
}, {2}]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extensions with polymorphic behavior", "Section",
 CellChangeTimes->{{3.7064761506354*^9, 3.706476162671326*^9}, {
  3.706480178540487*^9, 3.706480183657486*^9}},
 CellID->191351166,ExpressionUUID->"39c20c47-e5a7-4e38-8148-f039ed289c58"],

Cell[TextData[{
 "We can see from formulas (",
 
 CounterBox["DisplayFormulaNumbered", "GenericPipeline"],
 ") and (",
 
 CounterBox["DisplayFormulaNumbered", "MaybePipeline"],
 ") that the monad codes can be easily extended through overloading the \
pipeline functions."
}], "Text",
 CellChangeTimes->{{3.706476190133625*^9, 3.706476297964542*^9}, {
  3.706476455271456*^9, 3.706476462347804*^9}},
 CellID->1256027403,ExpressionUUID->"5fbb4f03-e99b-488f-a732-5d1fc5827bfa"],

Cell[TextData[{
 "For example the extension of the Maybe monad to handle of ",
 StyleBox["Dataset", "Program"],
 " objects is fairly easy and straightforward."
}], "Text",
 CellChangeTimes->{
  3.706476182324554*^9, {3.706476309157852*^9, 3.706476334019459*^9}},
 CellID->288312211,ExpressionUUID->"54e527d9-bbfc-487d-be65-4a63db2ef400"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the formula of the Maybe monad pipeline extended with ",
 StyleBox["Dataset", "Program"],
 " objects:"
}], "Text",
 CellChangeTimes->{
  3.706476182324554*^9, {3.706476309157852*^9, 3.7064763595341187`*^9}},
 CellID->940222645,ExpressionUUID->"3cab742e-5907-4faf-a3bf-b2a0930ca392"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Maybe", "[", "_", "]"}], 
   UnderscriptBox["\[DoubleLongRightArrow]", 
    FormBox[
     RowBox[{"Bind", "[", 
      RowBox[{"m_", ",", "f_"}], "]"}],
     TraditionalForm]], "\[Ellipsis]"}], 
  RowBox[{
   RowBox[{"(", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {
           RowBox[{"None", "\[IndentingNewLine]", 
            RowBox[{
             SubscriptBox["f", 
              RowBox[{"i", ",", "Dataset"}]], "[", "x", "]"}]}], 
           RowBox[{
            RowBox[{"m", "\[Congruent]", "None"}], "\[IndentingNewLine]", 
            RowBox[{"m", " ", 
             StyleBox["is",
              FontSlant->"Italic"], " ", 
             RowBox[{"Maybe", "[", 
              RowBox[{"Dataset", "[", "x_", "]"}], "]"}]}]}]},
          {
           RowBox[{
            SubscriptBox["f", 
             RowBox[{"i", ",", "Just"}]], "[", "x", "]"}], 
           RowBox[{"m", " ", 
            StyleBox["is",
             FontSlant->"Italic"], " ", 
            RowBox[{"Maybe", "[", "x_", "]"}]}]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ")"}], 
   UnderscriptBox["\[DoubleLongRightArrow]", 
    FormBox[
     RowBox[{"Bind", "[", 
      RowBox[{"m_", ",", "f_"}], "]"}],
     TraditionalForm]], "\[Ellipsis]"}]}]], "DisplayFormula",
 CellChangeTimes->{{3.7058415800987587`*^9, 3.7058416110501013`*^9}, {
   3.705841645638204*^9, 3.705841727356278*^9}, {3.705842008672937*^9, 
   3.705842032273075*^9}, {3.7058421067386723`*^9, 3.705842230314228*^9}, {
   3.705842362752913*^9, 3.7058424149282904`*^9}, {3.7058424462189007`*^9, 
   3.705842463420093*^9}, {3.705842556671663*^9, 3.7058426183121357`*^9}, {
   3.705842699113277*^9, 3.705842741907308*^9}, {3.705843584013538*^9, 
   3.705843638720714*^9}, {3.70584460693123*^9, 3.705844616931118*^9}, {
   3.705844658727973*^9, 3.705844702861769*^9}, {3.70584499373731*^9, 
   3.705844995050741*^9}, {3.70587865778189*^9, 3.705878658940511*^9}, {
   3.705950706040655*^9, 3.705950706862111*^9}, {3.706353342213397*^9, 
   3.706353387492433*^9}, {3.706455716053602*^9, 3.7064557349621053`*^9}, {
   3.706455770444713*^9, 3.706455771794658*^9}, {3.706476475029663*^9, 
   3.706476487621726*^9}, {3.706565653041119*^9, 3.706565653749881*^9}, 
   3.706975209107367*^9, {3.707178975638093*^9, 3.7071789776851687`*^9}},
 CellID->1137319889,ExpressionUUID->"8db3f4f8-ad70-4be6-9a8e-87eae4e8c5c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here is an example of a polymorphic function definition for the Maybe monad:\
\>", "Text",
 CellChangeTimes->{{3.706476530512485*^9, 3.706476654238152*^9}},
 CellID->183432476,ExpressionUUID->"e32d0fa8-1588-44ce-b803-b740729b0a1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MaybeFilter", "[", "filterFunc_", "]"}], "[", "xs_", "]"}], ":=", 
   RowBox[{"Maybe", "@", 
    RowBox[{"Select", "[", 
     RowBox[{"xs", ",", 
      RowBox[{
       RowBox[{"filterFunc", "[", "#", "]"}], "&"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7050180902910013`*^9, 3.7050181694115143`*^9}, {
   3.705018411885725*^9, 3.705018413864086*^9}, {3.705077913626053*^9, 
   3.705077918260747*^9}, {3.705424227779588*^9, 3.705424230940424*^9}, {
   3.705425416067037*^9, 3.705425416897717*^9}, {3.705525430512713*^9, 
   3.705525430520277*^9}, {3.705525497049059*^9, 3.705525497056374*^9}, {
   3.706142778197752*^9, 3.706142792191922*^9}, {3.706191732060988*^9, 
   3.7061917330268936`*^9}, 3.7062219158588953`*^9},
 CellID->1310590687,ExpressionUUID->"71ba696d-0dc1-4c74-9a36-ef61a02e09f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MaybeFilter", "[", "critFunc_", "]"}], "[", "xs_Dataset", "]"}], 
   ":=", 
   RowBox[{"Maybe", "@", 
    RowBox[{"xs", "[", 
     RowBox[{"Select", "[", "critFunc", "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.705078521838328*^9, 3.705078597926817*^9}, 
   3.7050788001721377`*^9, {3.7055254317044888`*^9, 3.7055254317131243`*^9}, {
   3.705525496224062*^9, 3.705525496227975*^9}, {3.706284014287431*^9, 
   3.706284023142726*^9}, 3.706288779729583*^9},
 CellID->357909130,ExpressionUUID->"82df4a2e-bb14-43f1-b8e5-e5867dc53dac"]
}, Open  ]],

Cell["\<\
See [AA7] for more detailed examples of polymorphism in monadic programming \
with Mathematica / WL.\
\>", "Text",
 CellChangeTimes->{{3.706476660200397*^9, 3.7064766944007397`*^9}, {
  3.706480436111141*^9, 3.706480447313735*^9}, {3.7069729313777037`*^9, 
  3.7069729346612177`*^9}},
 CellID->277052663,ExpressionUUID->"b4365f4d-317c-4ef9-94e6-c06db43a7686"],

Cell["\<\
A complete discussion can be found in [H3]. (The main message of [H3] is the \
poly-functional and polymorphic properties of monad implementations.)\
\>", "Text",
 CellChangeTimes->{{3.706974109953499*^9, 3.706974336060142*^9}},
 CellID->679560345,ExpressionUUID->"b900c904-c30c-42cb-831c-282184e51f9a"],

Cell[CellGroupData[{

Cell["Polymorphic monads in R\[CloseCurlyQuote]s dplyr", "Subsection",
 CellChangeTimes->{{3.706480194468945*^9, 3.706480205066534*^9}, {
  3.706480406635812*^9, 3.7064804209995003`*^9}},
 CellID->1052683669,ExpressionUUID->"a7ee32da-976a-4d19-a8e0-0cdee988b53e"],

Cell[TextData[{
 "The R package ",
 ButtonBox["dplyr",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://dplyr.tidyverse.org"], None},
  ButtonNote->"http://dplyr.tidyverse.org"],
 ", [",
 ButtonBox["R1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/tidyverse/dplyr"], None},
  ButtonNote->"https://github.com/tidyverse/dplyr"],
 "], has implementations centered around monadic polymorphic behavior. The \
command pipelines based on ",
 ButtonBox["dplyr ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://dplyr.tidyverse.org"], None},
  ButtonNote->"http://dplyr.tidyverse.org"],
 "can work on R data frames, SQL tables, and Spark data frames without \
changes."
}], "Text",
 CellChangeTimes->{{3.706476705584354*^9, 3.706476816964671*^9}, {
  3.70647684871276*^9, 3.7064768553004107`*^9}, {3.70648021209881*^9, 
  3.706480247115773*^9}, {3.706866186603901*^9, 3.706866233125045*^9}, {
  3.707160055778665*^9, 3.707160068523809*^9}},
 CellID->1484140897,ExpressionUUID->"6579cd99-cf7c-4dd5-ba9c-67f1b3116edc"],

Cell[CellGroupData[{

Cell["Here is a diagram of a typical work-flow with dplyr:", "Text",
 CellChangeTimes->{{3.706476705584354*^9, 3.706476816964671*^9}, {
  3.70647684871276*^9, 3.7064768553004107`*^9}, {3.70648021209881*^9, 
  3.706480267380517*^9}, {3.706866239657423*^9, 3.70686623992604*^9}},
 CellID->933495974,ExpressionUUID->"de0fe775-29f6-4590-8ff4-fccbe44d8e78"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Qd8U1X/x3FlI6CgMkRF0UdFwf13Pu5HZYl74cBtC8LTgqi0oFZQXODg
QaYi7t2yt4CCikC62ZsCsvcU5PzP7+be9DZNmqTJTVL6eb9eh4bknptzkpuk
+fZ37238ZNLdz1Y46qijnq+m/7n7iZdu7NLliZR7auv/3Pff59sn/PeZp1v+
t+szCc90ufLJirKY/qdK5aOOqnQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcp
pY62tQo0WpSafbs7OtavAwAAAAAAgPJAFc0BK+lW2WxVaLQoNWubk+2voiIf
BAAAAAAAcJQqzAMrmvlMNd2O0a2GbjVptCg22eaqK/d2aGSDsX59AAAAAAAA
HKmUuz5LcsD6up03duzYh3r37j2oT58+w95///3PPvjgAxrNsdavX7/PZFt7
++23h6alpfXTPzvq7fB03Y5V7vpBskEAAAAAAIAIU+5aQanPqqfbBTNmzHjy
nXfe2f3nn3/+43K57O2QtLlz53p+2i9btzvdQr3/SI+X+Ud8/kW2M9nuXnzx
xd16W7zYzKmPIRcEAAAAAACIPLNW8DjdztGtxZAhQ2ZnZ2cfPHTokJJ28OBB
z0/7Zev2QM27v3fzXl+k7y/U/pFeH/MPbf6TJk3ao7fBb/S2eL1ZM1iDXBAA
AAAAACCybLWCp+h2TU5OTurgwYN37tu3L+jcKlCLdi4V7vKh5nbMP3Lz37p1
qxowYMC27du3v6C3x5vJBQEAAAAAAJxh1grW0a2Zbvd8+umn2VlZWQcjmUNF
ul7O6fq7SC/P/IMf7+TJk/eOGjVqpt4WO+l2o26N2I8YAAAAAAAgsmy1gpK9
XJuTk/PqkCFDitQKlqYeLNr1Z+HmUuE25h+Z+W/ZskVJreqePXv+p7fHx3S7
VLe6nHcEAAAAAAAgsrxqBe/99NNPc6RW0OncK9a5ltM5HvMv3fwmTZq0d8KE
CXP1tthdt9t0a6JbLd0qxPq1AgAAAAAAcKTwrhXMy8tL8z6uYFlt0a6Xi7dW
FudvqxUcoLfHp3S7wjwXcVVqBQEAAAAAACIn2FrBI7GVxdzsSJ+/V61ga/Pc
2NQKAgAAAAAARFC81wr+/fffnp/2y7EeF/N3plErCAAAAAAAEB2BagVDzaUi
nWNF+v6dng/zD2/+1AoCAAAAAAA4r6RawSO1Pi3SuVlZa/E8f2oFAQAAAAAA
osNfraCT9WjetwdqkV5/uDkY83du/tQKAgAAAAAAOC9QrWCwuVCouVa49W2h
rj/S9XHM35n5UysIAAAAAAAQHYFqBaNVvxZqi/T6na63Y/7BjY9aQQAAAAAA
AOf5qxXcu3dv1HOpeMu9mH/0579582ZqBQEAAAAAAKKgpFrBSDenc7R4b8w/
8PypFQQAAAAAAHBeOLWCNFqkG7WCAAAAAAAA0RHNWsFg2oEDBzw/7ZeDvb2s
t/I+/4kTJ1IrCAAAAAAA4LBgagW9cyjvFiiXCrd/uDlapHM65u/c/KkVBAAA
AAAAiA5/tYLRrD8LNXcKtZ4u3PUx/+jNn1pBAAAAAAAA5/mrFdyzZ09YuZLT
OVS81ccx/8jMn1pBAAAAAACA6PBVK5iZmXkwUM4Uar2a0+sLlEtFOqdj/s7M
n1pBAAAAAAAA55VUKxjpXCnS9XTRXl9ZG29ZnP+mTZuoFQQAAAAAAIgCf7WC
kciNQm1O51TRHg/zD/3+qBUEAAAAAABwXji1gjRapBu1ggAAAAAAANFRUq0g
jRbtRq0gAAAAAACA80pTK7h//37PT/vlWOdJ0WrM37n5UysIAAAAAAAQHf5q
BcPJeQLlRuHeHuncKtI5F/Mv/fyoFQQAAAAAAHCer1rBQYMGGbWCscypws2h
vFu4uRjzj878qRUEAAAAAACIjkC1gsHmRKHmUKHmWoFaqLlXoP7MPzbzHz9+
PLWCAAAAAAAADivpuIKRzoUinUuFW58W6duZf/jz37hxI7WCAAAAAAAAUeCr
VtDlch0sTa4Tbov0/YW7PuYf/flTKwgAAAAAAOA8f8cV3L17d6lyo0D1avGe
o4V7/8w/vPlTKwgAAAAAABAdJdUKxiJXinauFevG/IvOn1pBAAAAAAAA54Vb
K+hE27dvn+en/XKs8yvm73yTWkHzHNjUCgIAAAAAADjIX61gWc6hQs3VjrQc
rizPn1pBAAAAAAAA55W2VtDp3ClecqrNmzerDRs2lNv5R3s+HFcQAAAAAAAg
OnzVCs6dO/egd24T6RzIft21116rZChWq1GjhrrwwgvV448/rhYvXhzS+vLy
8tRPP/1U4v0F2+644w5VpUoVY3xOzj8a6wt1/rEaL7WCAAAAAAAAzvNXK7hr
166wc6dAuZG9Se7WpEkTNWrUKKN9++23Ki0tTZ1zzjmqWrVq6scffwz6/t5+
+21Vt27dsHOsiRMnGhml/CwoKHB0/sHkdk4/H5HOHUszf44rCAAAAAAAEB3+
agUjUU8WSpNc8Kqrrip2vezDK7fVr19frV+/Pqj7e+uttzy5YDjj/eCDD1St
WrWiMv9oPN6RHq8T86dWEAAAAAAAwHkl1QpGIyeyL2Plgr6Wnz59ulG3N2TI
EOP/K1euVA8//LCqV6+eqlSpkjrppJPUf//7XyXHQ2zZsqVq0KCBqlixomra
tKnq3bt3iX2sukjv8d5zzz3GMkcffbSxHskad+7caVyeMWOG6tWrl7rgggvU
d999F3BMcvtFF12kMjIyjP2iGzZsaNyekpJiZJ1t27Y1cszatWsbl7du3eqZ
+969e9V7772nzj//fFWzZk3173//Ww0bNizij38sckLv5eUYjhxXEAAAAAAA
wHnh1ApGuvmrF7SyscqVK6uuXbsa/5flzj77bJWenq7y8/Nlv1MjNxw+fLia
MGGCateunTr22GONYwxmZmYW6yPHH7T38XWfkydPVk8//bSqXr26sZ6srCy1
Y8cOo89tt92mmjVrpnr27KkWLlwY1Ppl/JL9SU6pH2P1/vvvG7dLPvjiiy+q
mTNnqs8//9zIMyVztMYh2eKpp56qvvnmG2Muffv2NcY0ePDgsHO8eGvUCgIA
AAAAADgv0rWCTuaC0iQ/k7xPavYSEhKM3M66bc+ePer4449X3bt3N/7vvR9x
MH18Ne/9iK1c8LzzzjPWGcr6JRd87rnnis3p+uuvL3LdFVdcoR599FHjsmSO
Uq84fvz4Isu8+uqrqlGjRsZ9xDrLi1STWkGOKwgAAAAAAOC8YGoFpU7P+mm/
7FQueOWVV/q8P9kXV/bNtTI2ycOkLvC1115TjzzyiDrzzDON/Cw1NdVnLmj1
kXxN+sj+vlYf2ZfX35ikpk9yQWs8Vi74xhtvFFs20JgkF5QaQnufM844w3O7
NdcbbrjB6C+Xv/rqK+P+brnlFtWqVStPu/zyy43rrVrFYFuoz2c0n39qBQEA
AAAAAJwXqVrBSOZGJdULTpkyxcjBZD/bTZs2qUsvvdTI3aRuTvavnTdvnpGx
edcLWmORc9wG6uOr+asXtPYNDmX9weSC0qxcUC7LfOX+ZN9jySi9m3WO5Fjl
epFaP7WCAAAAAAAA0eGvVjBQzuNkvZmvXFCWlfMRS32cZGjbt29XX375pZGV
LViwwLOM5Jl16tTxWS9or7uz19dZfey5oPd4vXNBuX9ZzxdffFFk2UDrt46P
KLmgff6BcsHc3FxjvZMmTfKMSZrsr2ytN5znJ9Tny6nnn1pBAAAAAAAA55VU
Kxjp+rJQcqZrrrlGNWnSRI0cOdJocq4P2V+3cePGxnH6Jk6caCwr18s0JGPb
smWLcT6Qu+++27hOjvEn8+jXr5+qWrWq0WfJkiWePgMHDjT6yPk7vPsEkwta
9YKSC9rnGWhMcvzBknJBe+Zn349YlpH1yGMwbtw49ddffxk/TznlFM++zLIf
tDx2gWoHncj9InF/1AoCAAAAAABER0m1goFaoBwp1GZfh9QLyvCsJnncZZdd
pp555hm1cuVKz7JyrMH77rvPs1zNmjXVm2++qdq3b+/Zx3f+/Pme4/t17NjR
yP0C9fE1Pn/HF7RyQWvswaxfckHJJe3rl1zQfnxDX7mg7Df92GOPGTmnrEsy
wcTERGMsssydd95pXL9s2TLHnz8nnn9qBQEAAAAAAJznr1ZQ6tkikQOFu99q
KLnU2rVrjX2J7bdLbaD9HL3e61+zZo3RR5axrlu8eHGR/4czf/uYrD4yJn+P
SSjzl+xRxuprPDfeeKNn3pHO7Zx8/tevX0+tIAAAAAAAQBQEOgdxuDlSuC1Q
rhTp8UU6R4vF/OVYir169SqT86dWEAAAAAAAwHmh1grGY44U6xaP81+9enWZ
nD+1ggAAAAAAANERznEFabRIN2oFAQAAAAAAnBeJWkFfzToun/y0X47V8tFu
zL9085HzKlMrCAAAAAAA4Dx/tYLeuY538855Ip1TRTonC3d9zD8686dWEAAA
AAAAwHmh1AqGm/tEur8cg+7XX39VkydPVitWrAi4vt27dyuXy6VmzpypduzY
EfX6vEj3D5TTRTt3jMT9cVxBAAAAAACA6CjpuIKh1p+FmlMF6u+vSaaXmJio
qlWrpmQKVrvjjjvUqlWriq1/8+bN6sknn1S1atXyLFu1alXVunVrY3n7eK+5
5hp15ZVXBpVjWZdzcnLUDz/8EPL869Spo959990S59qgQQPjfMKReHwDPX/h
3h6J53/cuHHUCgIAAAAAADjMX62gdy1daXOgcHMnf00ywerVq6thw4apdevW
qdzcXCNfk6zvhhtuKLI+uf2CCy4wMsH+/fur/Px8tWTJEvXFF1+oU089VZ18
8slGf6uPlQuGMv8333xT1a1bN+T5eeeCvuZ/0kknqddff71UuWq4uWy0n39q
BQEAAAAAAKLDV63gnDlzDsYqNwq2nXjiiSohIaHY+jp06GDUAkruZ93WtWtX
Iy/8448/iq1n6dKlRu522223edZTUr2gv/m89dZbRi4Y6vyjXS8YqDn9fAZa
nlpBAAAAAAAA5wWqFYzH3Ejarl271LHHHqvatGlTrP/KlSvVJ598opYvX278
f8OGDUZd4bPPPut3fX379jWyxNmzZxv/t9cLBjO+li1bGtldxYoVVdOmTY3a
PrlexvDQQw+pevXqqUqVKhn5Y6dOnZQct9Fan+SCPXv2VI899phq2LChOuGE
E9Stt96q5s6d61m/9LPngnKMRBnz+eefr2rWrKmuvvpqY86RePxjmRtyDmIA
AAAAAIDo8FcrWNrMKJrtxRdfNLK8Sy+91MjhpkyZorZs2VJsuenTpxvLjRgx
wu+6Fi5caCwzaNCggLmgrzZu3DjVrl07I6uUYwxKpifXyzrOPvts9eOPPxrH
HxwwYIBxP/pxLpILyjESn3jiCfXLL7+oiRMnqubNmxtZZl5enrGMd72gZIun
nHKK+vrrr5V+vlSfPn2M5QcOHBjz5yWcRq0gAAAAAACA80pTKxhvLSMjQ91z
zz1GPZ5MqUqVKkamJtmatYxkcHKbldX5alK/J8t069atVLmgNOv4gtb/t2/f
btQoTpo0yXOd1Dkef/zxKjU1tUgueN111xVZl/Rt1KiRevTRR4vlgvPnz1dH
H320Gjt2bJE+r7zyitFH7iPWz0tpGrWCAAAAAAAA0VHaWkHZh9X6ab8c7O2h
ri/YtmDBAqNeTs4vUqFCBSMzlPVILifTtXI0X/c3b948Yxmr3q6kXNDfeK1c
0H6d5I1SS5iWlqYefvhhdeaZZxqZXkpKSpFcsHfv3sXWJ+dOPu+884rlgl9+
+aUx1ltuucXYf9lql112mXG95IaRfH6i9fzr54daQQAAAAAAAIfFU61gaXIm
2d/28ccfV2vXri22Pqm1k3zu7rvvNv5fUFBgHPdPzj3ivey2bduMn0OHDjUy
td9++y1gLuivedcLynENL7nkEiMLlFo+2edX9gs+44wzitULSl/v+T/99NPq
rLPOMi5buaBc/uyzz4yxvvHGG+q9994r1latWhX15zDc559aQQAAAAAAgOjw
VSs4e/bsg6Wp/wr1du9WmvW5XC4jGxsyZIjP22V/Wjnfh7WO9u3bG+fnyM3N
9Vz37bffqsaNG6vRo0er+vXrq5tvvtmzHnsuGOz8pObPygXlOquuT2oRresk
s5QcUOoFrfXJ/6X2z3t955xzjrrzzjuNy/Z6wezsbGO9EyZMKDIeqYuUvNHa
j9jf4x2oxeL5p1YQAAAAAADAef5qBSWziqf9ggOt76677jLOtSF5nJw3ZNOm
TcYxBOW8vnLu3/Hjx3vWsWbNGuPcvZLB9e/f36jbW7RokVHPJw9J1apV1eLF
i4vkgk2aNDHOVeLdfv75Z5/z+fDDD431yH7Dsi45/4isW841snHjRiPLlDHL
dXLcQas2U8Yk+xZLPaOMSfYDllpBWW7GjBnF6gWlj9RCSqY5ZswYY27y8+ST
T/acB/mll15S//73v4OqHXRqv+Bgl6dWEAAAAAAAIDpKqhUsTf1YuMuXtp5t
8+bNqkuXLkYdoEzLas2aNVM//fRTsX6SGz711FNGDmctK+cruf3229Uxxxyj
HnzwQWMZWVZyQfs6vdfvaz75+fme4wc+99xzxrEF77vvPk8/Gafs+5uYmGj8
f9iwYZ56waSkJHXFFVd4lm3YsKFxDmNr3d65oOyjLPmn5JCyvGSCCQkJysp2
77jjDuP6pUuXRuzxdur5p1YQAAAAAADAecEcVzDc3CfUerJwc6WtW7eqrKws
NXXqVKNuMJicS/Ynlv1xrfuYPXu2uummm4xjEUZ6/rJOqQG03yb1hLK/r/e6
ly1b5snygpm/PG/+5nzjjTf6vA+nn59Q1r9u3TpqBQEAAAAAAKIg1FpBJ1q8
1R9Gu0Vj/nIek549e8Z8roHmM27cOGoFAQAAAAAAHOarVnDgwIGe4woeqblc
uOMvi/NfuXJl3M+fWkEAAAAAAIDo8FUr+Oeffxq1gr72N7WadZv8tF+OdfZV
2hbqfJi/M/PnuIIAAAAAAADOK6lW8EjLvZzOyY60Fov5UysIAAAAAAAQHeEc
VzBQbhRuruTd37uFe3+RHh/zD3/+1AoCAAAAAAA4L9BxBZ3OmaQ27JdfflET
J05Uy5cvj3muFu58Ir18KOtbv369Wrt2bZmeP7WCAAAAAAAA0VHScQVLk1sF
W8+2bds2lZCQoKpVq6ZkGFa7/fbbPflgMOsP1ALlUg0aNFC9evUqdS5nv65W
rVqqb9++QdfzZWVlqe+//z6k+j9fbefOncbjVqVKFXXNNddENPdz6vn3tzy1
ggAAAAAAAM4LdFxBJ3OgZ599VlWvXl198sknqqCgQOXk5Kh33nlHVa1aVd1w
ww0Ry5kCNckFe/bsGZEcTHLB9957L+jle/furerWrRv24ztu3DgjU5WfkqmG
Mv9Y54D2ZagVBAAAAAAAiA5/tYJO5nBWO/HEE41s0Pv6xMREI+NatGiRI7mV
v1wwEjmXr3rBkprkgvI4hJvbyX3KfUfy+XH6+ffVqBUEAAAAAABwnr9aQdm/
14nMx9527Nihjj32WNWmTZtit61YsUJ9/PHHatmyZZ786aqrrlL9+/dX7dq1
Uw0bNlQnnHCCuuWWW9Ts2bM9/WT5tm3bGvV3lSpVMvK+jh07Kqv2UebVtGlT
NX36dCMHPP/889XXX39dLBeUYx1efPHF6pVXXvE7/q1bt6qXXnpJNWnSxNh3
94ILLlA//PBDkVzQ33isx7dFixaqfv36qmLFiuq8887z7Mts9atXr56nX6dO
nZS/5+Wuu+4yljn66KON9UjWKOOTy/a5fvPNNz7XbR+TtAsvvFD9+OOP6rHH
HlMnnXSSsYzMdc2aNeqBBx4wcszatWsblzdu3Gj0kf2Y+/Tpo5o1a6Zq1qyp
rr76auM5DGWbkOMiUisIAAAAAADgvGBqBZ1sL7zwglEXeOmllxqZ2KRJk9Sm
TZuKLSeZU506dYzjEEpWNW3aNDV+/Hh16623Gvshy/7HstyVV16pzj77bCOf
k+P2ffTRR8b6hw0bZty+ZcsW4/+tW7c28sG0tDQ1b968Irlgenq6qlGjhjE2
uV9/Y7/vvvvUcccdJzmW0o+ZsS+05JWSzVm5YKDxjB07Vj366KNGPirHGLQy
Tu9+kodKP7kPa0z2sU2YMEE99dRTxmMh65kzZ47fuQYak7TKlSsb2d/rr79u
zE3mI8vI49S1a1cjNx0+fLiRZ7722mtGH8kWTznlFPXll18a83j33XeN8QwY
MIBaQQAAAAAAgDgSy1pBe5Mc7u677zZq6mRYUnsneZ/kfvblJBe89tpri9Xs
NWrUSD3yyCPG5WeeecbIyKzcTGoSjz/+eJWSklIkFzz33HON5a31WLmgZHyS
ZenHocQxz50711jPkCFDilw/ZswY43rJ0bzHI817PNK89yMOtp93bmrtR2zl
hZs3by4212DXLblg+/bti9yHPEbXXXddkesuv/xy47HPz8838lCZv/32l19+
2Xh+5D4CbQfUCgIAAAAAAERHSbWC9po0X/VpvnKpkpYPdn1Szyb1ZbJPboUK
FdRPP/3kWU5ywTfeeKNYnyeffNLIvqyMS2rwXn31VfXQQw+pM88808irunXr
ZqzHygWt2kBrPJJ5yf7AUv8mueSsWbNKHK9+rIz1WOf3sG6T+5eaRsnorFyy
pPH4ygWlyX7P/vr5ew6sXNAaj6+5WmOU/M573bKfsD0XlDpC+/zPOOOMYvd/
/fXXq4cfflh9/vnnxn3dfPPNqmXLlp522WWXGddLbhjo+adWEAAAAAAAwHmR
rhUsTY4ox72TYwWuXr262PJS1yZZmRw3z7pOckHJ0LzX9fTTT6uzzjpL/fXX
X+qSSy4xci6pU5P9WWX/YsmzvOsF7fvMWrVwjRs3NvZ/lWPryX63Um/nb/zS
X9azcuXKYvM/5phjjIxOzqvrbzxWvibLS9Ypc7XWEcw8QqkXtM812HVbuaD9
PkrKBa2cVPYFl2MMylisn9LkeJElbS9SKyjbH7WCAAAAAAAAzvJXKxhsvZ93
K83ycgw8GcrgwYN9Li/7n0o9m71eUM4z4r1+OVbenXfe6alZs2rTpEnOKf28
c0E5Np53vaDU1cllOZ6e1AzKeT78zccau2Ru9tt+/vlnz37E1njy8vI8/STv
tMbjq15QrvPVz3sevnJYe72gfa6fffaZ5zr7uq3+1pisGkZpkgvKMQ3t85dc
UGoK7c+RlQvKcQplvda+39aYZH9lGbPUKJa0vYwZM4ZaQQAAAAAAAIeVVCsY
qf2Gg11e6gHleH6Sjc2fP984t61kbnIuDjlXruxLa/WR7Er2d+3SpYtasGCB
kW1JraBMSWoP5XwbclnyrPXr1xvrkbxQrpNj6kn+ZdXQSVZmH689F7Rq+GQ5
uX9/87njjjuMPO/bb79VBQUFRiYmdXhHmbmgNR6pu/M3HlnX+++/r6pWrarG
jRunFi5cGHQ/7xzWXi8ozZqrZKDWdd99912xdctzYF+3r1zQu17Qum8rF5TL
sh6puRw9erTxeMjPk08+2aghLGl74biCAAAAAAAA0RGoVjCYFmp9oL+2YcMG
lZycrGrWrGlkU1aT/XjlfLn29UsumJSUpK644grPcnL+X2s5OSbfvffe67lN
1inn001ISPCcy9dXVuZdLyhN1nXVVVcZ65f9nH3NX3K1tm3bGpmerFP2H5Zj
I0o2Jxmd5KyBxiPrys3N9Rzjr0OHDkH185XD+ju+oH2uwY7JygXtc7bXC1r3
YeWCclkeD8lzrcdDMsFnn33WGEdJ2wC1ggAAAAAAAM4LVCtY2pwv3JxQ8jqX
y6WmTJli1A36WkZywbffftu4vGTJErV48WKfy8kx/6SW0L7vqtQXeu/LGqnx
S+4l50uRLNFX/9KMJ5x+wTTvdctYZd3ej0Vpnn95HOQ5DKb/mjVrOK4gAAAA
AABAFESiVjBWzZ4LRqpesay2I2X+1AoCAAAAAAA4z1+toHVMuXhv9lyQVvYb
tYIAAAAAAADREctaQWt/VflpvxxKfznn7apVq4LqH+79xeP8Q+lfFuY/evRo
agUBAAAAAAAc5q9WUI6NFw85U7RzrHjL2crb/KkVBAAAAAAAiI5AtYKBcp9Q
b/duoa4v1Fwq1PsPd/3MP7z7p1YQAAAAAADAeSXVCsaqnizaOVus58P8qRUE
AAAAAACINl+1grNmzTpYUu4U6Rwq3BbpHCzU8TH/yK2fWkEAAAAAAADnBaoV
dCo3Crc+LtI5W7RzM+bve/7UCgIAAAAAAESHv1rB0uZLscqt4q0x/9KNl1pB
AAAAAAAA5/mqFRwwYIDnHMRlIUc6Uhrzp1YQAAAAAAAgWpyqFaTRStOoFQQA
AAAAAHBePNUK+mrbt2/3/LRfjpf1Mf/INmoFAQAAAAAAoiNQraB3juTdvHOl
cHOnUPsHWj7S42H+zs5/1KhR1AoCAAAAAAA4zF+t4ObNm2NWnxbu8qHmVoEa
84/e/KkVBAAAAAAAiA5/tYKh5Eih1os5XX/mdL0d83du/tQKAgAAAAAAOK+k
WsFo1p+Fm0uF2yKdgzH/0t1fQUEBtYIAAAAAAABR4KtW8I8//jgYbm7ldK7l
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
fjPX+1Ox+xmVdZn+OcfYV3ZE1kP+5tFy3JJjdb/+zdMzN3jGnuHaLLVOkjMZ
40nPnKTva3lhLuhaZ9zP2Jy2oYzPX/bSZvSiE5unZw2Tx8PzuKS7vrx9ZF79
YJ6L+6bNqynHcTMe14zMw/rnHv3zT/s+wsY40jPX2LLNlXLd7SNd//K3Xj2G
n91zy3xLPxc3y7j1dYd0341ybEJjmZGZD+plMm33+8l9k5cdF+r4bPdZ+ByO
yG5ujvsf/XOnvv+Muybm1CuyvHH/mb/rOf1tyzwX6mVflKyw6LpD2mbdc8/I
/NZ7LrpfP339EmMu6ZkHdJvdPCP7/kDPUyivA1/3H+rrSAS7bfnaNgOOIcDz
E25/cVtG9uWy774e2z7zORvbKj37bPc6XLkt0zOfDPS4AwAAAPAgFwQQNsmI
9Pfz/bac7JA7U8hc7ztjyTxgZlEFkqV4mieHy8yy16HZMwrJO6zlJCMoHEPO
tdb1LdNd3Yvej2uMkTNYx9ArIRfU85hmju0f8/iB+XLZXI9LsiXJBD1zNJfV
YzvYYkRWh1DG5yt7MTKOdNdfxR5LM7trmZF3ZknPheQ+eg4rfPU37+t9933r
8Zrz8iynr2s9JqeZ3+fZHK9edpn12BZtmeOLPI+F138W6viKbSuyn7Pv+5zk
WXZE5n9tWeAO3Wd6kccyIyul8PkIbZv19VwZGZvkgfbtwDa2FulZL5T0XIXy
OvCd04X2Ogpl2wr2+IKhPD/h9m+Rnn2Nr+fMk4e659GtpMccAAAAQBHkggDC
pr+7Z5vf7fdLndR98+ZVaTM6t4lkaiXlgmZ28T+pw2s5LrOuvvxV4fJZz3nW
b8sTWo/IutqTAZg1au5lXO+b6zvcZvS8RsXuJ921TzI73aezv+xLapNsmUN/
63rJ8QozxZwrjHX72Y84lPH5zF7SXVPN5ZY3H51zSctxS6o2T8+6w6ipc99X
ie/X+jkY7sk1R2R1kH0y7xiRd6pR42jev2SU7nllPunJKjOy7gz4PFvjdWde
70mNmXEu4wzXwcLHOWuYcX/6PvRYtpr3uduq1QtlfD62lU+knk/O86Ifj03W
9VZNmWRb5nP3l7UvqtQqyv2b/X+T64xsN8Rt1u/x9jxjy0qS+7xtdOaFRn2i
e9mDUn/q97kK4XVQUqYW9OsohG0r1FwwmOcnAv1/M6/7W29/96VNU5XkteyV
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
uCcXHJF9V6zGBwAAAJRB5IIAoq40dXwWo9ZMzqdqHSvNvZ7vnBhnacT7+BA/
wnkdRKJ/WSPnd7HVgvaS3L5lRmZ749zT7nrVtcFmwQAAAAAM5IIAoi6cPEPq
wIocWyzDtUrq9ZwYZ2nE+/gQP8gFQ2Ps45/uWlD8+ILG/sMrrXO/AAAAAAga
uSCAqJNjr7XMyEouzT5/cnw42W+wxQhXQusM16XB7rMZLfE+PsSPcF4H9v6t
vpvR9qWX3jou0uOLR1IP2HJk1sPGeWUyXN9J3aAcG1H2i4712AAAAIAyiFwQ
AEopMSllbWJyyotOLS8SXuhxVmKXHreFPrr4UVbmkJiUuiOhc/cOsR6HnX1M
3tuPHA8xITn1J339/sTk1OkxGyQAAACAsopcEABKKSE5dXBC5+53BLt8aXLB
9sndu+g+G0IfXfwoK3OI91zQe3tLTO5xQ0JSipKfnVJS6sZulAAAAADKKHJB
AIgScsH4Fu+5oDe5Xm6P9pgAAAAAHDHIBQGUK4MHD66cmJzaMzEpdZ6x/2VS
Smb75NTWCckpv3dI6v6AtVxCcqqrfXLKnfa+7Tt3fzYhKWW8Z5mk1CntO/d4
Qi6npaVVSOyc0k2vNycxOWWvbiv0envr66tYy3vngh07d/8/fT9z2ndOSfU1
Vr38aH37Oj3eg3p8ue2TUl+Q6439RzunJskY9fW79e3z9f/f6dz5ver+5h1o
fPK4yH10eP7ly/T9vKTXnSXzl/tK7Ny9o14+W9++U9/Xr4nJ3R+2rzspNbW+
Xtdn+vFYrx+fv2Weetm+et2VSppDoPV6K+l+7M+bnmNzvb5Buq3W/99i7Gvb
Na2etYy/bSBQLmg83l16tNJ9h+q2xv18pvaUY/vpMX0h2ae+bqtctp6LYJ+r
YMZk3970st+Z9/+PPK7G45eU+mOxMSelDtT33b+kxxUAAABAuUUuCKBcSUxK
/SohOXVb+87dH0vsmtqsfefUhxKSUgqMfMWWCellDujrnrT3bZ+U0kPytMJ1
FeZ8iZ27D0lITtme0DnlqfZdUy+Qn2beNdTX8h0692ihx7JL3/66ZEe+xtqh
S+qN+vZPZL1yfL6E51POM+fwkfRtn5z63HOdX26a2Dn1fplDQlLqDH/rCjQ+
yQfd+6SmjjCyw84p3Z57vvtpkrvp61d1SE65W+5L32cnfT97rHzKWHdy6kx9
3QIjX5VjCerHTfc5nJDcva2/OQSz3mJzKOF+7M+b+Xx2l3nqx+ZBIxtMShkW
6jbgzb1NpGzQ99fV6Kcff+Mxk+c1qfsbkvNKtiwZqGSroTxXwYzJvv2075xy
rZH56cdMHtfEpG4dZSxyH9Y6n0vpfYKRn+r79DcnAAAAAOUauSCAckNq5tzZ
V/dH7dcnJve4Sa4vbS7Y6YUeZxr5TVJqu6Lr7f6oZGLey0v2Y+Q5yamPBxqz
9z641n3pdSUUWa5L9ytlDt41jvY+JY3PkwsmpeZJ7Zr79rTTjfvSj0/Rfqnd
5XGQx9NdZ5jaX3Iq63ajNjEpZbNeLs3XHIJZr/ccgrkfYeaCw+x99TL/S0hO
yZfLHZ9PaRLsNuDN3CY+8Fq3PKc/F10u5XcZQ7DPVbBj8q43te9H/P3331eU
nFXyVs/9JKc+J4+7vWYVAAAAAGzIBQGUG0a2JPmLbZ9SYezTmpyyt7S5YEJy
yr2+1uvN3O81X+rJjH1Fu6Y2CzTmYpmau95MdXwxraH3snrMm6Rurfj1gcdn
5YLWfr72frLvtF73KKslJqX+YdSmPd/9NLNvBakL1Lel6LEO17cvljysfefu
r/maQ7Dr9THGEu/HfAwO6P8nFnkMbc+bUT8Y5Dbg4/Ettk3oPkvs928sl5Q6
RS/3abDPVbBjKikXdK8npZs8zoW5buqfCZ1T3/I3HwAAAADlHrkggHLDygVl
/0rv2+TYbwFzwc7dX/OVC0qdl6w3OTmtdkn3b+SCSalLZV9P8zh4OZ369ata
Up/imVr3tv4yPr3+v3zlQMGMz8oF7fvkyj6x5nVdpfbMuz3/fNqJHdLSaur7
nW1mdN1lv2B3nVzKEn/1gsGs13t8wdyP+/EpOc+1Hr9gtoHit4eWCwb7XAU7
pkC5oDxukjdLHWL7pB7nyD7W7TunneFvPgAAAADKPXJBAOWGZz/izqkP2q+3
9uu0Z0LG+R6Su3e1L5eYnDLSVy74XHLqJe5aux63F1mvkUel/mntF2vPdYxj
zRnnl0jtU9KYi2VqyT3ONe6rS+oj9uU6dn75fF9zM+4riPF59iO2HYtOjuFn
5FVJ3a8r0q9zyrW636vGOTWsWsTktNOt2+U8IHJMP3+5YDDr9Z5DMPfjXq7k
XNB6/ILZBoqPIbRcMNjnKtgxBcoFzfEMd9dedn9DP2YT/c0FAAAAAI4iFwRQ
zsg5WyWj6tC5exupn5NsSmrQjPNX2HNB4/y4qQsTO3e/XOq9JCM0zp3h77wj
ySmT5fy3cky4TikpdY1j9yWl7rAfQ9A710nsnPq83K/sG+tvvLJPbEJS6j69
3hs6vZh2ijmHb2Q/VKmZk3Phdni++zVyPg45L60cZ87nvAOMz1cuaD4O3xk1
jl1S/2M8XvqnrMfa39g4l4j7fCVP6nUcIxmXXu/37vOBpPaX7M7nHAKst9j4
g7gfWS64/b+D2wa8hZoLhvJcBTOmYHJBOfeJce7npNT1cp/+5gIAAAAAR5EL
AihnJFNqn5z6meRU7n1ZU3ZLNmbUB9oyITNfWW0eB++QnKe3fXL3ZH+5YOfO
ace7s66Uvz19OncfYuVV3subY6kg+aOcd9bfPr4du/ZobB1HT4/1ffd9vVdd
sjA5d4l5X38btYwlHD8w0Pj85YJdu75bo31S94+tx8vIFpNS/mcdw06yLX3f
Xxv5lfvx3Gnkncmp/az9kn3NIdB6vQVzP7JcMLlgsNuAt9LkgsE+V8GMKZhc
0D3OlFn6PtfZtz0AAAAAZZfsUxVEqxBqq1ixonyPMnLB0vSn0Wi0stq+//77
Ksnd0k6XvEn+L/lK+y49nvNeLumltEYvvv12rWDX269fv6qdXuh1Ztqnn1aL
whwqduzaq7Hcp9PjmzZtWiV5LPzdnpLS+wQZi/26Lt1fPzXc9UbqfoLZBuLh
uYrEmBKTU7ITk1Nfd3pONBqNVgZbMN+ZinzHivX3QADAkUEVz+4qmq2Sn1ZZ
tyq6VTVbNbNVN5v1/6o+lpPbj/HRqtv6GK1GjRpyzCNVuXLl74PtU5r7oQ99
6EOfeO8juWCnF9P+G49jow99gu3zfI/ed0tN4pvvDzgj3sZGH/rQhz5x2Ke6
17L25eU7VmVbq+KjWbfJ9zfr+x3ZIgCUI8p/3mfP/Cr7+MyqoVtNW6vh9Rkm
10l9ynG61dHteN1OsDX5f23z9mPNZi0rt9fVrZ6tyf9PtPUz+jRo0OAJmUb1
6tV/CrZPae6HPvShD33ivY/kgl26v94lHsdGH/oE6jNlyoyzE5NTd8o+yJ27
vfZWPI2NPvShD33iuM+J5nLWsid4LW//vmZ9N7O3Y83r5XYrW/TOIK1mzxKt
HNFToxjr77UAgJKpovlfRVWY89Wwfb4cb36eNDDbKbrJvlGyv9PZujXT7ULd
LtXtct2u1u0a3a4z2/W63ajbf3Rrqdttu5S6N3fr/oRpBZtfyli6pedXi/7q
+8n8tf0HZBUM/TBr9fD0pRvfGLtiy6tfz//rnRHL1r/5+qxlY3vOXjGu1+zl
43vOWjHxtT+WT5Kf0tL+XD4h7Y8V479YuO6DHxZveGv4wnXv35/04kiZ3hlX
XLvOWi5Qnx+WbnpbrpPb6EMf+tDnSOnTf3rWsK+yVnwQj2OjD32C6ZPyw9Q5
qaN/+y0ex0Yf+tCHPvHQ5/NF697LWLaxd89Zy8a86Vox8h3XyvS+rlU/fpi9
+puPcgu+GJy39pMheesGDZ23tt+UNduez9+05+ncbbufWLvrwAMbDxy4X38/
u91src3WXLebzO9xV+l2mW4X6Xa+bk11O0+3c3U7S7czze+F8h2xoZlF1rHl
itVt2WGx2sNYfx8GgPLAR/ZXyXxfrm7L/443Mz85ltEZZt7X1Mz7/k+3K8y8
71rdbtDtFt3azFy7teMXC/9698Os1V/pz6FJKTOXzEmetmhhx2kLCxKnLNjy
9OR5u/tkrl40KK9gXu85Kwv6ZRUsbTUi63CLjMzDbUZmHb57VPY/943NOfSA
bm3H5f790Pi8/Y9MyN/31pyVmf/LKpj+5tyVsz7MLJjyxKR52x+blL/tsQl5
Wx+bkK9b3jZ3y3f/f3ze1l6zV0x7d+7yMT3/XDH1jq6vZcrUT7vm1gOeZQL0
eXfuyrHtxlvrpw996EMf+tCHPvShD33oQ5+y0eeDzFUj203M39ZuQv7ORyfm
73p0fN6eh8fn7n1kQt6+hybk7W87Lu+AfN/q9efy5f1zCnLTZi1bMzC3YEHL
EZmHpd0+KvvwvaNz/tHLHHxsYv7+pyfl70mcumBrh6kL1/Rxrc74evFf/T6e
99f/Jq3ZnPrpvDV9f12zo/MBpe6V74Rm7cd/zJqQK3W7xKwdke+Up+t2mm4n
63aSKqx1PNb8LlrNq86QrBAAwuCn/u8Y8323jvn3m5Ns9X5nmfmfvHf/28z8
Wul218+rtnbTnxWf9Jq1bPLzvyzK7Th94dp35qzK/3T+WlfaH0vX98tavfT2
UVmH7x+bc+jRCfn75PNJ/1z5wLjcTH3d1IfG5f342OR5A175Y+kDA3PW3zQ8
f+2/52zcc7Fr0x6pK7xAt4vNGkOrXWz+DUr+9vQvc3yNzctNbHWJF5vjvcT2
d6sm9j6XXnrpf+XhqFu37jhzmYB9zL91NTFvow996EMf+tCHPvShD33oQ5+y
0Od0H31k2UvNn9Jfvn9ZNX7W/Uj/cxft3Xv5qGWbbuuXu/rxnrOWJSdPX9L7
mUkLBj08Ie+7e8fmTnxq6qK+vecs/9+rs5ZPG5RXMPWBsTkH7xiVfbjFiMzD
d43OPvzw+NyDz0yev7vT1AXrO09fnJ/2x/Ipsu9XzsY9Tyn3d8ublbv2UPYp
u9Icn3wHPdsch9QZyj7Ssq+alRXKfslFzpkS6+/aABCvVNHjAEodoNRr19at
vnL/XeZM8zPgIvN9+Drzvbnlun2HHvpiwbq+4ws2v9lx6sKCZ6fM391Wv6+3
HpF1+O7ROf88NC73gPyt6oHxuQvuHpM7KWn64v/2n7fmP5LxWZ8jPj6v5OeF
5nv9Ocpdf3iaKswirZxPbm9mtqbmus42l29kjl3aqWa/s8z1nWtr59g+2061
+jRt2rSDPDR16tQZHWyf0twPfehDH/rQhz70oQ996EMf+sRZH/mudZ6tST/5
niXfC08zl5UmeaL1nU6+k0l2eKHZ5LL1fe5Mc1n78udv3quuGJa/tm3q78tS
npw0/+MHx+VOfGBMbn67Cfmbes9ZkdM3c+Winn8uW9cva/WSpybN29Np6sK1
Kb8tnfN+ZsH3I1dseFWv4y7lrjWU2pQrVNEaQ2ufZPleW0u5a12oKwRQ7qnC
ekBrf+Dqyp0DSi2g/I3lFPO9+nzzvVWOC9F63vb9z/bLLPg8Vb8Pd5y6aIN+
rz7QadqCXd8vXv/7izMXLxuUU/DOPWNzpj6u389TZy19/s/126Wf9fcl+9+k
rM+SRqrw71Jnm7eda/70/qyS+sT65vjqm/8/xbytkdlONa+zlrXqy6VZx9tt
YN7e0Pzsa2j+v4F5+wnm41DntNNOe1oerpo1a2YE26c090Mf+tCHPvShD33o
Qx/60Ic+cdKnnnmbtfwpZrP61rf1O9Fc/iRzmdOU+/ub1Gicaf6U/zey9T/Z
/L9Vm2jPEi8yfzZTtlrGAv298KuFf9342OR5/7tvbM7Pj0zIW/XohPw994zO
/qf1yKzDj07M+/u5aQs3d525OPPXVVtTluz7+1HlPmbVtcp97PqLzPWdYd6/
jF/2hZOcUGpiyAgBHPFU8f2C5e8lx5vvzY3N98kLzPfNG3Vr0z+74JMXZizK
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
9i2V80H4/ZprrmFnn3127vRPI/9N5wUrvcz46e80lxpVf7Q9kpfPuv668z/i
OmI5rrDOCRhTVTN3ycrVN/DrYRzbcXSMuzz5xC/ynFX37t3ZVlttxb755hvX
fNh7770ZPrdkyZKy80l3OZT3fvSjH7FXX301UHy8+mB+dqj+hj4+womq/+LF
i9lJJ53Eunbtyvbbbz+2xx57sC5durCLLrqINTU1BdI/Sn5IbiOs/m7fI17Q
WxReEO32DhYvWN+8JyueSVw2L0htavL6q2WnEvU3lRcs12b90tgPUcNLOj6k
v97vmeQvuHTp0kzaiO746P6e5DnC6Ky+Y7r+OvL/zjvvNJYXTDPdooSnOz7/
+Mc/2F/+8pe1wnPjBfOmfxr5byovmNUyk7W61s4L6tBf5eWzrr/u/Ie/4L33
3lsuL9hGjCu6cPS48r3PFy1oXHUTvz6cox/uxV2eAsQv0pwVfLw7duzIHnro
oVKaq/jggw9Yp06dSryg0zM68jks5LtuvKCT/l59sDBwmucqR//f/va37Jhj
jin5CAKzZ89mO+ywA/vrX/8aSP8o5bSurs7V56mc/CBe0FtsvKDqL1gWL7ho
0aJU6tSo4SUdnzi+p5adStTfRF5Q3V9Qd57pTuPnn3/eWouFuaKBAwda7YQs
72iH99lnn7Xi9+STT7K///3vDP5ev/71r6254MMOO4ztueee1tze5MmT2cyZ
M9mhhx7Kdt11V/bzn/+cPfjgg6UwwAfhPfiu4z18+8c//rHre1I/rBE7/PDD
Wd++fdkuu+xi4dFHH7XuyzDxF/NdP/nJT6z5sL322st6d+LEiWz33XdfCwcf
fHBJL8xZnnfeeVZbv9tuu7EDDjiAvf766575E7T/kFT+59FfUHcaldOHifK8
bhux9wuD6BeGF8y6/jry32Re0JS2JU67+eUvf8m23npr1q1bN6senzVrltVu
zJ07t8QLIiy0CRh7wicF7cy7775r1fPnn3/+WvW8/L5s19CW/O1vf7PaEjmH
kRX908p/U3nBNOuaKDaQtM2oZUeX/l68YNb0153/GnjB9pIXHFNVM6e2cfX1
WeYFw6Yb6uZTTjmFHXTQQY75cvrpp7MzzjjD4gXRn9dlN7rel7xgkPCi9MFU
OM0Lhw2vsbGRbbjhhuzjjz9e6320hfAbDJN+5ZSbKNyG0/eIF/QW1rK/oHW+
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
X9hJPGPtjZp2nElIDBPsNTiO4xbx/zYcpxRozpwkuJxdKPYFXkg7IiTGCPxM
sb/gA2lHhMRIwXxWDcdbHLQOjSSIwC8QHOAI8f8RheKeyz1TixEJSc5E4QQ3
ZMXzAbovamRDjntuRuNl786r5/9fzjGcY7C4T2ON/AjxgiSxiuKHjDkHnD98
PMe1dSu/f+Hit+d+dstHC/ZmLeeny/NeyXeQhKR8eaxQrNcvSzsiJEbJcYWW
80d8z4knISEhKUNQt2wnrrtzdE4xLiRmCfZPQd8G++K2SzkuJCS5E2XMvqEY
l3f7bNWqHYc9PW3V+a/P+vZ7xu7gv53NsY/YW7A9jddzJcQLksQugueT55xj
P4IzOW5+dE7tnOFPT//hL6/POYH/v7XiO7ihqJeIHyQhCS8jOWZwdBX/wxes
d2qxITFN/sQxs0DjdRJvwRmE2BOun9+DJCRC4FfyMMcyjr1TjguJGTKQY3yh
6FOK8cBDHMNTjREJSc6EtZzfq3KCW9308cJDjn6uauWf35j1Lf9/PNb8cRzG
MUj4+tD5APkS4gVJYhelvsE+gtuLM4z+wHHrvdUL5w97evqao56vepH/30es
Ne4sOMS2xA+SkESSPQvFOh5nznZIOS4k2Rf48mC/uDUcx6QcF5JsC3gd1C1v
px0REmME/siPFIq8IJ2BThJEsFcB6pkL044ICUmeRBmbryd8d9qKsTfWBm/1
57fnnIT9BG/6qGax4ARHcYzk2EWM1dvRGuLcCfGCJImIsl8BzjQayHEIx7kc
t1TXN7115uSZq4+ZVPXdGZM//Tv/raeytridqK9oToKEJLx045hQaFlTjLMC
Tiy0nFlCQmIXrO0bJq7XSzMiJJkWnFWDMfvYtCNCYoTsIv5iHNnf60GSihbM
Tf2F4wzx/34cowt0phoJiRax+Qa2FWuBNxI+OV3eXL58mwvfmDVzwidf177x
9bIP+G+3Cz/BERw/Euv7OpLPTi6FeEGSxETURe0E5zdY+A1iTfF1HA888NnC
L0c8O33NiS/MqDv3tdlnivmITUX9s6HwN2wjOEKqj0hIwstrhWKdf37K8SDJ
vmzE8SLHqLQjQkJCYrScUCj6IF+RdkRIMi+/KBT7KPAp7ZRyXEhIciEOvoHt
xNi6s/DX6XbhlDmHn/RC1dxpdd98/OTcxXO+Z+x+/vu/xH6CWDu8s8IJkq9O
PoV4QZJERdRNG4p6aIDYb/BEjosxJ9H4/Zqnb51Ws2T4M9PXnD555sIn5i4a
IvYd3ETMZ3QUcxsbKn6ExBGSkASTYzk+5NhY/I+1OT3Siw5JhuXnHD9wLOTY
JOW4kGRPwBtjf8G+aUeEJPMCXnB1objXLQmJXbDfyTOFln7JTRwHphcdEpJ8
iM03cAPFN3Az4XvT8+zXP/3jCS9U1R7+9LQ1t3z0Zd33jD3Mf79Z+Agex7Gv
8OXpSn6CuRfiBUkSFaWO2lDMU2zDsQfHbzjO4riM487m79c8/t/PFn5ZVd9Y
feFbs+rOfXXe8Ds+/HI3fm9LwSluKtYZd7D5ElJ9RUISTA4ptJztt37KcSHJ
puCM4l7imvaRIVFF+vW8kHZESDIrgzg6ims6n4bETV4pFOuSy/weJCEhcReb
X2Ab1rJvoOQD4WfT7e1FKwYfOenjiSe9ULVy5LPT19w6vaaubuXq51nxvOFL
OE5hxf2+dmXFvf83FWNtGmPnW4gXJElFRN2F+grnD3cTvoM/4xgu+MF/ctzC
cf97C5d/+PaC5bMOe+qjNbwOW3rMpI/HoE7j97oLnnAzUd/Js0pa+RFSHUZC
4ig9OR7kOFf8j3MEcNYElRcSu+zFUV0g3zCSFvlxobi/4Oi0I0KSSdmWYzHH
+xybphwXkmwJfI2v4bhY/I+9Jy8vtHDIJCQkPiLHt2zts0PaCR6wgxhjbyx4
va1OeKHquhOer6r9zdPT1pz3xqzvnpi7+PPvGXuc37uL40qxZngox14c/Vhx
368OImwaG+RfiBckSU2U+qyt4PW2Fr7K4Aexl8HJHH9mxf0Hx9d9u/qFe2d+
vfDsVz9dVeQIZ9Qd9VzVhAdn1e0huMXNRf3XUdSLG4qwJVdIexOSkDgLfMFw
Di3ag9+lHBeS7AnOEIVt3Jp2REhISIwQzCHM5pjE0SbluJBkS/YoFPebbOLo
nHJcSEiMEQ8esCNrOTtkMzEe3mLSl8v7/uejL3/0h9c+m/rEnCWfnvpS9fd3
Vi1YXLNi5ev8/gMct3JcynEOK541vA9rWTPcSYRP/jWVI8QLkqQurOWsYtRt
m4j6qD8rnnv0C45jWPHs4itY8Vyk/y5o/Pb1CZ8sXIj5DnCEJz4/Y+URz0x/
64Wvv9le+ElvKurHTVjL3oSdxLxHOxtXSH6FJJUusP2TOKZwbCj+/2eheJ4x
CQn8OC4q0PnEJC2CPSexv2CftCNCkilBXbGTuN6co0OKcSHJjhzMMZWjq/j/
bxy7pRcdEpLsClt7PbBcE7yBjQvcRIx5txJr6Hqd/+ac04Y9O/25k16oajp9
cvWqj+u++eTxObWff/PdmucEFziGFc8Twf6Bpwr/QPjjYD//HiJMWjNcmUK8
IElmhLXee7Cj8F/uzbGDmMPAGuPTOS7iuJbjTo4Hm1avmfT8F0tmXzl17opP
6hqrT3955ndTFzbcNuzZj+8/6YWZf37/m2/6C19E8I1bijq0s8ITyv0J11e4
wla+hVQ3klSYYF85tA2zCrSumKS1oL8wPu1IkKQuwwrFOuLRtCNCkhnBPrXY
b7KRY/+U40KSLUE9gfriX2lHhIQkK+LA/0nub0PB/XUQ42GJTsLPBb4vW3yx
nG3z+8kzzz3i6Y9f+O2LM5YNfXrammOfq/rh0nfnNT0+d/HnjavXPMufm8Ax
mhXXCWMN3mkcRwq/mz1ZcR+vrcW4uB2js4YrWYgXJMmcsJY9E1BHthf1X0+O
gaIO+yXH0RxncFwo6rqbOMZiLqS2adWLS1d+/8bo6TVLf/di9fe/evKjNcc/
V/Xd0ZOqZh773PR7/vL6nBNEeOAJN2etzzpW0UF8X/oXSu5wLc6Q6lCSnAl8
gLB29ATxP+b6R6QXHZKMCOwCY/7vOX6UclxI0pUDCsX9Ba9NOyIkmRGsF76H
YxHHNulGhSRlga/oGI5bxP/Yb/I8jg1SixEJSYLC1t7/rw1r7ftn9//rIMai
m4hxbxfhH7OlxJx61uOoSR9f9tzcugPOnDyz4dAnp2G93A+XTZ3X9N/PFi2Y
u7T5Xf7cYxz3suIe/Zdz/InjJI5hHAey4lmfWCvcR4S7kYgD8YEkxAuSZFpY
6zXGG4k6DHUZ/J1/zPFzVvSBBtd3JscFrHim8Y0cd3M8tOK7NS9M/rL+s1un
fbn0wjdngR/8wapLX5ix8vjnqz65e/aynU+dPOskW/27FWs5+3gzMY+ysZir
ac9a712oYgMbf6hyiK14RKp/SQyRthzzCsW24oiU40KSvvya41dpR4KEhCRT
ovoHdk8tFiRpi+zXDuBYzfFtocgRkpAYKzaOT2I9Bzj5/MkzQOy+JxIl/z9W
3Cu/x7OfN+509uuf/vHI56ZPPPrZ6bP4ePXbw5+etuaTpd9+fMm7c5vqm1e9
8zIf19atXP0yf/4RjvtYcX3wv1nxPGHsvfVbjsM59mfFc4Wxz1YvhQtsx5S9
tNJOY5JMCPGCJEaIUh9LH0LJEWKdMdYJ7yh4wgNEPXgcx+9Zcc3x1WLexPIn
5Hh8SfOqV1Cnjq3+avHXzas+/Otbc76dvnjFxyOe+fiHE1+obj7u+Rnzhz/z
8Ysnvzjj+gvfmnPiu/XfwVexu+AL5TrkjRVsomBj1rKfYUcbjyh5Qz9O0c4r
2veYWN/hOfVZ+zv2d+kdeifQO2PGjFmfy+nrrLPOyzfffHPbc845p+266657
dY8ePbqlHTd6J713+vTpsyW3ickdO3b8WdbiRu/E/87gwYO33GyzzfbYcsst
t8la3OidZN/h8id003i78J+sxY3eSe6ddu3aHcPtYDavF8A/tFlvvfVO5e3D
gCzEjd6pyHec3lPfdYP9OTlmU3k+O9op95zOAJH+Jl1Zi9/JFlf8b+5PgONe
mH7tUc9VzT7xharm4c9M/wHr3E56ofr7v0+Z8+3t02vqn/u8bs4XxbNCHmZF
X0DstX8Dx1UcF7OiTyDWB2Mt3a859mMtXCD2DMS4Ve6bBZ2ICyRxEuIFSYwT
1tovG3U1+LdNRD2L9cH9WHFPwp9wHMyK+xLCHxA8IdYd4+wl7LkKn8I7/p+9
s4CS4uiicOO2uLtrcLcQggUJToggQRNC0OAEC27LCiwsLoEQJJA/wYIFAkmw
4O4W3C0C4f31qntmZ2dnfWaqZ/Z+59wz3dNd1a97bPvuq1ek+4VLhb479/jF
rz9duXdu/vHrd8ftu/Ss947T/7bZePy/ht8fet1y3RGZYzhg15nj4/Zead96
47Epkw/9Wa3z9jPdJ+y7VP8KUT7j+PwdzB5iNgpdz9DiF6aiEC8xrY1sPUX7
ccy2/29KSSE1JizL9vvb/0aldCC0QZtot0mdOvVATb8HPGi22NDGfW3E/d5Y
431wyGyxoY3r22TIkKErv/6JEyf+xmyxoY1722TOnJn9oBfp0qXrZLbY0Mb1
bX7++Wf+2zVl0qRJF/F3QrJkyQLNEhvaxPk2yY1tFln6sL0Xs8/lsN0/pbHd
4vHx/Zyc69eQZUxZOkPpjeezTTl4pU6PHWd7tt90wv/99ce+a/njkT86bD5x
u4O4j3x//dH/1py9fWn03ovPdl1/dGHxqZu3Zx+7dm/9xTsXTz98vu810TrR
x3ek57Lw2DeulcUe4JdCvYS6CLUhfWxwQ9J9QK6zVYL0e+DsRqwcP3uBfL+M
cWogMuALAo+GQud2JzK+/1IY3+H8Pxkec8z/LylNIfmE75I+HzvnFHamkPHH
w4QmGt+/PKcJ/0/mW6G1r8R39PlHL37/+fqDU5uvPjh37tGLQ3OP/3n30J0n
ZzpuPvGq1bojrxusPfi6hXhst+nYS/Hci06bj99vu/HYhWb/O/wr/y9o2B+X
a3XceuLTmX9cKdd9+8n2Iw5caPTtufuVrxLlJz232+IpZjdit/29sfzPyfL/
pmzGftko5P9PmShkzHNao53l/1T2bbKhDdrEpE3Hjh2rJk+efFOxYsX4b5L0
OXPm7JArV662ZogNbdzX5vr16znSp08f1Ldv3zfMFhvauL5NmTJl2idOnPhI
pkyZfM0WG9q4p03dunUbBgcHF+P9hw4dWtpMsaGN69v07NmzlI+Pz/+Evuc2
w4cPL1WgQIG+d+/ezao6NrRBGwrt41m8PNs+ctjI0p+lfpSlXeaFJ+6UHrP/
QsMvdp7u1G376YGdtp6c+NHGowtbrTu6rukPh3d/tOE416n6dvyByyeWnrpx
bOzeiw/k/eCPR2TOH+eXjPr9wouAQ1cfLjt968a2aw/PnHrwnOsAriX9HvNr
0vNTeBwwj22zzQPkeUK6C30s9B7p9fXfFKpAugfI97d5jfg5XvY32Qu11AtE
XiCIDvAFgVdBoX3ChMb3o6V2A/92sPdWgPQ5TPg7tbxQFdL/19LQ+N7l71+e
04TrM/A45FHGd/QU0nMM+X+hM4Xmku4drhBa84po/eWnf+/ed+vJ0Z8uPzi/
8uzt6+wd+v1x5dHXp27cPnDnyZmAg1ce7b7x8EK7Tcf/e2/9kdfiN+V1ffH7
0UQ88jxS760/+t+HG4++arPx2Mvhv124tenS/c1Dfzt3fcOVez902XLyaZct
J5523nzicactJx533nL8YafNJ+7rOi7V/5ezJ7+/dDd4wK5zx/nR8nznLSfC
CG3QJrZtPt+w/3SyFD4v+KPXa3LAj2aKDW3c16b5pNmXC5Yqc/GL7SdNFxva
oA3aOL9Ns1mrHyVKlvx16pz5Xrb5bvcDM8WGNq5ts+LklTn83PvLtj5IkDjx
6wRJkr7+YPnPD8wQG9qgTUibE/c6CvG24KPX10/cf2lfJ/3+6Wmnn44/55p9
PAas7aZj/7TZePTlRxuOvuL7ryWnblwQ+95fdOrG9dF7Lj7hevSt1h/l+Sv/
67L15KteO07/O3j32b/FtudT/7j8OPjotXsnHzw7dOju04M3nv278+5fL7e+
fCXz/dj3W214fzwmbYHh/QWQPmaN7y0HCfUmPT+li3H/+ZFQS6FGpNcG5HtU
/r9LUcMDzGr4lpzHyPmNnBuZGD4gcALwBYFXQ2Hng0pieIWcW53G+G7NbPy/
KK/hF/IYZM7H5rpZdY3vZs7V5hxDrt3Ac5x0MrzD3sb3+gjDO5wq5G/8z4fr
P8wxNM/4TVho/D6sJD1H/AehdU9fvtr657O/f7nw6MWeo/eeHdh3+8nho3ef
Hbj717879956cuTP53/9+v2F25d+uHD38tpzd66uOX/n6nfnbl9bdfbW9RVn
bv3JHuSqs3eubbv64NyNZ//s2Xrt/tnrT/7au1I8x9tYcj9DaIM2zmiz+eKd
c0NGjb5YsWbtp9xmyeFL1xu07/Jkzq/HbqiODW3c0+ab49evpc+c5V/+uv10
+OjbZooNbVzXZu7uozfHrVx/Z8b2/TfNFhvauL7NzJ1/3Mier8C/Fes0eLHi
9E1TxYY2rmvz+VcTbqVOk+bfsSs33OJtvf2D7wXtOHDTDLGhDdpY2vDjyrM3
uc21leduXWXfbu+txyfWnr99Zd3FO5c2Xr57YeuVB+d3XH905tcbj0+K+6xj
h+4+PXTk7rP9D/9+teXB3y83/fOafhT3Z98b/t4aQysNn+8bIy+E8/yCDa+P
7/8mGveCow3fj8f9cv2qL0ivZdXVuIfk+8nGpM8PzPl/VUnPAWT/r7hQIQrJ
A+R71LTGfSt7gNb6gPAAgZOBLwjiHBR6TmCLX5jY+L5NaXz/ZjS+jzm/kOsG
FjQ8Q/6+5jlOuJ5rJeP73N475PGVXM+Qxyh/Yqib8ZvQy/h9sHiJo43fEP7f
0WTjd4U1xU6+Nn5jkOE5Bhvi5ZnG84HGfv7G75Tt/miDNi5t06ZNm738ESte
vPg1s8WGNq5rs27dum8+/PDDvf/995/pYkMb17QZMGDAL/xZb9So0XGzxYY2
rmtz+fLluStXruT/ac66efPm/OfPn88xS2xo47o2d+/e5WX/li1b7ufPfbNm
zQ6aJTa0QRsHbfyN9UCjreVxuk1fMwxNN47B91l8L8b3ZFyHfpQhvlcbaTyy
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
ChLKZKzP1fSx/okUxAIAAAAA9cAXBAAAAIC74THF/PdHO2M9gasP6C5f0KLd
vx+hatXf8jr/bNbsxdIzq1O3vvJYnC2uD2kZPzx56nTatmOvS4+nyBdcqemf
vZkKjg0AAAAA8wFfEAAAAADuJoVQd00fS5xU6ISmz3ua2FUHdLcv2Oq9D6V/
Vqt2PZce58Tpq5Q/f8Fwt0+dFkTdP+8T7X6/W7uJfHx8qETJ0lKcO/dO/Xdp
3oJvZH3BLl27h+o/cMY86vLJ5+QfOJs+6dZTuccXE3Hcb9eqS8dOXnbL8dzk
C/JnrK3QUGO9iNBqoYJuODYAAAAAzA98QQAAAACopLmm/y1yRNPzBl0yb7G7
fUGuUffBR+3pwKEzLj2OK31B2zmHOY+uRo1aNMV3hsP+ec4V3sdTfcE9+45T
2rTpKGHChPTtyh/cckw3+YLsA74S+lconxuOBwAAAADPAr4gAAAAAFRTXdPr
DzJ9hH4TKuPMA7jbF7QVj71t07aj0/pjD67Ru82oStU3qX6DxlZfcPbcr6ne
O43k+OUKFSvT3PnLQvmCH7XpYK19uGPXAdkHx8Z95M2XnxZ/vSpcX5D1buPm
NH6in6wvyO1tfcE585bKeXvZF6xcuRo1bdaKihUrTjODF1qvgeU4M4MXUcNG
Tah2nXfkPl+NmRRmH86ztI/VVa/PyTPX5eOWbb/TjJnz3fa+cKEvmF/oW6G8
xvoYofaam+f6AQAAAIBHAF8QAAAAAGaBfYuTmv63SSPjuYTO6FiVL7j/4GlK
kSKFHFPMvp0z+tzw0y/Wcbw8rtfiC/oHzpHz6HKdvENHzlO69Blkfp/FF1yw
6Ftq3KSFXO7eo6/09PwCgqWPaH8M9gVTpkxF5cpXopKlysixw737DJR19/hc
mjRtGcoXtB1HXKZMeRkD50pyDt6ps3+GOs73P26loFkL5PLW7Xus8dvu4yhW
V7w+S5evpWzZc9D/1m1z+3vDhb7gAk3/DH3tov4BAAAA4D3AFwQAAACAmfAR
6mwspxa6KPSlFsu5SVTmC7If2G/AUKf1x+NcLXl4XAuvQIFCVl/w0269rPsV
LVqcho8cZ/UFOc+QPbh9f5yigoWKyDHI7MWxn+fIF7TkC/629xiVLl2Ogucs
sdYX/LznF+H6gp91723tp3CRYrT3wMlQx/l1z1HpK3K+YPOW78vahRZf0LKP
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
SpYs6fY4fv75Z+n98fHffPNNvb5gvXqUMGFC6avu2LHD7TGtXbtWxjFu3Dia
OHGiXOb43B3LlClT5LGHDh1qfe7AgQOUJUsWSpo0KT1+/JQuX71Hc+YttY7F
hi8IAAAAABMBXxAAAAAAXo8jX/D+g2ehPJ68efNax++WKFHC6heWLVtW+oW3
bt1yq+fE3mTDhg1lPIULF5Y+XK1atdwag4UtW7ZIn8tyfVgpU6ak3bt3K4mH
XxuOoVKlSvK1iR8/Pq1cudLtcdSuXVvGcerUKbp//z716tVLvk6Wa7R69Wp6
/vwfh+OL4QsCAAAAwATAFwQAAACA1+PIF/z7n5dhfJ5BgwZRnjx5rL5Os2bN
qHt3fYzq0qVL3eI1bdy4kYYMGUKLFi2SfpytX9m6dWu3xOCIDRs2yLHMHEfq
1Klpz549ymLZv39/KI9y0qRJdPLkSVq/fj0tXrzYLTE8e/ZMXg/O4Zw2bRql
TZvWOpa5VatWdOzYMbnf69ev5Xhi+IIAAAAAMCHwBQEAAADg9TjyBV++/M+h
3/P333/T+PHj5RhZzcZ7+vjjj93iN40YMSLUcW312WefuSWG8Pjhhx8oc+bM
cqysSs6cORPqunDOoGWZ/Tl38OOPP4Z5ferWrUtHjx4Ns+/la/fgCwIAAADA
jMAXBAAAAIDX49AXfBXaF/z35Uv6de8R+u7Hn2n1D9tp1rxvqEDBIiF+U7r0
8nlXa7LfbOr6WR/6oE1HatSkJdWoWYdKl61A+QsUog6du7slhoi0bNUG5THM
W7yaMmTMTLly56XCRd+gMmUrUtXqNalOvUbUtMX7bomhfqNm1veGj09KGjh0
NG3ZsY+ePH0OXxAAAAAAngJ8QQAAAAB4PVHxBdf9tJumBC6hilVqUvYceSh+
ggQ2+WjxKU++QjTBbwEFzlkJQVT1zTqUKFFi63skQYKElDNXPqpZqz4d+OMP
+IIAAAAA8AQma/rfMhNUBwIAAAAA4Coi8wX/+fdf6fWsWLOFWr3Xmlq2bEmf
fPoZjR47kebNX0Y/bvyFNm37HYJCaf3mXTR/yQr6auwE6tCxMzVo0IAqVqxI
W7bugC8IAAAAAE9gh6b7gtsUxwEAAAAA4DIi8wWfv/hL+oI7dv9BPfuNopHj
ZyjPR4M8T6MmzKRl366mq9dvwRcEAAAAgCewQ4MvCAAAAAAvJ6q+4K7fDyv3
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
8AUB8C48yRf866+/rI+2y6rjwvk7T/AFAQAAAPPjLl9w2sxvZF6OK30ndxzD
WRo+NpAGj5wa4zaedK4WwRf0DjzNF1x06LD06QbPnedwO48R5pw/iy/I84zY
75OrcGGq0by5XB617BvZ3/LTp63beb4RbmvrC474emkYX9BSX5C9Qc4ZbN27
t/LrA18QAO/CkS8YVd/J7D5VdONz9f44f/iCAAAAgDfgLl/QP/hbqlztbZf6
Tp7klTV7rz3VrN0wxm3ccT2dLfiC3oGn+YKst1q0kDX9OBfw2zNnadODh9Iv
5HmHeT5hv59+svqCPB74owEDaMXZc9L741xBPm2eP5j3Gf/dGrnOc41svP9A
9sP983Ncd5Cf0yLxBVk8Xpn34/HIqq8PfEEAvIeI8gWd7RPFtj97Obt/s/cX
F84fviAAAABgfrxpHHFc8gU9UfAFvQNP9AXZB/ywXz9K5uMjvTiLeCzvhLXf
W/djX/D9vn3pjcqVrftkyJ5dzjts2Wfrs+dUq3Vr63bukz2+5p91l+tD5s2P
ki/INQpLVKsm+3c0xhm+IAAgJkRnHLGzfSp3+06xzW/D+bv+/OELAgAAAObH
Xb6g36zllK9AEbnsG7SUSpQqT4NHTKWSpStS3vyF5LY+A0fTiHHTqUTpCpQr
T34q+kZp6vxZ/1Btvpo0i8qUqyLaFKYcufJSleq1aVLAIoe+oJ9Yr/NOU8qd
t4DorwAVKVaS+g0ZH+MYotLvlOlLqGDh4jRsTACVKltJ9ps1W06q26C5zPHj
ffi4adNloFSp01CefIVo0PDJNGpCkNw/Y6YslDN3PqlPewy2HtO+zYAvJ1iv
J4v7btKijYyH2/I+H7T7xLo9KnGxenwxQuz3hmzP2ytUrkGT/BfBFwRWPNEX
tIjH+C45eoyCduyU+YD229kX7DHVVy5/d+kyrb54Kdy+/vfnDZlPuF18R1qe
W3nufKh1TxV8QQA8l4jGEUdXkfk+sW0f3f5jGw/O3/3nD18QAAAAMD8q6gtO
nf41JU2ajKpUryWX+bn+X06kVKnTUtkKVWly4GL53Jej/SllqjSyLe+XPLkP
lSlfVXpovD1g9gpq/l576YPxsr0vWLpcZZlfZ/G9hoyaRpkyZ5NeYExiiEq/
7FEmSJBQjvGd6LdAbmdfjT3Mth0/t3p4TVu2pbds+uDtzVt/bF1nbzKFT0qa
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
4Qt6ON7iC0Ix9wUzZMiQTQvxBOcLJVL7rgQAWIgoX9DZvpF9f5blixcvWvMF
+bn79+9To0aN5OOQIUOoevXqcvn06dPUtGlTyp8/P5UtW5bKlClD3333nbW/
x48fU5UqVeTynTt36K233qIjR45Qs2bNqFKlSlSsWDEaMGAAPXnyJNx4eawt
78/H4P75OKtXrw73HDlPb8yYMVSuXDm5f8OGDWnRokXW/mzzBfm58M7Bsn3j
xo1y/G/FihVlvB999BHduHHD2t+GDRscbrc99wYNGlC2bNmkeL+zZ89S48aN
6fz587IP9iq/+OILKl++vIy7du3atHPnTmsMDx48oHfffTfM9XfV62+7Hb4g
AAAAYH6i6gv+tv+Ycl8J8mztP3iS7t59AF/Qw4Ev6P2KyBccOnRo8fjx41s8
wSNCnzhQF6FGxlsmm/Ec1rGOdTesJ0+evFu2bNmaOcoXdHZ+WXi+kb0vePfu
XelpdenShX0iOnHihNxWunRpmjRpktXXO378OKVPn55u374t121r7HENw0SJ
EsmxtdevX5fPsX/GfcyZMyfcmGyPwbFYjsE+o6Pz79ixoxyve+/ePavvV7Ro
Udq7d2+YmCLr/9atW5QhQwbpTfK+z549o/79+1ObNm3kekTbbY/DXqX47qWB
AwfKZX6O6wuePHlSLjdv3pw+//xz63U8cOAAFSxY0Bqz5fp37dpVXn9u58rX
H74gAAAA4FlE5gu+EstB81fTsZMX6OiJ83Ti9CU6dfYynYagKIjfKydOX5Tv
nWMnz9ODR0/gC3o48AW9XxH5guLe8oBlbpcI9FRou/GWedt4DutYx7ob1hMm
TEgpUqTYEZNxxM6SfX1B9qU4zoULF1qfY9+tR48eMtfNtm2JEiVo+/btDn1B
7uPgwYOhfKgpU6ZQ586dHfpcUTmGrbhv9s/sc+k45y8oKChMTJH1f+zYMcqY
MaM1P5B17do1mj59ulyOaLu9/8i+oO04Ysu8I/v27ZMeoMUvtJz/ggULrP6j
o+vvLsEXBAAAAMxPZL4gs//QKdq28wDt++MkHT1xjk6dvURnzl2hM+chKHyd
Fu8Rfq/we2bvHyfo8PFzZA98Qc8DvqD3KyJfsHHjxvXix4//SNO9iBNCsx1o
htAXxlumsPEc1rGOdTesJ0mSZE7atGkHOsMX5Pw1y6PtcmTbHfmCvM6Ptv3z
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
bwnrCdIXTDyEfyxxLakrpZ79888/O3RLSjo0bPWa4vVH6A26Q/r1RjAefPbs
2ZPlMX1H9XzPE/65JDmGmBCHk8i+IOU+0RckhBBCnI8d645gjQ5Nlze/UtSq
VUf06JVm6H7i9QWhnLnLxX9/6iKeav2c4rUhf27o8HHKa//+4BNFoT6LMb1Y
U8VqXzBcueHjnXPOuSe8/x8vvio6dekhlq7IFeMmzCh+ftnKXHH7Hf+nzKOo
+YK1a9cRa9bvKH4MX3DYiAni3HMbiDHjpkWMg75gYqHmDGLOufPV3/wfTp06
Nbt9UhJzBl0kfa5gyqTJx/v07btbHssfpVpLNVe9X17LEeICYvEFDx48WHyr
v19WDyjW7XH/ib9/+oKEEEKI87E7XxBatHRd1L6SFb4gcuFQpsDnfxk8UtSp
U1fMmb9CdEvqIx5r1TrkNvqnDRX33veQpb5gpHIPyhip5GUGvv71tz+KDz78
TKzbuEt88VU7ZYzw3x5ppayrjPHEnbr0LPYBb7zp1uLP4THyC2+9rYW46677
olpTmr5g4iEPYyWp2lJXI2dQ6uc+qam7e0yafJzzDLpDpdYg7ty5cN26dcMD
cgW53gghLsFL+YJG+1pukxvipy9ICCGEOB8n+ILQy6/8U/GnnOALYpztM8/+
I+hr8MkwPhf+29n1zhELFq8pfg35dci7w33M2/ffn7ta6gtGKnfbdu2D5gu+
+tpb4qf23UT7jknikZaPi9Xrthe/9tTTz5fyBfXzCeLxZc2aK+usINcQuYlD
fh1DX9BjBOQM3g0/ae3atZkdu3QpmLhzF8cTO1z68cOd+/cvHDZs2Dp5DL+V
eoK5goS4j2C+YCjfKJKvFPh6oCL5UE7MX2P81sZPX5AQQghxPk7xBZGn9s67
HznCF8T6GmeddbYYNXZKqedHjpmijKOdt/A35THW78BY6HkLVimP4ae98tqb
4tJLmynjbyPFbLQvGKnc8OxQFs2vhDAvIMY7L162Xrz/4aeKtNcwFho+4g//
7RTSF9Q/Hjt+umjQ8Hxl/RP6gt5CvQ6tpfpI8JO+mTRp0uKfk5IKZhQd4Xhi
h0o/fjh5wsRjvfv02ff7778nyeP3qtTN6jUccwUJcRHhfMFIMtqHMtpHi9dn
Y/zWx09fkBBCCHE+TvEFMb8gxqI6wReE0tKHiYsvvlTx/ZBDh/GzjZtcrDyv
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
C54QFxIpV9Dufsnr/bLX4sc8KMwVJMSdRPIFI8novsnovjXevpfxWxu/131B
tT2WU8d1Xo+xnrNmzcrdvXv3MdZBxm9W/PCb586du33q1KndZL27VaqR6g0y
b9AkRMl6I1gH5p7Ro0cPGD58eAHrM+Mva/zLly9X1iGOJv4NGzYgpyNP1r1n
hH89olq8biPEXUTKFXRCv+T1ftlL8TNXkBB3E2kccax9UbyKdfux9o1Wb4/x
xyYvjyPWeYLIIbp22bJl78+ePXtnfn4+6yDjNz1+eT0hRo8enS/PAWmqN3i+
Osa1vN1tIxFR2/rpqifzDDwaeDWsz4y/rPGnpaWJlStXRrV/XL/17NmzQL7/
G921G9cfIcRFhMoVdFK/5PV+2UvxM1eQEHcTqy8Yb98XKKO37/TtMf7w8Xs5
X1DnCVZevXp1m6ysrO1Hjx5lHWT8lsYvf9ftxjrX6rxj9Tie2HhE6fVGboc3
A48GXg3rM+MvS/x79uwRnTt3Vvz9aLc/d+7cPwYOHDhT1sGWwj/HZXW2dULc
QahcQfQFTumX3NKPMv74t4dzD3MFCXE3Ro8jjrdviVdWl4fxG7s/r/qComT9
4UoYW5idnT1K/rY77sRj7rTyMH5j91dQUCBmzpy5StbDB4V/zRt6BQYjSq83
8kh6evpUeDSsz4y/rPtLSUlRFMu+MH9AcnLyAVkHX9Kdb5nXQYgLCJYrOHbs
2CIn9UtO6yfdsj+nlSea/TFXkBD3E68vSFFGyuO+YAU1N6v6sGHDtsCfsft4
UN5UZmbmXlkPX5C62itt0ErUtl5Lzcl8KTk5eb9+7UiKilXIFdy5c2fMn8vI
yCiYMGFCL8H1RwhxDfHkClKU0UKuYO/evZkrSIjLsdsX1MZN4VZ/3+4+jvHb
E7+HfcFyunZYEzkcO3bsYB1k/JbHD3Xo0KFI1sO3pW6ROtsLbdAqRMl6I+dJ
3T1z5swk2ecZds5lffZe/OoaImWKf9WqVaJ///6/ybr4pNRlUqexvRPibKzM
FWS/zPgjibmChCQGwXzBcePGRX2N4ra+Ltg1sF6xlp/xGxu/x33BSurvvFoT
J07cJtsi6yDjtzz+efPmib59++bLevgxfCup+l5og1ahnnNPU383PzFgwICl
K1eu/B/rM+Mva/zt2rUTv/76a5nKX1RUJJKSkg7v37//XVkfb1Tzjyrb3U4I
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
v359ceaZZyr5O/J6V/GeHnnkESXX58orr1Q0bNiw4s/jf/nbbrtN+U2M92F8
8iWXXCI++OADZdt4T0FBgTJe+YorrlDGDl5//fXKdb/ev4u0H+QSoXy4xfip
m2++Wck1wv1w2w32/YbLR8rIyBD33HOPKcfD6OPPccQn5gs6pQ2G854D6xjK
/t577yn1FuNr77zzTsVb09f9d955RzRv3lyp53fffbcyz1iLFi1KtcHAsowc
OVLxILV9aPmCULj2Fqytabl8+n4jWJ+i9TfoU+DV4rlNmzYp783NzQ35vSHe
008/XflsuPbptDYI0ReMD915FfOx1Zw1a9ZAWXfzndSezdp+JAW2M30Z4Kdr
7ezgwYNKm0Ue4WOPPaacC9FfwI/ftWtXqW3G0vbx/8W2bdtOGEe8fft2Zf6+
QYMGWfZdxHL80Z+g/FYe/w0bNoiBAwfmyTr8ktTVUrW8cD4mxGxC5Qra1S+X
tV8ya3+M39r4mStICAGx+oJO6vswrq9BgwbK/Hnz5s1TrjcCt4/n2rVrJ/75
z38We3q4tvjxxx8Vbw+PMf/gGWecoXhyeIxrjooVK4rnn39euVbAc5jvA5/r
1auX8hivvfDCC8XjB7HOJLwNjKfU/Ltw+0HZkLNQr1490aZNG9G5c2dlzYJo
thtMwcZ4QvBXMH+TlmdgtyIdf/qCkX1Bu9pgKG8rsI5hWxhHixxdrc3BA7jw
wgsV7w+PH3jgAfHuu+8Wtw28juv+0047rbgNwjsI3FefPn3EE088odwPzBcM
194wn5jW1rp06aK0tWDxB+tTgn0XmZmZ4qqrror4/SKelStXGuoLWnH86QvG
R4AvePr48eMzJ06cWOik9mzn9qNpZ2izmMMUniB8PzwH3xD5//D99PMQou3/
97//Ld4O2newtq+dZ7X5BbV9Yf7hSy+9VFnv1+rvN1qhjCNGjLC0fFu2bIFP
u1PW4de9dD4mxExizRW0o9+PV248L3k1fpw3Oa8gIQRY7QsaLXmtpfzeRz5f
jRo1lJwleX4tNd+XfhwxvLg333xTBHouyFnSfDd4EvhqsEai/j1YW+Gll15S
vCusLRCYb4TrjXLlyinbiWY/uDbBfvr166c8jma7ob4H+A433XSTePjhh4uF
cYx4ftSoUbYfp2hFX9B8X7CsiraOLViwQPEANX9OU2pqqnjmmWfErFmzlM8E
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
tF63MbtzcnL2ZWVlNQ4aNKhF/9uM9a/051qWL1+usHcmdEY/fGK+YPT7jiTb
0rkOdlX/qQt6i2pfY/D72u6vqKiYouNcxHn5LM/0321r1661cga99B3PCnV/
YLOy1xbE/tm9mIdC0pVAuYIDBw5s24OYcYn+++k/cwUJIYkm3nnENP8M+WPI
/dO/0cfjxo1rgoan//1g+vTp20pKStavWbOmbMeOHUWtra1T9G85QVuOttHa
RmjL1jZMW6bYMHltuLZR2sZpe1vbpH379s2urq5eUlZWVjV79uz3cnNz92Rm
ZjYNHz68uaCgoBm5htu3b0+Ij9QFo59HTKN5bdQFvUV1XGPwjk8++eSlIUOG
NLKO02I1jBGxxiDy/L06Jtp33b8ocrS/XFuQpC2JyhWk0WIx5goSQhJNOF3Q
zCvFv86/kx0fg5nX15ts/+vq6tSyZctax48f36THkS0TJ05sgAZYU1Oz+PDh
w5NF+4O+N1Dbq9pe0PYPbU9r+4u2x5S9fjj6+Q+47EF5D8+d+kqOQD9t/9T2
ira3tGWIbjgBmqNul1ZDh0RuIXITsUZ5dXW1Z/eEuuCRumCyy2Cy6wz9999/
6oLeIu0snuljjcFrtf0tNzd366pVq1ie6X/Mx9NtpSorK/PMT+yHs3v37iG6
fN6t7bvaTmQeCklHUilXsLPFJfrvvTFXkBDiB8F0Qb9ibbyxONXbhlj8Ry7e
0qVLD48ePbopOzu7cebMme9v3Lhx6aeffjpJNDpogC+Jhve4aGi/k+dHNyt7
bfurpd34qbL3FITGdonYxfLvZWI/Ufa6V1fKmPVmORbWHf+9aIt/U/aaQ2+K
Dvk2dMIFCxZsGD9+/N7MzMzmwsLCA1jPMB7/qQu264J6fMY6SP+T4r8uf9QF
PUbq96kSjx+aN2/egmnTpkWde8LyTP/Nv7qeYt6vJ/5jH5xRo0bt1mXzOW03
SY5UN445STqioswVZFyi/4n0f/ny5cwVJIQknEC6oG77guYLhjO/Y3W8nw93
/X75j+9gz428vLxmzNmdMWPG+zU1NSXKntuLnL3/ig6I50R9pF24TrQ/6GfY
NxBz1M6VnBSM5c/QdpqMRb/osJ6u/+P90+U7Z0o/6Hw55iWiLUIvvFW0wj8r
O7fwRW2DtI1paGiYs3DhwvVjxoz5AHmEyHGErhXtfcD+KNQFQ+cLsg7S/0T7
z3xB75G29mSJq/cgLwv5WSzP9D9W/5G7dNNNN3niz6JFiw5OnTq1TNlzB34m
/Yfjk11vCPEbFSRX8P3332dcov+++49cQeReMFeQEJJowumC0cayeGNxoo+X
6LYp2uuFdgYNLTs7uxnr+JWXl1e2trYi9mMNwJdEf3vQoQNCo7tINMAzpe/+
RRlvdpfn+92kT3Os2FFhzHzueMf3cawT5djQFnuJ5nih6HXIR7xd2/3anlD2
3GPkMeZs3ry5WI8vtmVkZDTPnj37AOZCR3q/mC8Yfn1B1kH6n+jrZb6g90hb
202euyAf67nRo0fXY18nlmf6H+v1Dhs2zHqeFu/xsrKymjZt2oR1hu9T9v44
PVnvSTqiguQKMi7R/2T4z1xBQohfBNMFY411Xn/e61gdr3nlP/TA4uLig3gG
pO/39q1bty5U9h4hryk7L/BPEv+vFX0M7cBZotH1dGiAxzv0vc948ezIHMel
G3YzZUSeoUInPE/Zc5Lx7OpW0QifFD0zu7m5edq8efOqkf84derUFuQ2hLtf
1AWPnEfMOkj//fafumBikPp9hsTMvrNmzVqM9RdYnul/rP4UFRWp/Pz8uPx/
7733oAvuU/ZaIbfKM8DuXvQnCOlMqBC5goxL9N9v//ft28dcQUKIbwTTBb2K
hfG+73Vs97rtidY/xPjFixcfQpwvKCh4f8+ePbOVvV7fS5J3h3m6yAv8gWiB
vaR/0kO0OZP/54kGGENZMfrVCTJu6CltFMYRmHN8teiZ2M/keW2DDh8+PPHd
d99di71KsJ4W1k8Mdn84jzj6ecSsg/Tfa/85jzgxSB1HzETO9+90LByBvGqW
Z/ofq3/Ix+/fv39c/mMO8fTp0yuUvVfZz6XOf5bjTpJuqAC5gvn5+S2MS/Q/
Gf4jV1CXQeYKEkJ8IZgu6Fcs97otSHRbE8/xKysrP83KymqeMmXK9oaGhlnK
niuM5/MPS7xHfxzzdL/u0gKPSYYOGArVnlNotCyjEfaSdgt7mWD/EuxbgvzH
AdAHdfnaoMfBTdjHOFA+HHTBcePGURcMse8I6yD9T7T/zBdMDBIzu8tzFMTH
f44aNaoBez4kuxx35fKcSteXiOP/8Y9/tPYgifX7w4cPb9q4cePb0l5fLO0u
6zxJK0LlCjIu0X+/jbmChBC/CacLdnZLhViPOTrjx49vHjt27J6tW7cukPzA
f0tO3R3K3gv4Aon3PVXH+cEpH/tdGmE30TNPl7EvtL2bHPrgIH3/p82YMeO9
YcOGNUMrdd4rhy74IHXBwPOIO5ulQh2k/9GZ6ILYg/wq6oLe4Rh3niFxv++c
OXNKdDz8KNm/eVcuz13d/4ULF6qJEyfG9N3a2lqVnZ29V/JRsGbweYpziEka
EixXMNkxp7PGJfofnzFXkBDiN11dF0ym4VkP5udgfb3Fixdjjg7WD3xJnvtA
D/ypxHmMEU9y5gYmu1zEimqfa2xyCE916YMPKHt+cSY00nHjxu3Ny8trm1ss
uuAm+dyl6aoLFhcXb8Y84mSXYVp6WklJyXZdDv+q7BzmM9gP9Q7lmku8d+/e
DOxLrP9N+u9O65y2Y8cO9fLLL6tY2ow5c+YcmDVr1nLVcQ4x81FIWpHKuYK0
9DPmChJCkoFbFywqKpocShfEfunmX+ffsca+aI/XWc6PHMGRI0c2T548efv+
/fun6nv7lrL35LhL4rvRA3tInO/UeqAbRw6hWx/8kbbblD13GhrpuPnz568Z
OnRoU3l5eSt0wdGjR29U9p6I30tXXbCkpGTNzp07O3Ud4Pk77/kXLVpUp8vh
/5NnF6enQx30C9VxX2LMJf5HTk5OXWVlZZctTzx/4s8/ZswYVVpaGtXxMPYc
PHhws25rhivuQ0zSmGC5gp09LvD8nfP8zBUkhCQDhy6IccrJhYWFEyZOnNgc
a+xLdfM61geJ54exht6KFSvKlD1nGPlxmEeLvYUvlGc+J3VFPdBNAH0Q+yl/
U7TRu7U9pe3Nurq6yVlZWbtyc3M/ys7OXqvs+UwXSDvY5TUJuUdHazsOdbGy
snLcypUr9yW7vnTWOpjKlur+b968+ePS0tISZe8vfolo8102RvmNIx6eJrrr
wyUlJYV5eXmdst1N9fKcLv7PmDFDPf7441F9Z82aNWrs2LE7pI9ys+I+xCQN
6Yq5gqkSl+h/9MZcQUJIslDt68Ih3pxUU1PzyhtvvNFSXV0dMJaGi7Xu990W
Ljan+jOdUO/v2rVLYU7s+PHjGzTT9f18XVtfZc8ZvkyeQ5r1A7u0HuhGtc8v
PkE0UbRxmEeHvZf/oO2vBw8efC47O3vR22+/naPs+UxfT5cxikMXhEZ/wuHD
h5+dN2/exrVr137MOkj//fJ/48aNqri4+H39938lbn1L6muXr4N+IrHwJHlO
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
+mAP0QfPFh3hCskhvF80QuSBvalt+OHDhyfu3LlzAeYbl5eXv4+8seXLlzes
Xbu2GeNFaEmpWAf97g92Nv+RCwjNaMOGDR9jDvm7775bv3Tp0m1rNMgJbGlp
eQdxWbTiFxxaIOYKXyWx6xwpR0YPTJt9v1MN1Z4zeLa0LX+bPXt2OXLU06E8
p3t9TpT/c+fOVXl5eR1ew7NOPf78QNnzHe6R55o9mZNC0glH7kPMuYKMS/Tf
q+tlriAhpLPgaD/N3OJe0pfEnKe75Zkz5qMM37Vr15xZs2bVIr8uJyenqby8
/FOMYaOJrV7H9khiN57VYC0erB04ZMiQ5kmTJu2E1ql9wl59b2CcJnog1hC8
TPoSX1ScM0x8xKUPIpf3FGXP/TzXoRHepO1eZa9F+LT0MzDfOFtbri7rc7Zs
2bIU8451X6QOWuHSpUsbKisrP9Bjxk+hN6HO+l0Hk9k/TIUYFMgf/A51dXVW
HuDq1asbMUdcNEDsWVutf6/lu3fvngv9V9lrnUIHfFGeX2COcB/RjPEs51Jl
55oifmO9g+6K+YEpg2pf5wrty+/3798/VLdFjdu2besy5Tnd67Pf/uv+mHrl
lVcU9q83r+m+TXNRUVGJLmNPabtW2evXMleQpA2OfhRibluuoO4XMS7Rf9/9
Z64gIaQz4tAHu6n2tQcvlDHnryWeIVdpUGtra+6aNWuW5+fnbx86dGjT+PHj
m/SY9hP3vKhYYrVXsRt95lWrVqlp06Y1QwvMycnZs2TJktWNjY1TtQ/DROtE
TuTvJIfD6IGniiZzvErz/TFI8nBphN1FIzR5hN9R9lxj5Ibd4tAJn9T2nLLz
fAeJlvT2/v37Z9bV1b1bXV29UteJGsxBhV6IPY+xPl1VVdVHyDNB/UWOIfox
Xvafoo0JiT6eXzEI1tDQYGl/yN9cv379wYqKir3QaTEHXP8OO1auXLl5w4YN
q/W9X7xnz55C0QCRCzhE2Tk//xL992HRAX+p7D2FsRYl9kE6x6EF9lCO3EDG
rtRBfo/uovFD2+83Y8aMVbNnzz7QmcpzutfnVPN/8ODB6uWXX7b+RozJyMjY
//HHHw+UWHGxYq4gSTNU+9rNn9N2fV5enpUryLhE/5Ph/7Jly5grSAjptATQ
BzHmxLrVWH/wVmXn1eFZNNYgzMQ4dt26dcsKCgrez8rKasRcY/13c1lZmdVP
Ddc2eNXWYG5zZWWlKiws/BjrIUKvnDRpUr2Oyav2799fIBrJa8ree/khic9X
ytj6LNEDu1MPJKmGSyNEvcTc0C9L3TxHdELsaYx8whulbN8nWiHmmGIPE+SZ
Ia8wQ3Qn6IUFO3fuXLhly5Zla9eurYJmqOvLNmiGixYtaoB+tWLFit1VVVWN
1dXVrbW1tVZuCuoa9K5E9ff8ihnxHA97Q+/YscO6H4hz2F92zZo1WId1D+Zy
Yw1AfQ8Rf7bp17bo+7sW+X/6O4ug07a2tuLZ8Rh5RvGWxNPnRQNELiDmBf9a
dN+rRAdGrDpf2c9szBxhkxdILTCFUR33xrRyBpuamjKQM2jW5UjV+pGK9Y/+
2//iOQ5yBvFMJy8vr2XBggWYB/GMPDv4urKfcTImkLRA4uxREmu/cODAgT4D
BgzYi1zBZMeRdIpL9N82rFuVkZGBdX3y5NkucwUJIZ0Slz6IZxtmPiP2L75W
tIc/KXsOLsa0WPc+p6GhYQ60uKlTp9aNHDnyw4EDB7ZApysoKGhZsmTJp8jh
g75g9kmIJvYjBxDtO+YE63NgfZ0Dubm5TcgHzMzMbJw8efKuhQsXrtMx+F3o
HsqeW4mcm38oO98R6+3cIGPsb4uu0lN8pB5IUh5TRkUHMrmE0Ie+JHUUGjfm
k35fyjm0QuTDIs/sbtGbHnHohS9IHUGOSaZohjkHDx6cDP0K6xfqMeeSTZs2
lUHbqqys3FRWVrYVuW66rtVL3hvmvjaUl5fv1u/vgz6mP/8JchBR11FnoZ9h
ziS0NMyfRX8JFmmfL5r+WjhDPiTODW0T42pcFwxrkkPjw3VjzrX2o0XHq33I
qYTWh/xK6KXQ+2Rv6K3a31r9ufXV1dUr9PeX6hi1EHO5P/744yn6Po6X+5kl
97e/6LP/kPv/mLYHlJ3veYfEJuRn/0R+P/yOZ0uc+rJLBzxOcY5wp0LGqyZn
EL/133S7aK0zmMjxkN/1y+/zpbv/s2fPVjk5OWrYsGEfHDp0CHHmPumnYS2U
45Jd7gnxC9VxXaST9BhkDPYWZFyi/8nwH7mCeoy6RdnzPu6QcSf3hieEdFoc
7ezxMqZBX/NMiW+XOTRCjG8xL/d5Gf8iL2lMa2vr5C1btizS4+pVhYWFtbqN
3jV27Nh9ug/bCM0Qml5WVlYztEP9etO4ceOaoPXhX/x/xIgRzXjeMmjQIHy2
CVpjXl5ew8yZM7HPwjrNUskHzBEd8C3ROpDT+JBoIZi3hXxHzIvGXOHTlD3n
rm39QI6vSWfEoRM68wl7qPacQqMVni919mKHXoickluk/t4rmiGeaWJ/k2dE
v0Jdgu7/hmhbqNfDlZ3rNh75wi0tLdN0P2h2fX39/O3bty+CPlZTU1O6fv36
VdrWrFq1aiP0sxUrVryHNQ+XLFmCecw7S0pKoOPXw6C1YW09/Rr22kWeXT10
OOiNbistLa3HWnywQO9rs76L4+jjWVoe9EtzLpwX54e2qY9Rhz1bKioqNldV
VVVD48N1QwdFHiXmXzc0NBTt3bu3sLGxcbr2F3uW52obq22EsvP9MGcbe8Fg
/vZ/JAY+q+y1WR+R2NhH2fl/WA/wOof+h3UBvyO/z1nye+F3O8URo6gDdgFU
e87gaaLb3NPc3Nxft2v70NZhPQ4aLZihXwQzf8vrzbqP1PKzn/1M6b7VUmU/
b7he2c8TuK4gSSuUK5+hX79+DVjbTY8nGt11Kdn1mdb1zFmuMIbt379/s+4T
o4/4e+nvMVeQENIlcOgPps3FmPVUh0Z4iYx1b1b2fsYYC/dV9rxdk5M0SLQ7
5NAglwa51RhnY39NrPs3Tdt0h02T1/O1TZTx+BjRJYaKVvGS6BfQJKEDIicQ
852vEf3DaIGYd3eyas8NPIqxmXRFVLtOaLRCZ17hKapdLzxTxo/fEm3KaIaY
63CV6FfQDfGc87eqXTvE/OTHRPfCvNe/ixaGZ6LIh4M+hjn70OihJWKtPOiJ
yJsbKfUfulqOxAHk9k6QeDBJYgJsitT9fIkRJk4EMvN+vnzPHGOSHHeCnCdX
zjtWrmOkxJNhcp0D5brfED9elPj1vPgJf7GOY1+5D7gffeT+3Cn363qJP1fI
/bxU4hDuM+Z9G/0PMamn6pgH2EEDZIzqWki783kpA72VPV54QerGBCnLBTRa
CJuhbaa2WcruJ6FvhPiKuRu/0vY9ZT+/PT7Z5Z0QP1GufEFlt8t4RjdY2e3+
OylQf2ld2zBuRd8T/Us8U8e4FPkzmCfAXEFCSJdDta/hgbmMRiNEPxTPQqDB
YT1C6IS9JR5Cp0OuTB9lzz2GpvCksnOSMNaGrvecsnUFpz0vBm0RfV7kAPaV
OIvxFHIB71D2OByaJPIXL5T420vZuiW1QJL2qI55hWYOMgxrcxvNsKeyNcPT
pf5Au4BuiFw2ox1ifivWMsSzzyuk3v1C6iDycm+TOnmn1E+jJcL+qGwt7RGp
x8hLhLb4V7FnpJ7/XQz1/v/E/uGw5xzmfN18tp/jGH+T4z4t53hSzttXruPP
EpP+oNo1Plz3b8QH+AOt70bx8yrxG/5D87tYtWt+58v9Okvu3+lyP3vK/e0h
95v6X5oivzV+d+jz0Ih7S1nDOhcYv6K9e4FGC2N4XoFnov9WdrlBnjfWikC/
q5ey4wxjCkkrVMe9iNGvwRri0AYRX9Ef+GcK1F1a1zaMXVHW0MdE//dqZfcP
sdYPcwUJIV0a1TGPEG2xUyc0OUnQ6ZBTiHXzod1hTi/G1sipwVgbay1h3H2z
y/AatIbr5LNo43vLMaBPXCDHNvk3RgfsLtcB/YNaICFBcNRfZ44hdAujXXWT
+mTmJpu1DI1+aOr4WepIHRF13miJMOTN/UgMMeBnEgeMvniVIyYYu9b1/+sD
WKjPXyPH/bnjXD+T85trwXVdLNd4oVy30flMft9Z4udXxe/T5T6coto1P9wn
t+7XQftjLCJSDk6QsvM1KXM/lbJ6Q4B2kEZz2y3yL/pHZn9y9IcQj7+gZH2U
ZJd1QvxEtecsoPyjDT5P2eMFjB0YW2l+mBmz9lb2cxr0IY0meHSy6wghhPiJ
ah//OvMJTU4SNDvohVhf6X+VPcbupdp1hbNdZsbjX5PPflW+i2MgB+dEObbJ
BzxGzsvxNyEeoDrqhk790Ghen3WZqetuLfEUqbNOTdHYGWKmjvdy2ZlRmvO7
5pjmHM7zflmu50uqPafPqfEZnc+s8RdI7+ug+THukEhQ7XmDX5C6cYaUV9P2
fZ1GC2EoI9+Qv3spO56hHCFeWXuTJ7uME5IMVEdt0KyzjDpixhjJrru0rmum
/UY/FG06xqpo4y1NUDEuE0KIWys8SrWPp2HHRmjO75jjcCxOSAqhAuuIgewo
hx0TwI72wAId9yiXhb3WZN9T0jVx1YVjomgLaTS3mX4RYxZJe9SR/Yxk109a
+hnzVAghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCPGI/w8KNT9K
    "], {{0, 883}, {1286, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{661.503125, Automatic},
  ImageSizeRaw->{1286, 883},
  PlotRange->{{0, 1286}, {0, 883}}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.706565821547249*^9, 3.706565835557775*^9}},
 CellID->1898793683,ExpressionUUID->"02e76639-b36b-4ac2-9de0-5745299eecae"]
}, Open  ]],

Cell["\<\
The diagram shows how a pipeline made with dplyr can be re-run (or reused) \
for data stored in different data structures.\
\>", "Text",
 CellChangeTimes->{{3.706480307386958*^9, 3.706480397318543*^9}, {
  3.707160113176193*^9, 3.707160159311282*^9}},
 CellID->1418435761,ExpressionUUID->"6e2ed11e-10ad-4bb5-87aa-f64e163e5ac6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monad code generation", "Section",
 CellChangeTimes->{{3.706476424335257*^9, 3.706476427832499*^9}, {
  3.70647693210306*^9, 3.706476940268751*^9}, {3.706476990144088*^9, 
  3.7064769907376966`*^9}},
 CellID->433869780,ExpressionUUID->"27c3b24a-f93e-422a-9fed-aa2a67921a8e"],

Cell[TextData[{
 "We can see monad code definitions like the ones for Maybe as some sort of \
initial templates for monads that can be extended in specific ways depending \
on their applications. Mathematica / WL can easily provide code generation \
for such templates; (see [",
 ButtonBox["WL1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/2352/34008"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/2352/34008"],
 "]). As it was mentioned in the introduction, we do not deal with types for \
monads explicitly, we generate code for monads instead."
}], "Text",
 CellChangeTimes->{{3.706477293495861*^9, 3.706477464342678*^9}, {
  3.707023967129762*^9, 3.70702397679674*^9}, {3.707024017911705*^9, 
  3.707024019768202*^9}, {3.707131861514756*^9, 3.707131900543271*^9}},
 CellID->1342410895,ExpressionUUID->"4dfde840-b3a1-4115-b417-e785cf38aa72"],

Cell["\<\
In this section are given examples with packages that generate monad codes. \
The case study sections have examples of packages that utilize generated \
monad codes.\
\>", "Text",
 CellChangeTimes->{{3.706477293495861*^9, 3.706477531118191*^9}, {
  3.707024028409379*^9, 3.707024035765661*^9}},
 CellID->436716883,ExpressionUUID->"20a73e87-2c23-4af9-9a4b-385193b654eb"],

Cell[CellGroupData[{

Cell["Maybe monads code generation", "Subsection",
 CellChangeTimes->{{3.706475351168365*^9, 3.70647535248461*^9}, {
   3.706475754109071*^9, 3.7064757756846848`*^9}, {3.706476434944063*^9, 
   3.7064764356174297`*^9}, {3.7064769749101667`*^9, 3.706476978430284*^9}, 
   3.706508315538728*^9},
 CellID->1949030782,ExpressionUUID->"36bc6f49-6b75-4ab9-9824-b43c78ba38c1"],

Cell[TextData[{
 "The package [",
 ButtonBox["AA2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MaybeMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MaybeMonadCodeGenerator.m"],
 "] provides a Maybe code generator that takes as an argument a prefix for \
the generated functions. (Monad code generation is discussed further in the \
section \[OpenCurlyDoubleQuote]General work-flow of monad code generation \
utilization\[CloseCurlyDoubleQuote].)"
}], "Text",
 CellChangeTimes->{{3.706475355083909*^9, 3.7064754270484743`*^9}, {
  3.706475716062547*^9, 3.7064757320462008`*^9}, {3.70647577801262*^9, 
  3.706475787778673*^9}, {3.706866306326442*^9, 3.706866307685423*^9}, {
  3.706866344044381*^9, 3.70686634404889*^9}, {3.707160215789121*^9, 
  3.707160360723875*^9}},
 CellID->1792285383,ExpressionUUID->"f6444fe1-6ac1-4b55-b7de-bff57d2824f5"],

Cell[CellGroupData[{

Cell["Here is an example:", "Text",
 CellChangeTimes->{{3.706475355083909*^9, 3.706475429557899*^9}},
 CellID->187315612,ExpressionUUID->"aac22107-cdb4-42c5-bddf-af1810d08351"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/\
master/MonadicProgramming/MaybeMonadCodeGenerator.m\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.706475458224634*^9, 3.70647545889811*^9}},
 CellID->2464382,ExpressionUUID->"c9771917-4223-4e44-ac0f-89c5e2377250"],

Cell[BoxData[
 RowBox[{"GenerateMaybeMonadCode", "[", "\"\<AnotherMaybe\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.706475462260298*^9, 3.706475478472827*^9}},
 CellID->616678981,ExpressionUUID->"b6b31796-da37-4ef4-8724-56d6590efeea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
    "0.61", ",", "0.48", ",", "0.92", ",", "0.90", ",", "0.32", ",", "0.11"}],
     "}"}]}], ";"}]], "Input",
 CellID->767553245,ExpressionUUID->"97a62ee8-9d3a-4056-96c4-859758eb6b00"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "code", "=", 
   "\"\<\nAnotherMaybeUnit[data]\[DoubleLongRightArrow](* lift data into the \
monad *)\n \
(AnotherMaybe@Join[#,RandomInteger[8,3]]&)\[DoubleLongRightArrow](* add more \
values *)\n AnotherMaybeEcho\[DoubleLongRightArrow](* display current value \
*)\n (AnotherMaybe@Map[If[#<0.4,None,#]&,#]&)(* map values that are too small \
to None *)\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"GridOfCodeAndComments", "[", 
  RowBox[{"code", ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<GridFunction\>\"", "\[Rule]", "Automatic"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"ToExpression", "[", "code", "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutoCollapse", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.70614248335867*^9, 3.706142537586325*^9}, {
   3.706142572815717*^9, 3.706142743601222*^9}, {3.70614284296531*^9, 
   3.706142871605355*^9}, {3.706185405566462*^9, 3.7061854369435577`*^9}, {
   3.706185472530124*^9, 3.70618556363418*^9}, 3.70618560148638*^9, {
   3.706185707555558*^9, 3.70618594701559*^9}, {3.706186001112154*^9, 
   3.7061860166362457`*^9}, {3.7061860524356008`*^9, 3.70618605287683*^9}, {
   3.70618639821077*^9, 3.706186401293268*^9}, {3.706186450855618*^9, 
   3.7061864594908953`*^9}, {3.706186558586776*^9, 3.706186603089072*^9}, {
   3.706186636222533*^9, 3.706186652501627*^9}, {3.706190355473512*^9, 
   3.706190414914597*^9}, {3.706190463488427*^9, 3.706190473984031*^9}, 
   3.706190508473968*^9, {3.706190682274896*^9, 3.70619070756916*^9}, {
   3.706190752954215*^9, 3.7061907597910147`*^9}, {3.706190801284828*^9, 
   3.706190885245774*^9}, {3.7061930062664547`*^9, 3.706193006647694*^9}, {
   3.706193157284886*^9, 3.706193163652165*^9}, {3.706193689440126*^9, 
   3.7061937000370493`*^9}, {3.706193763688146*^9, 3.706193767127136*^9}, {
   3.706193910176658*^9, 3.706193922181838*^9}, {3.706194019951973*^9, 
   3.7061940217855797`*^9}, {3.706194065246999*^9, 3.7061940657735987`*^9}, {
   3.706195653009345*^9, 3.7061956567416286`*^9}, {3.706222149781198*^9, 
   3.706222168329625*^9}, {3.706222679223361*^9, 3.706222679883559*^9}, {
   3.706260726596794*^9, 3.706260741409894*^9}, {3.706287037267804*^9, 
   3.706287064525491*^9}, {3.706474971202601*^9, 3.706475048556962*^9}, {
   3.706475509097283*^9, 3.706475525155386*^9}},
 CellID->333121186,ExpressionUUID->"8750fb9d-9f56-4570-a1b9-d66cc5f685a9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"AnotherMaybeUnit[data]\[DoubleLongRightArrow]\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* lift data into the monad *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     StyleBox["\<\" (AnotherMaybe@Join[#,RandomInteger[8,3]]&)\
\[DoubleLongRightArrow]\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* add more values *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     StyleBox["\<\" AnotherMaybeEcho\[DoubleLongRightArrow]\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* display current value *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     StyleBox["\<\" (AnotherMaybe@Map[If[#<0.4,None,#]&,#]&)\"\>", "Input",
      StripOnInput->False], 
     StyleBox["\<\"(* map values that are too small to None *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.706454841808337*^9, 3.706457024004943*^9, {3.706475004983252*^9, 
   3.7064750489040213`*^9}, 3.706475527730666*^9, 3.706485455361536*^9, 
   3.706864274658092*^9, 3.706864330052952*^9, 3.706864385515148*^9, 
   3.706955606105513*^9, 3.706972603061927*^9, 3.707160384600319*^9, 
   3.70716102859376*^9, 3.7071775032919493`*^9, 3.707179012836336*^9},
 CellID->277905373,ExpressionUUID->"3eb8cd14-e2f0-4a57-84a6-9d6df2c17222"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.61`", ",", "0.48`", ",", "0.92`", ",", "0.9`", ",", "0.32`", ",", 
   "0.11`", ",", "6", ",", "0", ",", "8"}], "}"}]], "Echo",
 CellChangeTimes->{3.707179012848206*^9},
 CellID->2126155433,ExpressionUUID->"c7ccaa62-18e9-42b9-bbff-0f3dd3a00671"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"AnotherMaybeBind:\"\>",
   "EchoLabel"], 
  " ", "\<\"Failure when applying: \
Function[AnotherMaybe[Map[Function[If[Less[Slot[1], 0.4], None, Slot[1]]], \
Slot[1]]]]\"\>"}]], "Echo",
 CellChangeTimes->{3.707179013004415*^9},
 CellID->166476351,ExpressionUUID->"10a9d822-3769-44f9-a286-a6c90d0a7919"]
}, Open  ]],

Cell[BoxData["None"], "Output",
 CellChangeTimes->{
  3.706454841808337*^9, 3.706457024004943*^9, {3.706475004983252*^9, 
   3.7064750489040213`*^9}, 3.706475527730666*^9, 3.706485455361536*^9, 
   3.706864274658092*^9, 3.706864330052952*^9, 3.706864385515148*^9, 
   3.706955606105513*^9, 3.706972603061927*^9, 3.707160384600319*^9, 
   3.70716102859376*^9, 3.7071775032919493`*^9, 3.707179013061955*^9},
 CellID->1944322863,ExpressionUUID->"101b1923-4d75-4458-abe3-6e0d38541c82"]
}, {2, 3, 4, 5}]]
}, Open  ]],

Cell[TextData[{
 "We see that we get the same result as above (",
 StyleBox["None", "Program"],
 ") and a message prompting failure."
}], "Text",
 CellChangeTimes->{{3.7064756746955423`*^9, 3.70647569476396*^9}, {
  3.706864240826171*^9, 3.706864241387065*^9}, {3.7068644172368717`*^9, 
  3.706864457804428*^9}},
 CellID->2123185689,ExpressionUUID->"77c8e881-4ed0-4aed-a35f-e138bddaef2e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["State monads code generation", "Subsection",
 CellChangeTimes->{{3.7064751147773542`*^9, 3.706475132864675*^9}, {
   3.706476981263598*^9, 3.706476984672349*^9}, 3.706508317540224*^9},
 CellID->1793596471,ExpressionUUID->"f1c7867a-8116-49d3-ae55-f9ba206bb7df"],

Cell[TextData[{
 "The State monad is also basic and its programming in Mathematica / WL is \
not that difficult. (See [",
 ButtonBox["AA3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 "].)"
}], "Text",
 CellChangeTimes->{{3.706475802550952*^9, 3.7064758805003843`*^9}, {
  3.706866351584675*^9, 3.706866354159531*^9}, {3.706866394413229*^9, 
  3.7068664070268583`*^9}},
 CellID->747935158,ExpressionUUID->"c2377f9e-82ba-4a36-b33d-02e46aa2f5bc"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the special version of the generic pipeline formula (",
 
 CounterBox["DisplayFormulaNumbered", "GenericPipeline"],
 ") for the State monad:"
}], "Text",
 CellChangeTimes->{{3.7061382799118*^9, 3.706138285379029*^9}, {
   3.706138412458793*^9, 3.706138472558254*^9}, 3.706138580774545*^9, {
   3.7061918719306097`*^9, 3.706191873844305*^9}, 3.706192669382153*^9, {
   3.7064760332767763`*^9, 3.70647603409615*^9}},
 CellID->1324414615,ExpressionUUID->"13e286af-34f1-44d2-8106-8b2cc66d9f20"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"State", "[", 
    RowBox[{"data_", ",", "context_"}], "]"}], 
   UnderscriptBox["\[DoubleLongRightArrow]", 
    FormBox[
     RowBox[{"Bind", "[", 
      RowBox[{"m_", ",", "f_"}], "]"}],
     StandardForm]], "\[Ellipsis]"}], 
  RowBox[{
   RowBox[{"(", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {
           RowBox[{
            RowBox[{
             SubscriptBox["f", "i"], "[", "None", "]"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             SubscriptBox["f", "i"], "[", 
             RowBox[{"x_", ",", "c_Association"}], "]"}]}], 
           RowBox[{
            RowBox[{"m", "\[Congruent]", "None"}], "\[IndentingNewLine]", 
            RowBox[{"m", " ", 
             StyleBox["is",
              FontSlant->"Italic"], " ", 
             RowBox[{"State", "[", 
              RowBox[{"x_", ",", "c_Association"}], "]"}]}]}]},
          {"None", 
           StyleBox["otherwise", "Text"]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ")"}], 
   UnderscriptBox["\[DoubleLongRightArrow]", 
    FormBox[
     RowBox[{"Bind", "[", 
      RowBox[{"m_", ",", "f_"}], "]"}],
     TraditionalForm]], "\[Ellipsis]"}]}]], "DisplayFormula",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQzaHZ/DVkzmvHvFmJP0G0ds6WvyB6Ydpr9lAgvblD
VBtEc+zl0APRJovDzUG0Bt8pNxB9VzwiHERP2HI3FkTbMB5PBNHphW+TQbRT
3dR8EM3y17McRH+fn9wIoldz7G0D0c/zGD6AaHGB699A9OIzd/PDgPSO07KF
ILrPO7wMRH9s7GwG0d+ZwiaA6Atya2aB6JblGaExQPoaZ1MCiBYtVEsH0Tfu
dxWA6HMPjpWCaNnIHVUgOqeCtRlEx0w6AaavR09sB9FBNr1dIPpeksF2EH3I
LHYniFZmXWfXBaSfPD8NpucVTdraNfe1Y8eKW9tB9Er2qwdB9Lm2dUdBdOn8
S03bgPSqxg9gWr7Js75uHtBe9kNgGgAhGsHw
  "],
 CellID->768433150,ExpressionUUID->"a905f612-0261-463f-8ce5-4b4b110c37dd"]
}, Open  ]],

Cell[TextData[{
 "Note that since the State monad pipeline caries both a value and a state, \
it is a good idea to have functions that manipulate them separately.\nFor \
example, we can have functions for context modification and context \
retrieval. (These are done in [",
 ButtonBox["AA3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 "].)"
}], "Text",
 CellChangeTimes->{{3.706477634135846*^9, 3.706477848975387*^9}, 
   3.7068664331533003`*^9, {3.7071604894679537`*^9, 3.70716049907458*^9}},
 CellID->89298992,ExpressionUUID->"4c3e88b3-29e3-4a2b-879c-dd02c8443065"],

Cell[CellGroupData[{

Cell[TextData[{
 "This loads the package [",
 ButtonBox["AA3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 "]:"
}], "Text",
 CellChangeTimes->{{3.707160624737932*^9, 3.707160638326868*^9}},
 CellID->1904572938,ExpressionUUID->"9f349b73-0f3e-44bf-8b7d-92cfafae87a4"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/\
master/MonadicProgramming/StateMonadCodeGenerator.m\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.706475458224634*^9, 3.70647545889811*^9}, {
  3.706475984709391*^9, 3.70647598612646*^9}},
 CellID->1913610431,ExpressionUUID->"7bd82bd3-d278-47d8-a72e-804236dad90b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["This generates the State monad for the prefix \
\[OpenCurlyDoubleQuote]StMon\[CloseCurlyDoubleQuote]:", "Text",
 CellChangeTimes->{{3.706476095094414*^9, 3.706476121834092*^9}, {
  3.706477858506233*^9, 3.7064778687311177`*^9}, {3.707160527851985*^9, 
  3.707160611236395*^9}, {3.707160644934005*^9, 3.707160655123658*^9}},
 CellID->1335416345,ExpressionUUID->"4f720325-680e-4a8e-926f-bdbe70162479"],

Cell[BoxData[
 RowBox[{"GenerateStateMonadCode", "[", "\"\<StMon\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.706475462260298*^9, 3.706475478472827*^9}, {
  3.706475991222879*^9, 3.706475997545049*^9}},
 CellID->990915618,ExpressionUUID->"cd42dff2-2d60-47dc-8e18-f330223e480d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The following StMon pipeline code starts with a random matrix and then \
replaces numbers in the current pipeline value according to a threshold \
parameter kept in the context. Several times are invoked functions for \
context deposit and retrieval.\
\>", "Text",
 CellChangeTimes->{{3.706477946908629*^9, 3.706477983121334*^9}, {
  3.706478193543618*^9, 3.70647822072162*^9}, {3.706478301576868*^9, 
  3.7064783135902777`*^9}, {3.706478365846974*^9, 3.706478407584257*^9}, {
  3.707160668294924*^9, 3.707160729148252*^9}},
 CellID->583109241,ExpressionUUID->"ecf2fb58-ff58-4763-9553-ca6d54bf0561"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "34", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"StMonUnit", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<mark\>\"", "\[Rule]", "\"\<TooSmall\>\""}], ",", 
       RowBox[{"\"\<threshold\>\"", "\[Rule]", "0.5"}]}], "|>"}]}], "]"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoValue", 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoContext", 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"StMonAddToContext", "[", "\"\<data\>\"", "]"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoContext", 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"StMon", "[", 
      RowBox[{
       RowBox[{"#1", "/.", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"x_", "/;", 
           RowBox[{"x", "<", 
            RowBox[{"#2", "[", "\"\<threshold\>\"", "]"}]}]}], 
          "\[RuleDelayed]", 
          RowBox[{"#2", "[", "\"\<mark\>\"", "]"}]}], ")"}]}], ",", "#2"}], 
      "]"}], "&"}], ")"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   "StMonEchoValue", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"StMonRetrieveFromContext", "[", "\"\<data\>\"", "]"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoValue", 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"StMonRetrieveFromContext", "[", "\"\<mark\>\"", "]"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoValue"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.705875984235949*^9, 3.705875984237075*^9}, {
   3.70587605018476*^9, 3.705876086453213*^9}, {3.705876131894959*^9, 
   3.7058761734970207`*^9}, {3.7058762797484207`*^9, 
   3.7058762824568653`*^9}, {3.7058765434912233`*^9, 3.705876623741515*^9}, 
   3.705876746819799*^9, {3.706099009083161*^9, 3.706099010418552*^9}, {
   3.7064778818851438`*^9, 3.706477905311522*^9}, {3.70647796439073*^9, 
   3.706478025152171*^9}, {3.706478234628294*^9, 3.706478292148343*^9}},
 CellID->1349132226,ExpressionUUID->"bd155032-8d84-4bb9-aed9-917f1d62e51a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.7898839276876111`", ",", "0.8314677704241646`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{"0.42129767141617314`", ",", "0.5053697191343878`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.037595683454223705`", ",", "0.2894420772610877`"}], "}"}]}], 
   "}"}]}]], "Echo",
 CellChangeTimes->{3.707179013452369*^9},
 CellID->1732977356,ExpressionUUID->"a1b084d2-218e-4557-a179-562275621091"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"context:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"mark\"\>", "\[Rule]", "\<\"TooSmall\"\>"}], ",", 
    RowBox[{"\<\"threshold\"\>", "\[Rule]", "0.5`"}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707179013479885*^9},
 CellID->1977201678,ExpressionUUID->"d0636158-b69c-413b-b7c7-df89f6db909d"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"context:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"mark\"\>", "\[Rule]", "\<\"TooSmall\"\>"}], ",", 
    RowBox[{"\<\"threshold\"\>", "\[Rule]", "0.5`"}], ",", 
    RowBox[{"\<\"data\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.7898839276876111`", ",", "0.8314677704241646`"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"0.42129767141617314`", ",", "0.5053697191343878`"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"0.037595683454223705`", ",", "0.2894420772610877`"}], 
        "}"}]}], "}"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707179013538357*^9},
 CellID->666648468,ExpressionUUID->"41cfee8a-1ebb-492d-a494-5364b7f478c5"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.7898839276876111`", ",", "0.8314677704241646`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{"\<\"TooSmall\"\>", ",", "0.5053697191343878`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\<\"TooSmall\"\>", ",", "\<\"TooSmall\"\>"}], "}"}]}], 
   "}"}]}]], "Echo",
 CellChangeTimes->{3.707179013612647*^9},
 CellID->938615277,ExpressionUUID->"81ffbdf2-e19e-496d-9919-2c7338456ddf"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.7898839276876111`", ",", "0.8314677704241646`"}], "}"}], ",", 
    
    RowBox[{"{", 
     RowBox[{"0.42129767141617314`", ",", "0.5053697191343878`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.037595683454223705`", ",", "0.2894420772610877`"}], "}"}]}], 
   "}"}]}]], "Echo",
 CellChangeTimes->{3.707179013696999*^9},
 CellID->2039573324,ExpressionUUID->"eb430b05-8188-436e-be0a-7aad2fb6af57"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", "\<\"TooSmall\"\>"}]], "Echo",
 CellChangeTimes->{3.707179013773627*^9},
 CellID->974883054,ExpressionUUID->"b0c3d852-f528-4a59-9cd6-712b47ebdefc"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Flow control in monads", "Section",
 CellChangeTimes->{{3.706866689906654*^9, 3.706866695249578*^9}, {
  3.706866768410336*^9, 3.706866791876061*^9}},
 CellID->1706745615,ExpressionUUID->"f73cb4ef-216e-41dc-b13a-2fcc82e70820"],

Cell["\<\
We can implement dedicated functions for governing the pipeline flow in a \
monad. \
\>", "Text",
 CellChangeTimes->{{3.706867256109542*^9, 3.706867291321498*^9}, {
  3.706867652271927*^9, 3.706867658958033*^9}},
 CellID->1334478326,ExpressionUUID->"d8582bf6-91c3-4e88-b966-329d1c0c3976"],

Cell[TextData[{
 "Let us look at a breakdown of these kind of functions using the State monad \
",
 StyleBox["StMon", "Program"],
 " generated above."
}], "Text",
 CellChangeTimes->{{3.706867256109542*^9, 3.706867291321498*^9}, {
  3.706867652271927*^9, 3.706867667457176*^9}, {3.70686778835017*^9, 
  3.7068678028626547`*^9}, {3.706868789405105*^9, 3.70686880783317*^9}},
 CellID->258015814,ExpressionUUID->"b3b9a261-3cb6-46f9-891f-09582de545f8"],

Cell[CellGroupData[{

Cell["Optional acceptance of a function result ", "Subsection",
 CellChangeTimes->{{3.706867456058125*^9, 3.706867515940781*^9}, {
  3.70686770157847*^9, 3.706867782162774*^9}},
 CellID->702302605,ExpressionUUID->"a322ba5e-7633-40b5-b761-66eddfc0e9cd"],

Cell[TextData[{
 "A basic and simple pipeline control function is for optional acceptance of \
result -- if failure is obtained applying ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "ea312af0-d92f-4ab5-ac84-a5d37c46a513"],
 " then we ignore its result (and keep the current pipeline value.)"
}], "Text",
 CellChangeTimes->{{3.706867456058125*^9, 3.706867515940781*^9}, {
  3.70686770157847*^9, 3.7068677711044*^9}, {3.706867825770074*^9, 
  3.706867906870001*^9}, {3.707160800014826*^9, 3.7071608318276987`*^9}},
 CellID->1029758323,ExpressionUUID->"1e097925-835d-45e9-bdcc-8f13ad683243"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is an example with ",
 StyleBox["StMonOption", "Program"],
 " :"
}], "Text",
 CellChangeTimes->{{3.706867914722123*^9, 3.706867934691397*^9}},
 CellID->577423488,ExpressionUUID->"e075cb8e-c930-4a60-a1e1-5118c6c42187"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "34", "]"}], "\n", 
 RowBox[{
  RowBox[{"StMonUnit", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "5"}], "]"}], "]"}], 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoValue", 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  RowBox[{"StMonOption", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "<", "0.3"}], ",", "None"}], "]"}], "&"}], "/@", "#"}], 
    "&"}], "]"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  "StMonEchoValue"}]}], "Input",
 CellChangeTimes->{{3.7068679598931103`*^9, 3.706868027059947*^9}, {
   3.706868104201819*^9, 3.706868104736822*^9}, 3.70686838808504*^9},
 CellID->277962023,ExpressionUUID->"32c54ffb-3655-423a-ad8a-940d659675f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
   "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
    "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
    "0.037595683454223705`"}], "}"}]}]], "Echo",
 CellChangeTimes->{3.707179013880092*^9},
 CellID->930788336,ExpressionUUID->"688c4582-089a-4cef-b03a-d7cb7c2b2608"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
   "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
    "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
    "0.037595683454223705`"}], "}"}]}]], "Echo",
 CellChangeTimes->{3.707179013900002*^9},
 CellID->1488678404,ExpressionUUID->"1f5999ad-6139-489d-9619-faf70fad73c1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"StMon", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
     "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
     "0.037595683454223705`"}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.706868027730745*^9, 3.706868105491095*^9, 
  3.7068683893394938`*^9, 3.706868614133523*^9, 3.706949144422054*^9, 
  3.7069556075549297`*^9, 3.706972604839168*^9, 3.707161030037624*^9, 
  3.707179013987409*^9},
 CellID->2033448478,ExpressionUUID->"44c1cfb7-0059-4dad-9eab-6f7d6db489a6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Without ",
 StyleBox["StMonOption", "Program"],
 " we get failure:"
}], "Text",
 CellChangeTimes->{{3.706868063528461*^9, 3.706868089211382*^9}, {
  3.707160862970641*^9, 3.707160863384766*^9}},
 CellID->1113811388,ExpressionUUID->"12d392de-0ef1-47f3-a187-81c391c65b4f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "34", "]"}], "\n", 
 RowBox[{
  RowBox[{"StMonUnit", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "5"}], "]"}], "]"}], 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoValue", 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "<", "0.3"}], ",", "None"}], "]"}], "&"}], "/@", "#"}], 
    "&"}], ")"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  "StMonEchoValue"}]}], "Input",
 CellChangeTimes->{{3.7068679598931103`*^9, 3.70686804039863*^9}, {
   3.706868111333098*^9, 3.70686811176325*^9}, 3.706868384259961*^9},
 CellID->213047217,ExpressionUUID->"3eddd6bc-7dd8-4960-a1cb-f04187c81f3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
   "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
    "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
    "0.037595683454223705`"}], "}"}]}]], "Echo",
 CellChangeTimes->{3.707179014064087*^9},
 CellID->829336570,ExpressionUUID->"9068f8f4-e238-455f-9392-924e83c3ad71"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"StMonBind:\"\>",
   "EchoLabel"], 
  " ", "\<\"Failure when applying: Function[Map[Function[If[Less[Slot[1], \
0.3], None]], Slot[1]]]\"\>"}]], "Echo",
 CellChangeTimes->{3.707179014096024*^9},
 CellID->1490862960,ExpressionUUID->"7c48de21-ae57-4ac7-849a-76fe3a485fbf"]
}, Open  ]],

Cell[BoxData["None"], "Output",
 CellChangeTimes->{3.706868041462881*^9, 3.706868112211081*^9, 
  3.706868384795759*^9, 3.706868615552454*^9, 3.706949144623135*^9, 
  3.706955607831236*^9, 3.7069726050903883`*^9, 3.707161030305455*^9, 
  3.707179014179528*^9},
 CellID->94575524,ExpressionUUID->"6b5e2a5a-5133-4b9f-a0e1-e8a4362937f1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conditional execution of functions", "Subsection",
 CellChangeTimes->{{3.706867519270681*^9, 3.706867553122335*^9}, {
  3.70686780980398*^9, 3.706867810321898*^9}, {3.706870469268634*^9, 
  3.706870469546528*^9}},
 CellID->392933088,ExpressionUUID->"ec93a429-8a52-4db5-8d95-ef6bb3f78423"],

Cell["\<\
It is natural to want to have the ability to chose a pipeline function \
application based on a condition. \
\>", "Text",
 CellChangeTimes->{{3.706868128192376*^9, 3.70686813550535*^9}, {
  3.706868667017801*^9, 3.706868670716945*^9}, {3.706868702038741*^9, 
  3.706868770131625*^9}},
 CellID->514195491,ExpressionUUID->"d6884380-37bc-4c7b-b0ef-609a791d2579"],

Cell[CellGroupData[{

Cell[TextData[{
 "This can be done with the functions ",
 StyleBox["StMonIfElse", "Program"],
 " and",
 " ",
 StyleBox["StMonWhen", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.706868128192376*^9, 3.70686813550535*^9}, {
  3.706868667017801*^9, 3.706868670716945*^9}, {3.706868702038741*^9, 
  3.706868781473795*^9}, {3.706868819622889*^9, 3.706868838230917*^9}},
 CellID->609421709,ExpressionUUID->"706dae08-9860-4dcd-b25b-feff9bbbca25"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "34", "]"}], "\n", 
 RowBox[{
  RowBox[{"StMonUnit", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "5"}], "]"}], "]"}], 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "StMonEchoValue", 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  RowBox[{"StMonIfElse", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Or", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "<", "0.4"}], "&"}], "/@", "#"}], ")"}]}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Echo", "[", 
        RowBox[{
        "\"\<A too small value is present.\>\"", ",", "\"\<warning:\>\""}], 
        "]"}], ";", 
       RowBox[{"StMon", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#1", ",", "Red"}], "]"}], ",", "#2"}], "]"}]}], ")"}], 
     "&"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StMon", "[", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"#1", ",", "Blue"}], "]"}], ",", "#2"}], "]"}], "&"}]}], 
   "]"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  "StMonEchoValue"}]}], "Input",
 CellChangeTimes->{{3.706868155723005*^9, 3.706868234875735*^9}, {
   3.706868270509857*^9, 3.706868336657104*^9}, 3.706868394250068*^9, {
   3.70686842806815*^9, 3.706868474965866*^9}, {3.706868505737221*^9, 
   3.706868510954574*^9}, {3.706868546441196*^9, 3.706868547157699*^9}, {
   3.706868620387735*^9, 3.706868628012061*^9}, {3.706868674803544*^9, 
   3.70686869339919*^9}, {3.706949101717063*^9, 3.706949123338687*^9}, {
   3.706949163416411*^9, 3.706949165932683*^9}, {3.706949223299657*^9, 
   3.7069492724497213`*^9}, {3.706949318498399*^9, 3.706949326047845*^9}},
 CellID->1201150620,ExpressionUUID->"6c0bab9e-4dc1-48d9-a9fb-05af1f86ffaa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
   "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
    "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
    "0.037595683454223705`"}], "}"}]}]], "Echo",
 CellChangeTimes->{3.707179014256751*^9},
 CellID->1392188540,ExpressionUUID->"2c23928f-d185-44dc-8700-fb87d57cbebd"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"warning:\"\>",
   "EchoLabel"], " ", "\<\"A too small value is present.\"\>"}]], "Echo",
 CellChangeTimes->{3.707179014287747*^9},
 CellID->1678457715,ExpressionUUID->"dad555c9-0db5-4e54-8bc9-8787d4e06d91"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  StyleBox[
   RowBox[{"{", 
    RowBox[{
    "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
     "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
     "0.037595683454223705`"}], "}"}],
   StripOnInput->False,
   LineColor->RGBColor[1, 0, 0],
   FrontFaceColor->RGBColor[1, 0, 0],
   BackFaceColor->RGBColor[1, 0, 0],
   GraphicsColor->RGBColor[1, 0, 0],
   FontColor->RGBColor[1, 0, 0]]}]], "Echo",
 CellChangeTimes->{3.707179014372621*^9},
 CellID->493629013,ExpressionUUID->"1c9c13d0-31c7-4bdf-a9f7-2acf13d70ba0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"StMon", "[", 
  RowBox[{
   StyleBox[
    RowBox[{"{", 
     RowBox[{
     "0.7898839276876111`", ",", "0.8314677704241646`", ",", 
      "0.42129767141617314`", ",", "0.5053697191343878`", ",", 
      "0.037595683454223705`"}], "}"}],
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", 
   RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.706868236394745*^9, {3.706868276648099*^9, 3.7068683088106747`*^9}, 
   3.7068683403735523`*^9, 3.706868395012952*^9, {3.706868429266986*^9, 
   3.706868476403257*^9}, 3.706868511565857*^9, 3.706868547882449*^9, {
   3.706868617027892*^9, 3.706868628367324*^9}, 3.7068686950527773`*^9, {
   3.706949125770441*^9, 3.706949166662328*^9}, {3.7069492382482777`*^9, 
   3.706949244269025*^9}, 3.7069493267184677`*^9, 3.706955608072491*^9, 
   3.706972605287947*^9, 3.707161031324844*^9, 3.707179014454792*^9},
 CellID->693493130,ExpressionUUID->"e201dd2a-a861-434b-850b-4c26de87eb52"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " Using flow control functions like ",
 StyleBox["StMonIfElse", "Program"],
 " and ",
 StyleBox["StMonWhen", "Program"],
 " with appropriate messages is a better way of handling computations that \
might fail. The silent failures handling of the basic Maybe monad is \
convenient only in a small number of use cases. "
}], "Text",
 CellChangeTimes->{{3.7069515357885427`*^9, 3.7069517477423067`*^9}, {
  3.706951787897243*^9, 3.706951822331372*^9}, {3.707160903345495*^9, 
  3.707160904852855*^9}},
 CellID->1145283641,ExpressionUUID->"2e69ff5b-28f0-498e-859b-0fdfdce41317"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Iterative functions", "Subsection",
 CellChangeTimes->{{3.706867556148347*^9, 3.706867617844224*^9}, {
   3.70686781265022*^9, 3.70686781293204*^9}, 3.706868118530718*^9, {
   3.7068688505089407`*^9, 3.706868865176289*^9}},
 CellID->886226226,ExpressionUUID->"ad06c44e-6225-4a3d-92e5-fca04cff0d52"],

Cell[TextData[{
 "The last group of pipeline flow control functions we consider comprises \
iterative functions that provide the functionalities of ",
 StyleBox["Nest", "Program"],
 ", ",
 StyleBox["NestWhile", "Program"],
 ", ",
 StyleBox["FoldList", "Program"],
 ", etc."
}], "Text",
 CellChangeTimes->{{3.706868852760681*^9, 3.706868907915145*^9}, {
  3.706870596112831*^9, 3.706870603570613*^9}, {3.707160937064788*^9, 
  3.707160941280357*^9}},
 CellID->2005088437,ExpressionUUID->"c7953a9f-49bd-4a0a-9e49-d77998db6d4e"],

Cell[TextData[{
 "In [",
 ButtonBox["AA3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 "] these functionalities are provided through the function ",
 StyleBox["StMonIterate", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.706868852760681*^9, 3.706868954893918*^9}, {
  3.70686898931931*^9, 3.706868996744586*^9}, {3.706870193940726*^9, 
  3.706870216869185*^9}},
 CellID->1207971935,ExpressionUUID->"351f69fb-d1c4-4e95-ba4c-a2d9d8dafade"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is a basic example using ",
 StyleBox["Nest", "Program"],
 " that corresponds to ",
 StyleBox["Nest[#+1&,1,3]", "Program"],
 ":"
}], "Text",
 CellChangeTimes->{{3.7068692102254553`*^9, 3.706869211196183*^9}, {
  3.7068692683023987`*^9, 3.706869339639211*^9}},
 CellID->73912807,ExpressionUUID->"8daa4244-6789-429d-aba2-aa51fdc802be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StMonUnit", "[", "1", "]"}], "\[DoubleLongRightArrow]", 
  RowBox[{"StMonIterate", "[", 
   RowBox[{"Nest", ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"StMon", "[", 
       RowBox[{
        RowBox[{"#1", "+", "1"}], ",", "#2"}], "]"}], ")"}], "&"}], ",", 
    "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7068690400680447`*^9, 3.706869068587813*^9}, {
  3.706869220736866*^9, 3.706869250560803*^9}},
 CellID->1006999283,ExpressionUUID->"cdda341d-7c9d-4eb9-96d9-fdd621fcf292"],

Cell[BoxData[
 RowBox[{"StMon", "[", 
  RowBox[{"4", ",", 
   RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.706869041412229*^9, 3.706869073860177*^9}, {
   3.706869226970476*^9, 3.706869251273217*^9}, 3.706949144970592*^9, 
   3.7069556081476398`*^9, 3.706972605352984*^9, 3.707160971935214*^9, 
   3.7071610321966753`*^9, 3.7071790145628858`*^9},
 CellID->318327374,ExpressionUUID->"e7b81ee4-b0fc-4d73-9c14-2c1973723e75"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Consider this command that uses the full signature of ",
 StyleBox["NestWhileList", "Program"],
 ": "
}], "Text",
 CellChangeTimes->{{3.70686950932376*^9, 3.706869542692246*^9}},
 CellID->746410141,ExpressionUUID->"4e5b54b4-33fe-4992-8767-330138f98d60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhileList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "+", "1"}], "&"}], ",", "1", ",", 
   RowBox[{
    RowBox[{"#", "<", "10"}], "&"}], ",", "1", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.70686941782761*^9, 3.706869444883701*^9}},
 CellID->1463257660,ExpressionUUID->"d4851193-4d97-4714-93b9-af996e45279c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{{3.706869439688623*^9, 3.706869445285756*^9}, 
   3.706949145036487*^9, 3.706955608256185*^9, 3.706972605470346*^9, 
   3.7071609734968443`*^9, 3.707161032254567*^9, 3.70717901462064*^9},
 CellID->2136249823,ExpressionUUID->"b44af661-cc50-49a8-b187-fa0e89db080d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the corresponding ",
 StyleBox["StMon", "Program"],
 " iteration code:"
}], "Text",
 CellChangeTimes->{{3.7068693869128227`*^9, 3.706869405136497*^9}, {
  3.706869469172183*^9, 3.706869473638246*^9}, {3.7068695314323*^9, 
  3.706869566002491*^9}},
 CellID->171680968,ExpressionUUID->"1554ef20-b8a0-4c62-ac77-02749e8bcba8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StMonUnit", "[", "1", "]"}], "\[DoubleLongRightArrow]", 
  RowBox[{"StMonIterate", "[", 
   RowBox[{"NestWhileList", ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"StMon", "[", 
       RowBox[{
        RowBox[{"#1", "+", "1"}], ",", "#2"}], "]"}], ")"}], "&"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       "<", "10"}], ")"}], "&"}], ",", "1", ",", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7068690400680447`*^9, 3.706869071096914*^9}, {
  3.7068696258767767`*^9, 3.706869626314824*^9}},
 CellID->1371491255,ExpressionUUID->"f5ca4c8e-805b-4017-9692-dba12ec9d1bd"],

Cell[BoxData[
 RowBox[{"StMon", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.706869071671887*^9, 3.706949145148952*^9, 
  3.706955608331217*^9, 3.706972605637352*^9, 3.70716097495733*^9, 
  3.707161032331052*^9, 3.707179014695179*^9},
 CellID->1711539534,ExpressionUUID->"a4101487-716b-4e30-8c14-2aeb3ec4f0c6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is another results accumulation example with ",
 StyleBox["FixedPointList", "Program"],
 " :"
}], "Text",
 CellChangeTimes->{{3.706869156643862*^9, 3.706869180436904*^9}, {
   3.706869583948181*^9, 3.706869659716151*^9}, 3.706870238694106*^9},
 CellID->301496373,ExpressionUUID->"5b370f35-45d4-481f-bed7-7fc7feffa9f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StMonUnit", "[", "1.", "]"}], "\[DoubleLongRightArrow]", 
  "\[IndentingNewLine]", 
  RowBox[{"StMonIterate", "[", 
   RowBox[{"FixedPointList", ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"StMon", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#1", "+", 
           RowBox[{"2", "/", "#1"}]}], ")"}], "/", "2"}], ",", "#2"}], "]"}], 
      ")"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.706869128252735*^9, 3.706869146911191*^9}, {
  3.706869622930678*^9, 3.706869623479968*^9}},
 CellID->1335617738,ExpressionUUID->"f0c412d0-0049-4d2f-a3f1-27fff25975a1"],

Cell[BoxData[
 RowBox[{"StMon", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.`", ",", "1.5`", ",", "1.4166666666666665`", ",", 
     "1.4142156862745097`", ",", "1.4142135623746899`", ",", 
     "1.414213562373095`", ",", "1.414213562373095`"}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.706869091917164*^9, {3.706869129363516*^9, 3.706869147273015*^9}, 
   3.706869663734219*^9, 3.706949145370194*^9, 3.706955608453846*^9, 
   3.706972605854061*^9, 3.707160976643651*^9, 3.707161032428033*^9, 
   3.707179014772379*^9},
 CellID->80760475,ExpressionUUID->"fd4a0795-2a1a-4b36-821f-0a3066b6b480"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "When the functions ",
 StyleBox["NestList", "Program"],
 ", ",
 StyleBox["NestWhileList", "Program"],
 ", ",
 StyleBox["FixedPointList", "Program"],
 " are used with ",
 StyleBox["StMonIterate", "Program"],
 " their results can be stored in the context. Here is an example:"
}], "Text",
 CellChangeTimes->{{3.706869690349835*^9, 3.706869696526669*^9}, {
   3.706869771442778*^9, 3.706869780317876*^9}, {3.706869836647875*^9, 
   3.706869893877274*^9}, {3.7068699272457933`*^9, 3.706869960174506*^9}, {
   3.706870005256338*^9, 3.706870012049026*^9}, 3.706870246277999*^9},
 CellID->131638421,ExpressionUUID->"66538ef9-063f-4b8b-a297-312bdcb2e577"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StMonUnit", "[", "1.", "]"}], "\[DoubleLongRightArrow]", 
  "\[IndentingNewLine]", 
  RowBox[{"StMonIterate", "[", 
   RowBox[{"FixedPointList", ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"StMon", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#1", "+", 
           RowBox[{"2", "/", "#1"}]}], ")"}], "/", "2"}], ",", "#2"}], "]"}], 
      ")"}], "&"}], ",", "\"\<fpData\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.706869962368025*^9, 3.7068699695350637`*^9}},
 CellID->538785337,ExpressionUUID->"b0290a9e-db17-4df7-b38b-41ddaef39278"],

Cell[BoxData[
 RowBox[{"StMon", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.`", ",", "1.5`", ",", "1.4166666666666665`", ",", 
     "1.4142156862745097`", ",", "1.4142135623746899`", ",", 
     "1.414213562373095`", ",", "1.414213562373095`"}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"fpData\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"StMon", "[", 
        RowBox[{"1.`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}], ",", 
       
       RowBox[{"StMon", "[", 
        RowBox[{"1.5`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}], ",", 
       
       RowBox[{"StMon", "[", 
        RowBox[{"1.4166666666666665`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}], ",", 
       
       RowBox[{"StMon", "[", 
        RowBox[{"1.4142156862745097`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}], ",", 
       
       RowBox[{"StMon", "[", 
        RowBox[{"1.4142135623746899`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}], ",", 
       
       RowBox[{"StMon", "[", 
        RowBox[{"1.414213562373095`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}], ",", 
       
       RowBox[{"StMon", "[", 
        RowBox[{"1.414213562373095`", ",", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], "]"}]}], 
      "}"}]}], "\[RightAssociation]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.706869970224394*^9, 3.7069491454371243`*^9, 
  3.706955608570934*^9, 3.7069726061530313`*^9, 3.707160978878031*^9, 
  3.707161032495749*^9, 3.707179014854458*^9},
 CellID->1574103207,ExpressionUUID->"63aa2490-492b-4fa8-9f69-d45773268aab"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "More elaborate tests can be found in [",
 ButtonBox["AA8",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
UnitTests/GeneratedStateMonadTests.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
UnitTests/GeneratedStateMonadTests.m"],
 "]."
}], "Text",
 CellChangeTimes->{{3.706949366546436*^9, 3.706949375737923*^9}, {
  3.706949813958815*^9, 3.706949841558614*^9}},
 CellID->1101552656,ExpressionUUID->"076aeb7a-9697-4650-9f2f-f7d1a4ef828b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Partial pipelines", "Subsection",
 CellChangeTimes->{{3.707077748823029*^9, 3.7070777600382032`*^9}},
 CellID->338968605,ExpressionUUID->"5561bc74-5ca5-4e7c-b268-0343ffcd7f49"],

Cell[CellGroupData[{

Cell["\<\
Because of the associativity law we can design pipeline flows based on \
functions made of \[OpenCurlyDoubleQuote]sub-pipelines.\[OpenCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.707077763559255*^9, 3.70707783053192*^9}, {
  3.707078844877358*^9, 3.707078863055912*^9}},
 CellID->1918712391,ExpressionUUID->"a98ecdd8-54b4-40fb-8cdd-aa5dead9a88a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fEcho", "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "ct"}], "}"}], ",", 
     RowBox[{
      RowBox[{"StMonUnit", "[", 
       RowBox[{"x", ",", "ct"}], "]"}], "\[DoubleLongRightArrow]", 
      "StMonEchoValue", "\[DoubleLongRightArrow]", "StMonEchoContext"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707077832926343*^9, 3.707077928252489*^9}, {
   3.707077969779971*^9, 3.707077972109675*^9}, {3.7070780032941008`*^9, 
   3.707078010964882*^9}, {3.707078054200086*^9, 3.707078096815868*^9}, {
   3.707078132175398*^9, 3.70707813423405*^9}, 3.707078453521157*^9},
 CellID->1184712185,ExpressionUUID->"bc41d062-6208-4ea8-abfc-8c5014ded116"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fDIter", "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "ct"}], "}"}], ",", 
     RowBox[{
      RowBox[{"StMonUnit", "[", 
       RowBox[{
        RowBox[{"y", "^", "x"}], ",", "ct"}], "]"}], 
      "\[DoubleLongRightArrow]", 
      RowBox[{"StMonIterate", "[", 
       RowBox[{"FixedPointList", ",", 
        RowBox[{
         RowBox[{"StMonUnit", "@", 
          RowBox[{"D", "[", 
           RowBox[{"#", ",", "y"}], "]"}]}], "&"}], ",", "20"}], "]"}]}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707077832926343*^9, 3.707077928252489*^9}, {
  3.707077969779971*^9, 3.707077972109675*^9}, {3.7070780032941008`*^9, 
  3.707078010964882*^9}, {3.707078054200086*^9, 3.707078096815868*^9}, {
  3.707078132175398*^9, 3.7070781806296787`*^9}, {3.707078352752968*^9, 
  3.707078452677617*^9}, {3.707078483305768*^9, 3.7070784838681493`*^9}, {
  3.707078550571028*^9, 3.707078602760501*^9}, {3.7070786597793093`*^9, 
  3.707078745098033*^9}, {3.7070788932205057`*^9, 3.707078893398491*^9}},
 CellID->2136801958,ExpressionUUID->"5cca9225-4c4c-49c2-ac36-a4d08d57c019"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"StMonUnit", "[", "7", "]"}], "\[DoubleLongRightArrow]", "fEcho", 
   "\[DoubleLongRightArrow]", "fDIter", "\[DoubleLongRightArrow]", "fEcho"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7070779402683277`*^9, 3.70707794331193*^9}, 
   3.7070780396195297`*^9, {3.7070781114295883`*^9, 3.707078116559709*^9}, {
   3.707078367504067*^9, 3.707078372142142*^9}, 3.707078430680365*^9, {
   3.707078461033291*^9, 3.707078472585761*^9}, {3.707078510140191*^9, 
   3.707078510868954*^9}, {3.707078723860856*^9, 3.707078736348417*^9}, {
   3.707078881837239*^9, 3.707078886580496*^9}, 3.707078918433332*^9},
 CellID->861479325,ExpressionUUID->"fd61fcbc-4da6-4fd6-9c8c-a6452a87928d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", "7"}]], "Echo",
 CellChangeTimes->{3.707179014957703*^9},
 CellID->548267201,ExpressionUUID->"0e77c4be-b4b0-4004-b86b-32c5b18f5b45"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"context:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.7071790149877987`*^9},
 CellID->2022001577,ExpressionUUID->"165aaf1f-dd77-4feb-b191-308e423291b3"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
    SuperscriptBox["y", "7"], ",", 
    RowBox[{"7", " ", 
     SuperscriptBox["y", "6"]}], ",", 
    RowBox[{"42", " ", 
     SuperscriptBox["y", "5"]}], ",", 
    RowBox[{"210", " ", 
     SuperscriptBox["y", "4"]}], ",", 
    RowBox[{"840", " ", 
     SuperscriptBox["y", "3"]}], ",", 
    RowBox[{"2520", " ", 
     SuperscriptBox["y", "2"]}], ",", 
    RowBox[{"5040", " ", "y"}], ",", "5040", ",", "0", ",", "0"}], 
   "}"}]}]], "Echo",
 CellChangeTimes->{3.707179015073286*^9},
 CellID->1999274511,ExpressionUUID->"61742f1d-d0ee-42ce-bfca-81dab2050809"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"context:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707179015157648*^9},
 CellID->130081768,ExpressionUUID->"8d6634e3-b4cd-45e7-90f1-359c142ee2c1"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["General work-flow of monad code generation utilization", "Section",
 CellChangeTimes->{{3.706476997408891*^9, 3.7064770031111794`*^9}, {
  3.7069518654333*^9, 3.706951888189921*^9}},
 CellID->145922130,ExpressionUUID->"10d2c5e4-70aa-45f8-8cd5-e3de372145a6"],

Cell["\<\
With the abilities to generate and utilize monad codes it is natural to \
consider the following work flow. (Also shown in the diagram below.)\
\>", "Text",
 CellChangeTimes->{{3.706480548902575*^9, 3.706480616131959*^9}},
 CellID->86914036,ExpressionUUID->"6757e5b3-c396-4f46-b6f3-6d8da16ce97f"],

Cell["\<\
Come up with an idea that can be expressed with monadic programming.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.706480665461147*^9}},
 CellID->475323092,ExpressionUUID->"c60b14e1-6d51-4f18-b9f1-fcc8ad642b5b"],

Cell["Look for suitable monad implementation. ", "ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.706480685093013*^9}},
 CellID->116040404,ExpressionUUID->"5148d424-7cdb-4616-931e-99d6f36f3dc7"],

Cell["\<\
If there is no such implementation, make one (or two, or five.)\
\>", "ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.70648070927906*^9}},
 CellID->375918552,ExpressionUUID->"7d6a6161-53e4-416c-8873-e2f626ec1412"],

Cell["\<\
Having a suitable monad implementation, generate the monad code.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.706480735895931*^9}},
 CellID->166213990,ExpressionUUID->"5c3f639d-d7e4-4867-9e39-a1d84590b653"],

Cell["\<\
Implement additional pipeline functions addressing envisioned use cases.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.706480814762567*^9}},
 CellID->1829788830,ExpressionUUID->"c5c5ba2f-ad55-480e-ab0b-922ed87d0658"],

Cell["Start making pipelines for the problem domain of interest.", \
"ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.706480754616455*^9}, {
  3.706480798426999*^9, 3.706480808552021*^9}},
 CellID->1295040770,ExpressionUUID->"cc0c1b03-f976-48ad-b6cc-d7f65af1510b"],

Cell[CellGroupData[{

Cell[TextData[{
 "Are the pipelines are satisfactory? If not go to ",
 StyleBox["5",
  FontWeight->"Bold"],
 ". (Or ",
 StyleBox["2.",
  FontWeight->"Bold"],
 ")"
}], "ItemNumbered",
 CellChangeTimes->{{3.706480619259261*^9, 3.706480757893372*^9}, {
  3.706480817821507*^9, 3.706480892252482*^9}, {3.707161176463822*^9, 
  3.70716122876387*^9}},
 CellID->1003459045,ExpressionUUID->"94dc1c0b-0b2a-4e31-997d-1486e1184881"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ZuweY4+VsMeNtfo2LbTtXWPSpx8Y7fejjsSxK9XY7733nrPuuus6p5xyivtZ
3z3yyCPOZptt5vz0pz915syZ42qv5557ztl0003d2LT222CDDZyf/OQnrv7T
b5YsWeL2uZbO02d9Z+PY+nz00Ue7sWKrHZ9++mlnu+22c3VrqXxI+yof0u76
LpiPcum+++67To8ePZxf/vKXzsyZM93ts2bNctsD+vTp4/5fGvhf//qX89vf
/rZNd4c16Pvvv9+hvMnU7nDccce5aej/77zzjnPggQc6F110UUX5k+n/V1xx
RZuP0vUbbrihe230f/3+5JNPbjvum2++6Rx88MHO5ptvXlRjVxK3DmtwaeyW
lpaXzjjjjIlGv49da621Rpj7dDiWqjUb26DIewYAAAAAoKvwM2NOXJM+XWed
dYakrbF1LOnD4D5bbrmlM3LkyHbfSRuOGTOm7Td33333Kmkrvjtq1Kh2GvvJ
J590dW8wNivr37+/c+KJJ7qfpUGV5vPPP99O35XKR7l0pWGV5rPPPttu+1VX
XeWceuqpbf8v11e8I+dIn3XcL37xi24cPLjPW2+95WrkV155pS1/QZ9t/qy+
11hxxeuDaSheLf08efJkV9eHj6G0u3Xr1mGNXciksS+77DK3v8NXvvIVt30g
ifscK2vHr/KGAQAAAADoWqhOrLrxfcb2KmLfMfZr3w4LfK/5zl7T742Guen2
229f22rsAQMGdFhj29iy/lqNrc/Sj9LBVqfqO9lXv/rVVfpNH3/88W581WrO
sK6Tqc/yxRdf3E5jNzc3u7HYv//97+1M2vHrX/96m47VvjaWbPMbzIf9zuaj
XLrS2GuuueYq/vft29eNLdvvghrb+h/8TThv1pS3xx9/vOA50mcdR/8vdD32
3Xdfty3C5i9o/fr1c/Nn86C+4Or/fs011zi///3vXY37uc99zrnnnnucG2+8
0e3HXugY22yzTZvGDvoU9q+S7VZjT5gwYcz1119/5THHHPMHk4dfmPvgBCw1
e8R/j5xY+DUDAAAAANBlsBp7RMTfbWHsBf+3Nxq9uEaxOc8q0UTFLBzHLqTz
pB/telbFNLbGcod/d8kllzgXXnhhO42t8cf777+/G/MN26233trhfNh05YvS
sn9tutLY66yzTkkNG9bYhawjedPnpqYm56STTiqYpsaNDx8+vGz+1Ldc46tP
OOEEZ/DgwW5feJ139ReQxh4yZIg7lrvQ9Vf+ko5jMx47U4bWobEBAAAAAERH
NPYOxmb5v7vRWPco84pHiVOG49jSj+HfS5+pL3YwvbDGVl/x8PE0DnjQoEHu
Z6uxNTdYcJy23ffhhx92x3Drs+b/svkIpldKxz7wwANuumH/HnroIXf8ssY2
Ww0bNY4dtGDegvkPniP7nc2bPk+aNMnZeuut3Th0MA8aR73RRhu5fc+Vv/Dx
gvlTWppXLny9NV5eGlv9zDXuOngM2euvv+507969w3HssKGxqwIaGwAAAADA
oyMae606r2+5q6/1RSmNHafvbxJxbGln6WmNLbbpKi4rTWnHDgfnPNNc2Ndf
f31bfjRPmPp5jxs3LlasWOled911bf4pXeluzatt49hh/8Nx7N69ezu/+MUv
IsWxy2lsu9+hhx7qzntu95EW1lhxjbcOtgEUi2NrbPl3vvOddn3oL730UmeT
TTZxBgwY4P7/kEMOcedQC841p7ngNBZc7RBR+zkQx64Z0NgAAAAAAB4d7Ssu
nd3d/qeQxraatlCcsZSGCsexpYcLxY+LxbGD+tH+5q677nK+9rWvuTpSaUrb
ah0qu7/6NEtj6/Orr77qfPe733X3+eEPf+jssssu7nzehWLFheLYxWLFwXSl
NaXbla72DfYVLxbHlmkNsu23395N49FHHy0Zxw7mL6j/w7F+u5/yoLnHdZ60
/pbmCjvttNPcsezBNoBicWzpZZ0v/f7YY491dt55Z9c/xek1Jvull15y5yTX
NdA8aOo3rvW/Ghoa3N8Vi2N3xNDYmYPGBgAAAADw6KjGbkdYYwfnPIuqmaLE
uctp9KDmlAbUOlnqm1xJ+tKDmvO6VPodyf/bb7/trmkVx3/FlcNzlCeVP8XC
dZ4KjWGvJP3//e9/rv6XLi+2v8Zua344HSuN64/Gzhw0NgAAAACAR2oaO9g3
u5RmStOKxb7jWFR/qul/GpYH/9HYmYPGBgAAAADwSF1jZ63pglZsDrA8ady4
GjXvGr8j+UdjZw4aGwAAAADAo+Y1dlwr1B8Z69yGxs4cNDYAAAAAgEen19hY
1zM0duagsQEAAAAAPDLX2Frbyf4Nfi6ml6LuH/X3aaeP/9n7j8bOHDQ2AAAA
AIBHzcWxs9ag1dao+J+8/0OHDkVjZwsaGwAAAADAI3WNHdZAYYurIaNuL3f8
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
W5frrrvu+ldDQ8P7zz333MelNHRUe+edd5y+ffu2GhvjeOt77eywvhfkGGdl
/WB1/12teQKlE9fCsAxN95zuPVtX4F0KADWNs7IO2t1/f+ldtrZv6wQ+Y1ga
FrzHdO/ZMpS4H8TC8d5tq6zLNWjQoJv69OnTOnPmzMS0ddAWL17sjB49enFj
Y+PL5hi/NMfcw9iWDut7QQ5xVurrNfxnaV1jn/PvZwzLynTPaZyP2kt1L6Kz
AaCmcVbqa7URfq25ufmMYcOGnXvTTTf9ecyYMRffcsstl2BYWqZ7TPea7rn+
/fv/Rveg481Fpbpct2o/H5BPHE8X2HW5tjS2x6xZs04y77cXb775Znddro8+
+sjVxPZvJRb8TbnfP/roox82NDTMHj9+/EXm+N9zWN8Lcoazsg1ez9I6LS0t
l15++eULevbsOdfc2+/59j6GpWjufaZ77p///Of7d9xxx7GON95HbT3dq/2M
AAAUwmnfPv3Z66+//h9XXHHFB6NGjVqEYVmb7r3rrrvuMl9nf97x+iWiRSAS
/nvN9g2Xrv3eI4888mdTT5tt/n4YR1OHrZxGf/311x2j6xcOHjy4n8nHwca+
4bC+F+QEZ2VfED1P6zU2No576aWX3L4aca21tbXtb/Bzpdvjpl9tw//o/o8f
P36ZuQdvMPfiN/33KHNKAkBNEio/17/hhhuGPf300wXn/olq4bmCys0lFPV4
cX9f7fTwf9Xtzz777Kc9e/Ycau7FvY1t4esQyk+oCKd93/BNfT178IgRI3r3
6tVr4fTp0z8tp5GjxKkrjXNrfa9hw4Yt7t2796OmnvgTk6fdjH3ZYX0vqHH8
Z0ptnRrTs2H//v0nTZ48uaJ3fthqrYxKOv/4n77/Dz744DLzLh1k7sUD/P5J
6/D+BIBapED5efszzzxT0fuy2uVH3P3L5R//s/dfGtvcg2PNvXiYsa9SfkKl
BPT1Z339upvRs8f069fv4cGDBy+Wzq30Xi5l5TR4se1a32vcuHGKwcx4+umn
z/HbkbZxWN8Lahi/n3gP/7naaMiQIU8X09hJa7hyZVzS6aVt+B8/vxMnTlx2
yy23jDb34lHUEQCglgmMs3LLz2HDho2zGrvc+zHt933a5UfS++N//PxKYw8f
PnycuRc13urr/hwnjMmGkjjt1+WSbt3zpZdeOrOhoeGte++9d5ldl0tWru93
OQum0ZH0jD5ZYXT2/DFjxlxj8rm/0359L2LaUFME6gga+7qxeT+/8Morr3To
HZ/0/kmXUXEN/9P3Xxp77Nixt5t78WfGdvTrCLwzAaDmCGvsm266aYLtK075
gf9Z+y+NrXvQ3Iu/cLw1j9ZHY0MxQmNd7Lpc+99+++1XSMdqveq4fcOjbq/k
eLNnz3b69++v9b3u9vts7GrsS/Qdh1ojrLHN+/kFG8eOWwbE3R63zEq7zMX/
5P1XX/G77rrrTnMvnuCPBUJjA0BNEtLYG958880PVtpXvNrlR9zyJe398T/6
dl9jT/Q19q5obChGqG/4Zv79cmhLS8vtWp961qxZBe/buHHspOLaS5YscW67
7bYlTU1N/5s+ffqpir07K9f3ou841AQhjb3RjTfe+KKNY6ddhmVdBtZa+rWe
v2r4rzi20dj3mHvxRDQ2ANQyhTR2sTh2rVmtl2/4H918jf0gGhtK4RRYl2vm
zJknG706efTo0Us0B221+oKX+314+1NPPbW8oaFh7rhx4/5m/Ngv1Hd8NeqP
UE1Kaey8W2csQzu7/2hsAMgLedbYnbH86Or+o7GhFFZzOu3X5dr3gQceuKSx
sXHOY489tjyp+HSW9uabbzq9e/deNHDgwCHGn0Mc1veCGqEza2wsf4bGBoC8
UE2NXS6+09kN/1f1/5lnnkFjQ0GcwutyHTJ48OBBWn/6tddeq7pWjmMLFixw
Ro4cubhXr15Pz507V/P57O5486Ov57+jqUdC5kTR2EmXaVHT4/id//gTJkxA
YwNALoiisZN+39Z6evifvf9obChEqG+4uy7XvHnzju3Tp8/jw4cPXzx//vzE
tO7y5cvb/gY/J7V/KdP6XqYO+UFDQ8M7TzzxxHmOt77XtsY+zxhtqAZdKY6d
tEbMm+XBf+LYAJAXOlNf8aQ1aN6sM/hPX3EI46y6LtfeTz755O+NDp35wAMP
LJMuTUvzppFeJcebNm2a1vdaYPRMT+PvgY63Rs3G9B2HrCmmsTtSxoS3h61c
mRS1DEu6zItbxuJ/fP/R2ACQF4pp7DTen+Xep0m/n5Muj/A/ff/R2GBx2q/L
tbGvMw8cNWrUtU1NTfO1znQhzZt0HDrp7WErlr+5c+c6AwYMaO3du/f9H374
4RH+87C5w/pekCGlNHbUd3xcTRc1/bhlWtT84H/6/tNXHADyQimNTfmB/1n7
T19xEE77dbmkK3eVzuzbt+99LS0ti7W+dKX3adiq2Rc8avpLly517rjjjqVN
TU2vTpky5XTHW99rKz+mT99xSJ1SfcWjlkFxLWr6UcvErNPD/+j+o7EBIC+U
6ite6+VHrZdH+B89v2hsCPQNX8/Xk3tOnz79142NjdO0nrR0ZxJx4mK/D++f
dJy6Ixr/2Wef/ai+vv59U7f8l7Pq+l7dqGNCWkTR2HHLqLjtvrVWpuJ/8v6j
sQEgL0TR2HEtb+97/M/efzR218VZdV0u6cj97r333r9JXz711FMf1YIGzlrT
W5sxY4a7vldLS8vNjre+107GNmOMNqRJkn3Fky5Taq2Mq/bxai0/aRwPjQ0A
eSHJvuLVLj86e3lVa5aG/2jsronTfl2uzXz9eMjAgQNH9OnTZ5HWj7b3SNpx
56gaPG0LHrO1tdUxz8fipqamF+bMmaM65h7GtnRY3wtSIo7GxrCkDY0NAHkh
jsauNUt73GStW2fwH43d9XBWXZdr9/nz5x/f3Nz87MiRI5do3ejgfR1Ho1by
nMTV4OWey7j51TzqDz/88Af19fXvPvLII38252sfY9sF+o5T34TEqKbG7gxl
Gv4n6z8aGwDyQpoaO268Ke+G/9H9N/ceGrsLEeobLp24j9aFbmxsnDVx4sQP
DJnFi5PSwFnZ9OnTP21qalo4ZMiQ3ua8Hex4865vSt9xSJIoGrvcs1DrZVzc
/ON/+v6jsQEgL0TR2Gm/P9PWnLVefuD/cuLYXYRQ3/BNfX144MiRIxuNblww
derUT7PWrHm09957zxk8eHCrOWcPL1u27GhzDndzWN8LEiTJOHbUMqRcmZh0
emkb/sfPLxobAPJCknFsyg/8j5tf4tidH6fAulytra1H9+3bd8LAgQNb58yZ
U7HGrAVT3237N/g5q+Mbbe3cfffdS+vr69986aWXzjTncy9j2zis7wUJUEhj
v/zyyxWVMXHLpLTLtLTLWPxP3n80NgDkhUIa+6mnnkrlfZu38gP/s/cfjd25
cVauyyX9567LpXWfm5qaXtc60EuWLImsMautcaudX/vbF1544eOGhoZ5o0eP
vtphfS9IiFJx7KhlQLn9o24vZ3HLrLj5xf/k/UdjA0BeKBXHpvzA/6z9p694
58TX1t2c0Lpct99++7+lC5977rmPK73v09KoxdKLe7ws8/vOO+84/fr1a+3T
p8/t5vwe6j9DrO8FHSbN8dhxy8Ssy9hyhv/p5xeNDQB5oVQcu9rv+1rTqPif
fn6JY3c+nFXX5dpF+m/gwIFjjBZs1brPwXsgrCHDFtynkMX9fTmLqpnj7h81
/4sWLXJGjx69pKGhYfIbb7xxssP6XhCDUn3Fo1raZVbW+cH/7P1HYwNAXojS
V5zyA//T9h+N3blw2q/LJZ23x6xZs07q1avXS+Y6L1m4cKF77ZPUqOUsqoaN
GueOm15S/j/22GPLjc6eM378+EvNed/XCa3vRb0UKiHKeOysyyyO3/WOj8YG
gLyQZBw76fd3tQ3/s/cfjd15cFZdl+t7Dz300EXSfY888siHWpermC6NY7qP
ktS0cePo5fKTpv+vv/6609zcvHDQoEEDzfk/xK+Tsr4XVEwtxbHzbvgf3380
NgDkhSTj2BgW19DY+cdZdV0u1YMOHjJkSN9evXotnD59unuts9Ks5faPuz1r
zR81P/Pnz3eGDRu22Jz7J+bNm3es463v9WVfM9F3HEqSpMaudeton5HOYnnw
H40NAHmhK2nsPJQfXd1/NHa+cdqvyyUdt9vixYt/0rt370lGYy/Wes5pa9S0
48RZ5y+J9LW+1/3337+0Z8+ebz/xxBPnmuuyt8P6XlABhTT2Sy+9lEr7VdJl
WNJlXlz/8D++/2js9thxP/5zKlsdy53Za8cYrk6GU0BjP/nkk5Qf+F8V/9HY
+cVpvy6X9NveL7744u+ampreuvvuu5ctXbq0Qxoyacv6eLWUn8mTJ68w12O+
ec9fb67PAcZ2NLaxQ99xKIJTIo6ddBlUrkwq9+wkXaYlXWbjf3z/x48f36U1
ttNeU6/uv7d7+M/omlhubC3f7P/X8K9jd2el7kZz5xynRByb8gP/s/bf3Hto
7JzhrIxdB9fl2v+22267uqGhYb7R2SvS0ItpWbnnKO/27rvvOi0tLa29e/e+
1/z/CP8529wvA9DZ0A4nRl/xuM9O0mVW1O1J5wf/4/vfVePYzqq6eg1fo6nc
Xcd/f6/rn4+grYvVnBW6Rp/1r+Nn/Ou6hhPS29W+ByE6Toy+4mmXH1Hf952h
/Ojq/hPHzhdO+77hX/Kv2WF9+vS5S+s0z5w5s8P3B5aeLV682Bk7duySnj17
TpsyZcpp5prtaWwrx5v/nb7j0IYTIY5d7h0f3r/aGjJqGRy3TMX/+P53NY3t
tJ/fRH3E1B6qdmzNq7Hf5MmTT2ppabm6qalpfN++fV9raGh4z9jC5ubmRQMG
DFg4dOhQ14YNG4ZV2ey1MNdrYe/evRea8ndhY2PjXHPdppq/dw8ePPiK119/
XXOmfM+vS2mu2M38cvkzDm3guaOUxu5s5Udcf/A/ff/R2PnBWdk33K7Ltecb
b7xxiikrptx6661LtE5zsXunlNn5xvU3+LkjaeXRsvTfPG/LTTn/nqmzXqb6
ml93Y30vaKOQxk5qPHZUi5te1vnB/+SP11X6ioe0td7Jmt9kJ+mvJ5988jRT
zo40unpWr169Ft19992LX3nlFUdt2q2trc7HH3/srFixwv1byOw2/Q1+zmr/
8PZyVuv+xPFf9aQZM2Y4L7/88qdjx45tNdd1kbmmM4wGb5k6depJjjd3yjf8
678BWjtfFNLYdjx2rb2vs84P/mfvP33Fax9n5XiwYN/w/bQOc319/dzHH398
efC6Jq0Zy6UXd3vc48fdP2v/33zzTa3vtahfv34jHG99r538tnPGaENJjV3r
ZUrc45drB8f/7P3v7BrbWdkn/DO+pvqyXxfa39SN/mHe1VP1vp40adIHc+fO
rUizpq2Jk9aoUa2z+T9r1izd50ubmpqkt1+45557/mSu//f9+33zYH+zznTv
d0biaOy8lR/Vzg/+lz8eGru2CbWt23W5DhkwYMBgtadrPebwda81zRvVwumH
rdzx8uD/ggULnJEjRy42Zfpzs2fPPsFc0939ut16Dut7dWmiaOxaLFOyNPxP
Pz+dWWM77cdeqZ1Tc1Lud+utt/7VlK9vDBkypPXVV1911xRPSp9itWt6dqZM
mfKJ5k9R/8CHHnpIa4Ls48c1NqUdvPaJorFr7X3eGcuPWrYs/Edj1y5++b+G
r7ukv3afO3fuz5qbm5/S+svz5s1zr2HScdaomjZs5dIrZ3GPlxf/tb7XhAkT
PujZs+csU5Zf4Jfl2xr7vO07Xu17ELInThw7y3EPtWj4n7z/nVVjO+3X5dDc
GHu8+OKLvzLa+sn+/fu3vvbaa1XXfNasxtff4Odq7d/Z/ZdNnTr1kz59+izq
3bv3uHfffVdjtnejHbz2iRPHpvzA/6T9R2PXJqHy312X64knnjivoaFh5gMP
PPBBcF2upOO2SWvStOPGefd/2rRpnzQ2Ni4YOnRoo7nOB/qxFNrMuyhZ9hWP
W8Z0tjIZ/1f1x5Q3nU5jOwXGXo0aNeoqo6/nmTqRO/aqlEZLQsMFLen0az29
vPivepbawU35PGfcuHEXO97caNs5gTlUqn0vQ3uy7CtO+YH/5fxBY9cWob7h
G/t668CRI0f2lA5TP6ZK46Qd1Yhx08v6eJ3B/zlz5jgDBw7U+l4Ptra2Hu2w
vleXpZDGNnSKMivtMhj/iWOXwll17NVOK1as+JHR1g8odq33cEc0WtIaslx6
5dKPGhdOO795919zpCmm3bdv31HmnjnYr5dtjM6uPQpp7CeeeKLo+/ArX/mK
c//99xd9f/bo0cPReJFqlx1JlQea82/11Vcvu/8ee+zhTJw4sSbLz6AP+k7z
Tz7zzDMVn6/58+c7a665Zsn97THi+o/Grh2c9mPDpK92NdfoCPNuH9fS0rJY
6ywXum/iaspyz2m5+zZtTRrXn7z4v2TJEufOO+9cWl9f//rzzz9/hrNyfa8N
HNb36jKUimMnrbniphf3Wc86v/gfPb3OorFD+lpjr3dduHDhsUZfv3T77bcv
VcwyLc0X9fdpp5f28Tqj/5o/3tSVFzc3Nz9i7p3DjO3st9Ogs2uIUnHsQu+7
oMYu9P6Uxp4+fXoqddVqlB96z/3yl78sm5409oQJE2KVH2n5Lx9OPvnktv2u
uOIK53e/+13F+dE4W6uxi/mv5z2o4zvqPxq7NigwNmzPadOm/aapqWn62LFj
l+p6J3UfJ2Xf+c53NG9Xh+ulant6+umn3c+KH6yzzjqJPIdZW9x6edieffbZ
j43Onmeu+3+dVdf36kZ53rmJ0le83L0Vt0xMW8NFPR7+Z+9/Z+kr7pexVl/v
tmLFip82Nja+Jv/iajLNk2P/Bj+npQFrzbqK//KpX79+H/bs2fNlcw8d6deZ
0dk1RJS+4nrHSWOPGzeu6PszGMfuSuVHoTh2rfr/3//+19XYlfpv49il/C8U
x+5IftHY1cUpsi7XPffc88+Ghob3jQb9qFj9qVIrdx901KzG7ujvg8+F1dhJ
5i9t/9PM39tvv62+aa19+/YdY+6HH/pt5qzv1QUo1Vc863s/bplf7WcR/+P7
3xk0dqCMlR7addmyZceZ8memqVsvr0QTltOQUbeHLWp6cfNX7vj4Xzx9PROj
R49e1tzc/Jy5l37seGtvMj67RijVV7yQRdHY//vf/5yjjjrK2XbbbZ3ddtvN
tTFjxrj7/uIXv9C7cpXfn3jiiW39mBUr++Mf/+jq191339054IADnIceeqho
3oodz77P33//fWe//fZz1Aav/fbaay9nxx13dP70pz+5/SILpbl48WJn7733
bvf/iy66yPnmN7/p7LTTTm4aOh9Bja19SuW7VD6LlT9G4zj77ruvs+eee7p5
1nmaPXu2u01+ff/7318l72PHjnUuvvhi1zfrw+GHH+58+ctfdr7whS+4adlr
Xepa2Tj2yy+/7Bx88MHu8XfddVfnV7/6latFtE9YY5c7B8XuHzR29SjQd03v
6kP69+8/qnfv3ou0jnJada8kLCmNrc9R4thdxbS+16hRoxY3NDS8PHPmzF+a
e2MPY1s6zGvaqYkSx47SLl3I0taIcTVqpe3S+J+e/3nX2IE+YtJBOxmddJTR
Ry/fcsstH6al6dLeP2nNWm1/8ua/ngtz/yzp06fPQ+aeOtTxxmdvSLlcfUpp
7ELvU2nsESNGuDpafcLtX2vdu3dv6ysuHXbllVe26dfJkyc7G264oasJ1V/5
+OOPb/f+VNv41ltv7a4ho/8fc8wxbp3Xzln87LPPOtttt510WMH3sz2e3d8e
77333nO3z507120DOPnkkx2NJdV3qkvrd3379i34vg+Px9ZvTznlFMf2lVV8
R7pziy22cPuKB/Nt/bb5tv1QdbyrrrrK3V4on+HyRt9vtNFGrg7Wdzo/F1xw
gdtOYX0Ix9xkLS0tzs9+9rN2Pujc/Oc//3HOOuustvNU6lrp2Ipj67oedNBB
znPPPdf2G11DaXHlJ6ixS50DXbtS5Scauzo4q67LtYfWSe7Vq9fzWjdZ90Cl
9aSoZp93/Q1+jrp/WGOXapcKW7jtSe1/eqbKtceVageUJlW6+qt2ue9973vu
52K/iet/WtcnbJMmTfqgvr5+9vjx4y8y98m+TmheU8r0zkWcOHY5TVaoDEjS
so7T4n/6/udZYwfasTfw+4gdYupp40zdsbWURotqUTVg0pZ0XBn/y5uejeHD
hy8eNmzYYHNfHeB467+oPte92vd9V6Yjceydd97ZrS8WMiUp3a265Nlnn+3G
M4O/V+xXWvSdd95xNthgg3Z1XunGyy67zP0sPSpNFo4vDxgwoE1bBk0aQMcL
jhMNHk+fpUWVv+eff77dPldffbXz61//uqC/Qe0ojbvpppu6vgX3mTJlitOt
Wzc3jm3zLf0aLD9svivJZ9g0TnTjjTdud650/hoaGtr8KhRzC2ts+30wXlfJ
uVMcW+fN3BurHOO73/2u+33wGOqHYK9dsPwsdu2ChsbOnlDfcOmlfR5++OEL
jY5619zTHwS1XCFLSiN3tB5nfysdrPY/+0zYdim7T7BdKmx6Xv/973+7bU+6
b/V7tcdpLoZZs2a5v9fzF26PC7YlaR9772u8jZ6bL33pS85pp53m9OzZ031P
BH+jd6N+U67tsFL/kz6fpdIz7/hPm5qaFg4ePLjF8eY1/YbD+l6dklJx7GAZ
VwuWtqastmatdv5qwf9OoLE/6/f/2c/4cb2pp7WqLKgljVhtTYv/HUtP8UtT
Li96/PHHLzX3195+vGTtvDwfnZEk+4rLgnOeqd6p+Mx1113n/OEPf3COPPJI
53Of+5xz7733uttV31XdU59Vx1Uc6Y033nD/36dPH7c++49//KOdSQt+/etf
L3jscsdTvdmOKw6a1aKF0gxqR6P93LhUof222WYbV49Wku9y+Sxkf/7zn936
uvpnNzc3u7rbbourscvlyWps/Q0fQ/G5Sy65pN0xOnLtrKGxsyPUN3xTv75y
8NChQ3tJP02dOvVTXZOs46YdPZ6NY2tf2y5l+6vou2C7VCEL9xWv89vjgnlQ
/xO1x+lzuXZA+9wMHDiwbVslbYdxz3dWmlt9XMy90tqrV6/HjK/HmntnN79M
Xxed3XmIE8eulXdDZzH8X5Zbje20H4O9u6nrnmnKo3kqo8ppJ7Vj2L/Bz5Vu
zzr9uPnB/47n77XXXlP79yzzvPzcr0Nv5LAOSNWIorH1frMau9j73WpsvTcU
V/r5z3/uDBkyxI3VLFy40I17Wi354IMPOt/61rfcz7fddpur62yaqgvvv//+
bp3ZlOntTOOMw+WNYk063gknnFD0eOW0aCGfg9rR1CfdfqOFyrevfvWrrsZu
bGx08x3Os813JeelWPmp/GuMtPS2rsOZZ57pfq/4mvUruL/yUonGLpcnqxVs
/D6Yv0svvdTNT/AY5c5BqfITjZ0NAX1t1+XabfHixcdoPeRBgwa1Wm1aSb0u
6vawlasnVvr7oMbWdxdeeGFbu5TRge3apQqlH3wu9EzZ9rjgMey7Qp/LtSXp
uVlttdXctmX7e3N+I7c/RT1/SfcrKLVdbaPmHaH1vWaYcuNsv+18G4f1vToN
taSxMSzHGtv2Ed/B2BGmLHnioYce+rBQH/q4mixrjRr3ePifrP9a+83U5W/T
WAS/b+J61KOrQ1pxbPWn/MlPfrLK9i9+8YvttOQuu+zi9pHUvtJftu42fvx4
d6xv+PePPPKIO244/H2h4yktezx9jquxFdPSuOtwDEpzQWm8sjR2uXwH8xms
rwbzGf6t4suKXQe/U/9uxemmTZvm5lHHD+oi2emnn+76Jb1sfVD6YY1d7lpZ
jV0ozq6x6IMHD253niq9doXq7k8++SQaO2Wc9utySQ/tqfWPGxsb39R6yOHx
HUlrtqj7V5peoTnP9MyPHj26XbtUMY1abM6zYhq7WFuS8qB3mbR1WKcX+o1t
R1Q7YxKaudz5jdvGUWh/o7k+bmhomD9mzJhrzP20v9N+fS9i2jkmjsZOo31I
/1dfddUbwvNEJPUuqdazl/TxOqP/edTYgRi2+vl8z9SF/m3qXa2qSyahycpZ
3PSyzg/+xzue6uzqMz5lypTzVb9zvDlsafOuAnE0dqH3pzS2dJ/6Pmoua6tH
te2vf/2rs8kmm7h9J+1vFa9WH8ngGGZrinHfcMMNbf9XvVfzeWt97vD7V8dT
HVtp6Dv9DR7P/j6ose1vVW8+7rjjCr7PwzHgH/7wh+5c3XZfbdf4SsXLpLH1
nfJ9/fXXt+2judZsvm0+7XkplM+wqU+m0p86dWpbmhrbuf7667fFyBQDCx5T
9Q/N0SS/wj4o/qZzXuzcha+Vnlf1Gz/kkEOcmTNntqWjsa+ao07pWx1vf2+v
nT1G8ByUKj+JY6eHX853c0Lrct1+++1XGO03X+sgd6TeE7ceFbfeZT/b8dj6
v/rIKHYd3D/YLlWoHhiOY5fT2LYtKZy/hx9+2J0PsJDGDrY/BX22v8ni/Cdd
L7ef9W7o16+f1ve605Tzh/nP72Z+2YLOzimlNHbcey+KqRzSfKN6hlWWfPvb
33bLQI3d0DiQSu7VqJb0s6e+NHbu047mx67z0VGNWonZOkPa756O+J9Tjd3N
b9PWWh3HmffkdFOH+7SjGi1tDRj3+OXiumkfH//dNXqWDxo06HHHW89re4f5
z6pCKY1d6P1ZaV9xvaOlR7/2ta+5Ok/xas1nrfGM0muat1r7qx667rrrupou
fLzXX3/d7a+sOqnSUh9LzUtU6P1dyfGiamx9DpY1MvVJP/TQQ91539RvXDq2
qanJPbads0z53meffVbJd6X5LORf//793XS+//3vOz/+8Y/d66Dx4Xa7Ysya
42mHHXZwx4wrbcXGCvUV15x022+/vZu/xx9/3NXHNk/HHntsW54Uc1aeVCeQ
xpcOUN3mRz/6katn9Hut5xUsk+0xSp2DUuUnGjsdnFXX5dK5PdTc+7dp3eMZ
M2akVq9Mu95aSGOrTce2S9nfBdulCqUXbHuy74rw8cLvCtueZtMKtgPaunDY
/2D7k82r/U0c/4vtX86i1tNLHU/vEq0h0tjY+D9TDvzaab++F+3oOaSQxn7h
hRcSv3dKmdpv1I6scR+2XVmmvlt6ZrUWgI1pZ5Gfjj47th0vzvEKtd0l/Syr
L5Pme8zy3VGp/3nT2H7Zu7ofw95v0qRJV2ieM/mSluayadvzHvyuKxj+e2ue
mHJ4kamLn++P4SKWXQWKaeyk3p+q4z722GNuXKij72u1UQe1Z6nf63jSjarr
pll+qmy3cwcX879Uvgudl0rOp2JwWj9Lz084TelcjaUOzvNUyn8d285tXChP
xfIjrWLnpiuX30qvnf0tfcWTx2m/Lpf0zh5a37hXr16vmHO9RHXTOPWotK3S
91B4PHahdim1OxU7jtoGbduT9G4lGvu1114r2g5o68Lh45T6TRz/07o+HUnf
vEc+rK+vn3Pvvff+zWF9r1wTJ46d1L187rnnto3nCm9X/ys9TxpPFffeDe9f
zqL6Hx6nFfVZLqexa93/uO8yfc6hxtbz08Px1iz+qSlDJr/yyiuflNKEYYur
EcPpJ6054+Yf/9Pxf9KkSR8OHDjwwUAse91aflY6I1Hj2Gm/P+OUB52h/Ojq
/qOxk8NqGaf9ulz7Pvjggxc3NjbOeeSRR5Z35D6Kex+k/fuwSTurXcqOMy93
X6qNya7FVakF25IqzX+x9qesr0dax1NfFqN7Fpo65VDHm3uF9b1ySKk4drl7
LW6ZIrN9SjQGu9jx7rvvvjaNre/U3nzeeee1W4Ne40e0XWOv1O6mdgL1RVMM
XP3RtLZfsM25VBpql1R/Mf39y1/+4vbZ0metFag0t912W7cNTaZ5SpUn7a/5
XL7whS+4/dwVCyh3nEJmNbbOh+ZDUd7VTqcYv13fU/sVyovmprDp3H333c6+
++7r5kVpaM5Ttc9rm9rw1WZp99X78J///KebP6Vz2GGHOYMGDcrk+octhxp7
dT9+uLe5l//Y1NTUatc1rVQDhreHrdz+aacXV9Pifzr51btO86SYe+9Uv0/Z
RvQXz5ZScexqvD/TrGsmnR/8T95/NHYyOIXX5Tpk2LBh/Xv16rVQ/SE6y31Z
7ecA/4v7Lz0wfPjw1sbGxqfmzp37M2fl+l7r+eVOzdaNwSOKxk7j3pLelE6M
8vvgGvT6zq5br3lKpEM1pk19oe04bmlL6VTN/2nTCq9jb9NQ/zXd1xqLctpp
p7njPmxbmdLQvAr2Nxp/veGGG7rjQaSr1F/lrLPOateGVyqvhZ4tHVtznB54
4IHuvvpOsXzFyKV/7bw2Ni/2WMG8yDS2TDpc++o3559/vnPiiSe6+4bnV5F+
V/8d9dvT/9XnTWPLdC6yfrfkSWMHymG1cx86ynD33Xcvjarp4u6ftiaNa/if
nv8jR45sHTduXG9z/x3s92NkvewMiaKxa90qeT93ZusM/qOx4xPqGy49s5vW
L25ubn5i6NChi1W/qvZ1xrqOqY6venF9ff1MU7ac648N29bY5xkfVvtkqbEL
mebd/MEPfrDK95dddplz0UUXtdm//vUv93tpU2nUYExaprk9pSGlseWW+rYE
t2tOFM2fVkka0rlKw87fKpP+1Bp8iksHf7PTTju1zYcaHo9d7jiFzoc9tpFr
q2zTPLP6vlxeNI+K5o6zcWuZxrybZ9T9HNTYOk9qTwiPKbrnnnvcuWiyfp/k
TGMH69cntrS0zFD/nrQ1W61Z1pq11qya/ptn/dNBgwa9YO6/4/znZb1afV46
I51JY2P5NzR2PJxV1+Xa++mnnz6nsbFxxr333ruskj7Qwbn5g5+T2j/p4ydt
+J+O/5MnT17R0NCwYPjw4T3NfXmgPz5xY/qO1zbFNHZWz4bm81TMNPz9kCFD
3PkRZNdcc42rGfV9uTXopbHtPAnBPPXr18+N1epzsTSkj5WG+mCuttpqrt4N
+iOtrLj7tdde6/z+979354HQvKHSozbWrDi23b9cXgudD6uxw3M3ytRv/ZJL
LimYlyOPPNLNi10j9MILL3TX51SMWlrZ9sVXPoMaW+fl+OOPr4l3oyxnGtv2
E/+cuR7nmPdfa3j9nDRM58n+DX6uttbMyvB/pc8aa9OrV6955h60c5BuTH/x
7CiksTVOqFrvzyQt7fIA/5P3H43dMUJ90jTm5mvG9h8zZsy19fX1C0ydeEVe
77Okj4//1fNf6zL079+/1WiL+1tbW4/0n/HNHdb3qllKxbGTvvcLbX/rrbec
tdZay51ns1h6WhPPamzFYrUGveY/DNutt97ati5f+Ph2PkN91pqixdLQOvZ2
THQwDfU719juE044wdX/6se9YMECN7Zsda3W65BOt/6VOo7yWuh8Wo2ttMPn
69JLL3W1s56zUnmx++tcmDqf+xvNCXnmmWe66QU1ttZAPOmkkzJ591WSXl40
dqhMXt/co31M3aZVPoQ1X/C7Qtujasikt4ctav7K/R7/0/Vfa7H/73//+6fq
hH55u2a1n4+uQqk4djXen6XSC1vc9MsZ/mfvPxo7OoGyXM/wl/zzdpipM97T
r1+/xeoDWM37qtrPUbWfK/xv/3v1XzU6ZanRF69OmTLldHOv7mlsK4f1vWqS
KH3F0yqD/u///s85/fTTi6YnbWw1dnDd+qDZNeitxg5vD2pso+Pc9fTCx7Np
FFozQGO5NbY67P9mm23WprHDfcXL5bXQ+VQMXZdFsfHw7zQH2uDBg9vlJWiK
Wysvim9LOwe3qX+5zqHm6pAetxp70qRJztZbb71Kf3atvaB4exbXP5ieOW6e
NHYPv5/OBsOGDbvP1K0/jhqHLGRpa7yo+0fZrve/xvFrDII+dzX/q3H9zbti
ydixY2809+Hhfv9GxmRnRJS+4lHrZh15f3a07ql2W82RudVWWxUcp5TE+7+W
/Q+a5ie147/y5r+599DYEQj0DV/P1yl7Tp8+/dTGxsZpWqfYxjriXKes7tuO
3mfl9sf/2vT/qaee+qi+vv59U/b/y9y3+zne2iJ2fa9uNVwHUAzgLGNfKLHP
/saOyyY76RKlr3jSz4b9PGPGDLfv9G9/+1tXY9rt0oXqB33GGWe4+tH+xq5b
b38vXS3NPG7cOHcMcrk4tsymYfcJpqE8hPubawy15uLWeBx9p79//etfnU02
2aRt3HafPn3c9byD/hXLqzRsofOjY6vP9yGHHOKeF7t9xIgRrhZWDNrmxepi
5UUxbuVF29R/VOdLc5fZdLUm5/rrr++2H9g4tt126KGHunOf23woD5pLXWt9
ZnH9g9tzpLHb1a2HDh06RfPOdeSdG1UT1qJpHphTTjnFbXPS/Aqaz17z7ml8
Q3gMm+YLsHP+xfE/nE5eLe71N/XqFcOHD5/oeGOyd3RYwytNvmzst/Y/pfqK
x62rdeT92dHtRlO0jaVKqi6bJ/+DpvU11D6eR//R2O3YodgGZ9V1uaRP9tN6
xD179nzPPMPLo943Sd+HHU2v3H0UnvM2XI6WS9/Wj0vlNxjHqTX/k37uwu8O
tc9ldf3V/7e5uXlR3759b3K89b12MraZU/tjtHsau63INmnveca+n112EuWX
xgYYc9+7UeLYUcuYKPeynlvNSaa1r6RB1Za86aabOn/6059cLfmNb3yjbf9X
X3216Br0wTh2MP3geGx9V2wde20vFMfWe0n7aez4scce6+yyyy7u/ldeeaWr
ifWe0jqC22+/vZv/Rx99tGxeC50/nQfpY8W6lY7071577eX+3o6p1vsrnBf1
U7d5kdbr37+/eyytY3bEEUe4fcXNtW33jrXH1zn76U9/6qan+LhiGRdffHGm
199aDjW2+9y0tLTMtm0iXdE07l9jF3Rv2e/UZ2LnnXd2xyoE9w339+ioJZVO
3k3tZ0OGDJlu7sNf+vXqz3fhenWarGFsmjH1NfqLvogSxw5bGu/PKHXToNlx
SHHqhuXyW8v+B7fZOHYe/Udjt1FvbJmxA8IbnPbrcm3m65JDBgwYMKxXr16L
VDdMSgNVYlHvq6jph01rt2rdHft/1R01j1Clxwtr7EL7B+uYteZ/3PyU2l/v
jmD7XBb+KxZp6vaLe/bs+cKcOXNUb97d8dYYqeX1vdY2Nt3YCQW2jarznt88
soGxuXVeHWGosdVLxbGj3htRy5Bi6Sn++vTTT7etJVVsf42RDsYOozwL9rNN
o9I8aj0s6Wc7Z3ch/6VZ1S4QPKbG9JQ7TqH8qf6suaoL7a/zpLzoeMX8l855
9tln2+YgL/Ws6t2p+qHSq9b1z5nGXtPP38aNjY0LVa4k8c6MW1eLel2iHi9s
utc1p0Kh/i8TJ05049nB44XnBuxofqzGrrb/ca9v3Pzo3aI2HnMfnuasXCe7
K9ars+BgY4vqfJ2dZRw7abNpqx1Xa0uoD4r6n6jM0DN9+eWXu/2w1Nar7zUX
iv2tyubDDjvM/au+Kur3pM/B9O0+KlPUzqs5RDRniPpwqU1a36nt+KCDDnL7
aQV9V98XHV9xoULHV78ZtR/rnaP5PpX2jjvu6FxwwQWuhrBlp7ZpbVClIdP8
JDYN7ae863utyaE01I/NxrHTOu9pXn80tovqC/+s855R6ez97QZfX3dzVq7L
tbup9xzf3Nz8zPDhw911ucpdp6Tf90nfR+XSD+8fnkeo3P5RNXat+x93/+B3
hTR2Fv7rffnggw9+cMMNN8yeMGHCn819vY+x7QJ9x2uuDm3Yx9gcYxsHvjvS
2GvG1gl8t2mdp8X/YGyvUBry60BjFxo729hWKeU1CtvVrWyLH/73v/+9e7E4
dtx7Iel7q9rPEv6n73+ONHbbnOLGNunZs2erbVeJel6iWtTrWO73UesIYZPf
6juiuffCedE2jdOw7Q+qc2+xxRZufxXVm6VH1G511FFHuXVh1bllo0ePbktf
68odfvjh7l9bn5cuCKZjxzVUw/+oz0nS11/tfX379n3P3IdnOd7amZt2wXp1
lnzD2FvGnG7dul1cLI4d9/2ZtBW7z/WMan1M22dM36tfivp92fUtNF77wAMP
dPs3abvtb6W5VEy9rq2tO5i+9ll33XXdMST6rG2PPPKI+8yq35Rty9XcDeqz
Fhz7Gjy+/q+2cB1f+bT3fI8ePdx4nNqY9J3yqL5bGrOl/+uz5j2xmlt53HDD
DR27vrF+e/LJJ7cd980333TnPNl8880L9hWP+t6txvVHY7fjV8Y+MrbU2A8C
+rqHH+fbS+sN19fXv2PqHR/YMU1ZX7dybUGF7qu7777bnT9BZZ/aln7+85+7
979tewofQ3Ps2mdH8RaNNdTnQuWxvleZXCxPVmO/+OKL7vOi4+tZ0zOr51L7
2L7i9vgq/zUeUe1Xarc74IAD3HmDip2TYPuc1u+x7XOaS6lQ+5z9Xbm2wVJt
c3bsZTn/7TkMt8/dd999qbTPRXmvTJ069dPGxsYFAwYMaDb3t+75HXydXatz
oV1j7Eb/8+eMzTC2X2D7vsbeNPYPY6cbu99Ynzq/H3ad1998ZJ3XP/vPxmbW
BdrUqsiGxh40pudg5IQJE9bqSBw7y3unMxr+r+p/juYVl8Zey28Pl8Ze3FEN
V2v3UUfqlupnqjEGV199tVtO23kLwunpe611rzi2rc+H68IqQ1UX1rwC+n+h
+rx+q3Q0h4M9VjX9L7V/2tdf9ZGmpqbW//znPy+besGkbbbZZlz37t3vNLdp
R+2umHZ3TLsnpt0b0+4L2JvG3jf2hrFxAXu+zmundtZYY41LOxLHriVT/dv2
FVe/Jz1v4bi01gDRc6kxMXZuTs3/USxNu480dPD7Lbfc0l1bI/id9POYMWMq
Pr7q8kpb+wb3ueqqq5xTTz3V1eaKzdm2PWuqD6sOPHnyZFfXh4+hd0u3bt0y
iWOnYdLYxx133HSjR+7YeuutB372s5+9wZynK41dYey/vv3Ht3/79q86L+4r
u9y3y3z7h29/N/Y33/7q26W+XWLsYt8u8u0vvv3ZN8WZ/uTbBb6d79sfjZ3n
27m+/cG33/t2Tp0Xp5L9zrezfNP8COpbOrzOq3+fUefVx39T59W/da8sNe/E
/fw+4muZc7VH//79r9Z6w+aaf1LNa1au/Aub2qbUN0za3H53/vnnOyeeeOIq
YyWtBcdKBvVvsBwNxghK5UnPtTmX7jOr/qbarjJY/cqkOfU5rLGPPvpot8y3
6el32223nauhi707orbPyWfbNmef6460zVVyTcq1z2V5/4TrF/Jx0KBBraZO
OsGc84Zvf/vbgzfeeOO+a665Zi/zbuvtPyN9jfUz1mKsf503fnigscHGhtR5
/ZyH+c/UCP85khZWP+6bjY02NsbYLcZurfO07lhjd9StrEPYsvyYuuJ8xtj/
jB1lrMlYQ2Bbjzqv/N0j8F03P+2fGtve2NRQej+u83R4MfSuko5/u87T4+8Y
m2XsXWOz67x+3u/VeWW+xoTPN7bA2MI6r//aYmNL6rx2O/WR+cDYJ8Y+DZgT
NJUnn/nMZ2429+r6WWvsrA1NW/v+5yyO3aaxjcZZXO1zV+37QHPhSwerXVjz
62nePq1fF56bNTj+q1xdWJ+L1efD48iq7X+1TOeuvr5+qeIE++23n1vOq35T
F3rXY6nZW+Ye/mJn0dhat+L4448vuJ9iZ3feeaf7TK622mpt9d9Cpm26D8P9
e7761a864XOk49k6biXHVz2y0LxLQS2h+rFiZddee607d6riYZqvRO8pzU2i
OFmhY2yzzTa51thGWy+ogWei5szUdZd861vfUv/wzw4fPvzfzc3Ni6XBqnm9
Kin/wqZ5ebRGjLSh/e7tt99247XBOX+LPRdh/RsuR8vlyZbHWn8gfBzFmvV9
8BhaZ0R62upVa5ozSO0ChXzsSPtcEm1zlfifh/Y5nes77rhj6V/+8pclai/Q
fMhqW9A7uwrPntrQSqH+39K2r9a17yP+wzqvzTvMQcZuN7ZZnad9vxfY1t3Y
FiWOdXWGfrt629fYQ8z98rm4Gjs453bwc6Xbs7ak84P/8f3Pq8a+/vrri2rs
uOclvD1scdOLe7xCpvL/pptucjWf5itUu7P9fbhMV78r1YWvueYa55xzzmlX
F9Z29e9S2aC/wXxo7kCbTq35n+X113kx9cUFDzzwQJ8rrrjiwiOOOOKktdde
+3Bzm/6og3ZoTPthTDskph0c0w4KmGJkir2dWeeN+7KmdntXXxtN9tUk4thp
lx+lfm/7iutzU1OTuz5GofTVx1P9ToNjMovlp9j8w9LYmsc4+F1QYxc7vj7b
4+v9Ii0Rzp/VEtJO6r+peRi13qWd30UaQP1shwwZ4vYFLXR+lT/1SS13fmux
/JTG/s1vfvOKeQcM32WXXa5df/31LzV1PBs/vtA3G1u2sWbFnW0c+hLfbIza
xqz/VufFsmU2tm1j3Yp72zj4v3yzMXIbM1f8/ArfrvTtKt9U773Gt2t9u863
631TPL6nb/W+NfjWaGyisZeMPW6sl7FmY4rZ3ec/p9IYZ9vxXffdd995N9xw
wzyj/z7u6PVKykq1BRX7jdrDpCcVt9XzIt2t75PQ2OXyZPVvofY19Z/WeJLg
MUzZ5MaF//73v7cz6VitJ1TIv460zyXVNlfO/zy0z6ldwZyTVlNHesi8D67c
bbfd/rThhhv+zrwL1L/jNGP/Z+zXxk6t88ZUnGLs5Dqvz/UvjJ1o7Od13jjo
4439rM5bS+tYYz+p82LTR9d58WeNoVb8+Ahjtt5h6wEqj7esK49i32eHvlNf
lTfrVsbDbR+zSf6zXucf/5U6b/zzAD/f3UscZ/06T4NvbuxLxr5Y52l1zWWu
cd+bGNuozuvr/fk6bw4z/Wa9Oq8v+7p1XjuA5mxTDH6twN/V67zx4XX+72xf
8SHTp09fs1Bf8VrThFkb/mfvf141dkNDQ6u0YiXnLc26ckfSj5sflSlqBy6U
nsoqjVHSeu12u9XG2q7+WqoLq2y0dWGNu1Zd2NYxwnV1m35HNXba93nW1196
oqWlReOx/2Ds+8Y21/1Z7Wekk6Lzqvq9q6/XWmutbYrNeZan8iMYx540aZK7
TmQ47qR+kuqjqrUyKtHYavvRPuHt5TR2JccvpyWUltbICG/XvG56ryiOpf4e
4WNoflH1g62knpz2c94RYzx2O75Tt3KO37MC85SqrnvU22+//V/z3pw1duzY
ZeGYZVZWqC0oXP4VMz0DGiOs51brxmiN2+BzEbzvFOOuVGOXy5PV2PounKdL
LrnEzU/wGDr2/vvv78afw6b2skK+daR9Tm0NJ510UsHnTsfXsSppgyjn/9Ch
Q932uUL5Vv6qrbGfeeaZjzU//qOPPjrc3OcnGfu2P0dLrY7JFup3fkboO7UB
qK/6NnXeXGbS6lo7Uxp5s9C+0sxqB3igztPh1UT5Vf93PSfDis15VujapR2P
iZte3OOVM/xPPz/jxo3LpcZWHFF9jDpynsudl6gW9bzHtXvvvddtU1d9tdB2
9Rm36+LJgmV6sC4c/I3qwoo36XO4rm4tqNWr6X/U65H09dcamYMGDZpl7sNz
jH3P8dajQWMnj9buUnu7q6+Nbe0UmFdc8++l8X6M+9yX2m41tv1Ocwqee+65
bdvVfqh+nepPGX4mix2vWNuY6qHqPxr8Lqix9Z3WptTxbVrh4wfj2EH/FMtS
XVn9UDWvk+Jg2qa/Wp9MfSbtmBO9l+S3/b10gcaN6l2menK565F1eV3J9X/8
8cfR2B6qb2uspPpruuvZB+Y7W8fYAcZ++8knn/Q0Gnu6uSeW2H7jca9jlHqU
Lf/Cv7dtQYWOp/iq9GRwf9U91H9c8Wy1EYX7wP/mN79p05DSi9K/Nr2wxg7m
KXhsmyc9+zqdpp62iv8ak2zKonYaW31CNE477P9DDz3kjuEudP7CbXj2r9XY
wf3tuyNq21yh90Yl/mtuV7XP6Z0U3F5p+1zU+6fS/ZWfO+64Y9nAgQPfmz17
9ghzf//J2JHGvq6yyb/3a64u7aMx3meGvlMf8ucL7Kt+ZOpbo3j5eaFtqvdo
bPWXk85ghSjOrfHdekY0jr3k2l1pv2uivIuSvBejHl9xuEJ9x/RZ7zL1Q9F8
TxqHkpX/epfaeoos+E5L2v8sr3/O4thta3cNGTLkHb3DO1o/qqaVu67lTGW2
5vhUG7KeB/u96rWNjY1uHyvNz2K/7927t1tf1mfNOa66sNXnwbqw6sn6rpjG
DqZTTf+rbXpfjxw5corqjMb2dJhXPE3UD9bV1/pPIY1daRy73PYs38/BvuLa
R3VRzS30ta99zZ3zX3Gy0047rS12VSzOFLRycezgd7aebL/T2JJSxy9XV1Z5
KA2t3x977LHOzjvv7LbJaR4jvY80h5HeVWpL0DbFpTSPhOaP0O8q6Ste7fKz
0O/R2C7yd3ydp6/b6u2ON6+4Lbe1JvYRxs411mDuxydNebLEzn8W57qXu05B
C5Z/dp9wW1D499KMagfS3Nf2e40R1hwoeubU//q6665rO77qibq3i8WxVY5q
bIZNP9g+VShPevb1DOk50Rhnm47m95bGVZ+AcH1U9QPlyR5Dz6/6j2su7kLn
uyMaW9+pbU7zktjtOq/yzY61LhTH1r42jl2J//pOx7HzqNlzGmyfq/T6V/Lc
V/IeUZvjoEGDlowdO/aNFStWDDT3tObh/JlfH9jCb1eq5feA5lL7bYHvn6hr
34dcfbDVT/ybvmnesa0C279S581VtkYquawM9al318bWfwpp7Oeffz6ReyGu
lSuTstq/mMaWSUPYd1eW/odjeGrD0lyHWZ6vNK5/zuLYbRp71KhRL2t+jqSu
fSkLxmaCn5PavyOm9gXpXZW9WiNS4ybV1qs1NPTsBPfV+rvbb7+927atNvlw
XVjznNq6sNqSwnV1m3etD2/TURt2Nf3P0sL+mHO4/LbbblO9+tfGdndYHztt
Pm8/lIpjhy2P5afqupr7V2OZk06/Ev/17Bc7fiX+q23v0UcfdevWxfInra1r
Zvsh5bn8RGO3ofGSR4W/9J/X7n5fH52fw4z9ztg1b7/99j1GXy3UOl7BccBx
r0up6y5tJr1my79ddtnFLf+uvPLKtvKv0H0mba59tQ6V1rFSG5TGCWu7+n8p
brvDDju444aVrvSv1ZBhjT19+vS2clTPSjhP4fYpaXZpScWhpZPVTrXXXnu5
v9d6XjpGMFauY6h+8N3vftfdR2nrd/Kz2HNgNXb4/IX7wMiCfWCKtc3Z90e5
eRwKXZOw/7omGuOmfTQPWqH2uSjPfbn3QLn3jHnHfar2IfPsP2Xu415+/Fr6
ei/HW6NuPf+er7l6dADFfMNxbKE+4ROMPVvnjceW5j4rsF1jy5+q8+Zj0Dxo
U+q8seA1Q5Q4dtwyPW4ZU630rcYu9Bu1b6n9P+v8Bfv3ZHV+s7j+OYpjt3tu
7rzzzvFad8zqnqDJr6Cmi6v50taM4fSj+KN6qtoaVGfVehal9lfdVm3e+qx2
eJXvKgOj5k+/selU2/9qXP/Ro0e3mnM32q9X79yF69WZEyWOHdfyWn7if3b+
Mx67NM7KNbI/4/f32dHYgX775L+WLVs2ctSoUe8MHz58ieLFSdw35e4jfS7V
FlTq+Gpn1twC4fHk0onq02z7lVWSnspR2/9ZVihPhfKvsvu1116ryHdpU/Uh
qdS/jp5/aXRpcWn9qOlF8V/nV+/7UusrVHL9O+K/yv7x48d/0NLSsvCtt966
z9y/1xo72++foWd/c79cqnV9XQmab6zUfOGas2zbupXrZtcMpeLYSZcZqn+r
XU33pNre7Lry48aNc9uGDj/8cLdPiebiN++4tt+pv0ehdeXtdr0L1Z6nfAfX
ldeagfadofdAsTXlbTp6T/35z39229g0F7LS0VhTu6582H+1Y6k9T+M0lCdp
C+Uj7LfmWtB8i5XmtZDPP/rRj9x+Ktqmc7jFFlu46wfouNIzyrv6t1RyzuSD
4gPKh9pTiuVD423UD16/1TbNAVGJBopjOYpjB8d2fd68jwf0799/sXxIWnNF
3V7OoqYftrj5wf/k/NffhoaGJeZ5v9rch8cY295/l9fcM9MZKRXHTltzZW1R
/cH/7P0njl0Zvtb+jN/nZztj+xg7wdjFxvpNnDjx5b59+y5RjDfp6xg3vazz
g/+15780/YgRI5aYZ32WqQPcqPYhv53oQL/dSO1Ha3cSfZ1rovQVj3svSddp
XXmt3W7X4Xn44Yfb1pW37UVql9PYB7XF6f92XXnbVqS2MPVFtfOVSPdp7TeN
B9U6gfpO7UvqS2PHaeiz5lew+lGaXmvmBdcU0u/V39q2fWkuoYMOOsjt81oo
ji0dK+18wQUXuJ/D87BY/4NjPeRjubzKTjnllHY+a+yN+q6o35yOpX42v/3t
b9vGsYbnsQj+Xv+Pes6UT/U3UtuEtqku/8c//tH5+c9/nuq7JEcaezX//aX3
2AbG/tHc3LzQtn3H0YBpW9r5w//s/Nc8KwMHDpzj1w0PMbaVf0/W3DPTGYnS
V7wadbE4v6+24X/0/KOxK8cvw9fw+9Jq3WyNszna8dZn6Dlt2rSJRme3mud5
eZTrUm1NFt6/XBw16fzgf7r+q8+A2n+MJnlZ7UHGLvHry/v47UUb+e1H1AFq
gDQ1dtjsfITS0MHvta68xosEv5Me1Lry6u+iWHF4zmb1Q5VG1jpw0otKV/sG
99GYFs11IJ2ptfisZremWLXVzlo/Xro+fBz1a9Ea4sX6itu5YvS50FynMjsP
i92nVF71uZjPiitr/Lc+h8djBzV2EudM42o0T2VwDivNb9GzZ89U7g1rOdPY
wbnFzx85cuSrL7zwwqdhHaR2EPs3+LlaGjPr/OB/esd7+OGHl99yyy1P+33E
NKf4F42tWe3no6uQpsYOm663/Rv8nNT+tW74X94fNHY0Qm3lGqO9k99Webqx
K0ydcczw4cPnmnfsUht7SdpqrS0o6/zgf+XHM8/3R717926dMmWKnvGefnvQ
0X770Jf9uugatVhn7qpkrbGlA8Nr/Ggeg3C9JLyufKH01I/5jjvucPVioXmH
g9pW8euJEyc611xzjXPOOee0rSlv1wfSWn3qg13oOFpXPkmNXS6vpXy2Vkpj
J3XO5Je0umLiWivCzmeRpuVFYwun/Xqbpz311FO3mfJ4cdoaLG2NWOsaFP9X
7tPc3LzkjTfeGGTuv18a203jFqhTZ0eWGjtsQZ0V/NxZjldr+cmD/2js6Pg6
O9h3XONt9vt/9s4EPK6q7OMRKKKAFQVrBaGAfOzLxyKIIAgIIqAgCrIoqKCg
IoiI+IGyCbjQspQmafa0SVrovtF9b+le2qalO6Ur6b5kKW1Tznf+d85JTm5m
5s7N3WYm/9/zvE8mM3c5773n3nP+Z3vVNXxWWsno0aNXlJSU1KGfIar7rS3d
NCn9D97QPzh48OD63r17b5F1/UFo/5H2kGoPOle1D3FseBriRmO7LWPs2yeK
waPXCjS/g0ZETAFoO6y9H+98Oq48+lq1tjV/13oR46Qx3xjHROw+rP2PdQYx
FxwaG/sg1jzmJcfzB+mDxo7nP8aKJ9LYehv0/WJ9Qnw202qaqW3j+Wz3Hxob
Y8X1d/AHGhuf9f7x7om+ZmZazeOb6dA+Yd46fMQajQ899FCb77/T9rAM09go
l/Wc7DukvYLx4rhmpmaym1cN6fZ3p/N73d7r8eh/2/zH+uzyfYZx4s9J+6Gq
Gx6Vrs9LNhJPY2OdnHjvO6/lp9vjuf3dbm7T57Q//Q/ef2rstqPK88+qvkDM
uUHco5+I2DrNPWS9eIask9bKv43J6jA0mp8G/YL2nREjRqxScbnQ7vNz1Q50
ujk2nGV/+uFnP7ZTmZAoBo+psfV39rjy5npgMMyj1nHlnfqPodURu86eHqxV
pjX23LlzrXnX9vWJMfcBceVT6ceGzsW2mN9s+v+b3/ymRT+2vT0Af3Va8TmR
z4gl+Mgjj1ifk/Vj6/21L/p+JLpm5v3S6UCfP7S6eX6Mucf4ccwNb8v9T2X7
DNTYh6nx4tdjvPiwYcPmSx/2JtNYTha0pot6e/rvj/9Sz9VNnDhxgsx3f1Tl
7QmqjpiWz0s24qUf22+N57S93+W51/NH6b99/ZJs8Z8a2xtGmY7n+XjRHN/r
99K6ynrTu2VlZTtGjx7dYK+fRWV+1LuifM9kov+Yb4m4o5h/GaRv1dXVjWjX
kfpklmiOy3WHav/potqDWOanMck0tt9lgFuNDW2Mz1i/+09/+lPTcaAdEYsX
84bxv9aL9vNBL6L/GLEEsea2WW9FzC3oRcSb198htp1e/xsGzazjyo8bNy6u
/2Y/Nuzss88Wr732WlM6sEaZjrOH7+L1ueu0ao1t+qx/x1paV1xxhaWf8X9+
fr51DfT2Zp0B3yW7ZtjGSWNDj8NvxC/Qv2Nu+he/+EUrLX68y+L9nkkaGxjP
D+bD3C+vc8/c3Nxa5PW2aiwazclQxsv3466DBw/+Vz0rF6hx4odF/Uy0J5Jp
7KA1pNvfnc7vdXuvxwvTf5SHWO8z2/ynxvaOobP12PEzpV0j7VfSXti/f3/F
oEGD1pWXl9frOCtu8kW8+6zrb37ki2QWr22pLen18lymcjzEu0Hd2c35MZfR
3CeVdjS36UWfMjQB1nK6/fbbrb4srMlstrf44T+ON2bMmL1Sn+yUmmEk2ndU
O89NIvvicmU1bjS21zIE2gwa2/671tjmd3feeaelsfEZ7zHkZ6e48vb0aI2N
Zw36+YwzzmiKKY91uXVMeTyb2N4eVx7n03HlobHj+a/7sfU5sS4Z+opxLszv
xnrpWM9N6+d4acVfnVb9nfYZx8Ez3aVLF+tcenuMEz399NOtuFwYm2jX2Ngf
58b+9muG37XWt98vc6w41kPHOuOYw41YaziGuTZdEHWSDNTYujzGmB3EJXxm
8ODBixG3MGodRstek3msTj4r01S7NtcTjwgvGtvJ2vL+9PI+Dnt7+u+//9TY
/mGMHUfckFOkXS7tTml/k9Zz+vTp8wsKCuoSjetzo7mgqdDm46QHU7Fk52vL
+A2nfOklPYnMPk4zFdP76GPrdjSv6TUNehrrOZnX8+qrr7bWCvbLf+ikioqK
ugEDBmzYv39/pcxrL6r2HR2X6zjBudcZQzyNjTjPQZQZXssk5D20U2G97Lac
D3Go0A8MfZns/NDaqCdhbHRb/IeOxZxvPWbci//wGfHE9Rxfu8EXvEvacs1S
LcOXL19urT+u12UP8v5nqMbG+uKd1fidX6MvOz8/fzfWR4mnj1Ce6r/xzNwm
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
Y2qNnaxNC5+hl9EXbv6OsjBR+1y8fUxfk7UdYtw62g7Rv67TZd4fM12mYXw7
xs07PfeJ7r98fxyQ77DaRYsWvYf2GWlPiFg89ktU+w3HhmcByTR2lO3wbTl/
umlS+u/eMlVjA2MsWWf1nkQ95+WpU6fOxBgyvMO1bjLNq4YMe3u36Xcy+p98
f7R1d+vWrWHBggWYp/WcaB4jjjFkXP8kQtK9Hxv1T/v5sV4XNK5dB+O3adOm
WfFooA3M9KKNEPEyMCYHuvX4449vtY4m6rjxNLY+P+rgGEdqT2vnzp2b+rHj
1b3NuCPa7Noi3n6pamwdY8N+v3TdOhV/06X8ZD92OKiy/hDRPHb8dNX3eL+0
FxobG3uNGDFiTXl5eR3acJzum11jt/U5QNL0mG1T0z3zzDNWu5p5HqxjiDX7
0CdtN7Sl6XTYNWKydDgd03ze7P4l09gY163b57DGGM6P51G3z5n7xBt/n5ub
69h26JQu83quXr3aeh+25RlFmS7zRoP0Y3tNTc1wtMuo9pkb1TPbWTAuV9YQ
T2OjfdaPfs5k7ex+lEF+a1C/00P/3fs/ZsyYjNXYQL0Xj1JjeDFf69fSuo4d
O3ZR9+7dG/Q68H6aV43n9/GDTk978h/6+vXXX29YunTpeBGbp3WftMsEx4in
BYk0dhTvT9PQt4v6JfQ08pDeDmsTQUOjrp2o3xjxK7Fmkf4Oevuee+6x4tbo
bVHXxTpIixcvtuq60OzoV9Lzk81j6/RivCjWINL9YvgNdf/jjjvOmrdtT482
aGWMQTV91v3Y+JxoP2gBvZ/eV++HNOP64LtE/djo+0LdWvuLNZ7gL/oJS0tL
rXWRTI0ddfkJYz92uIjW8b0QW+QOaU9Jy5f5b47UnnVLliz5NNm991Nj29dg
QL7AewB51sz3WEMN87Tt55k8ebI177ktbVdOx8Tntmhsp/a5ePvoa4o0ptJ2
mEq69L54B2AdN7fPOc6BdpfBgwev3b9/f2+0x6h2mWtUO40eG059nSW46cd2
slQ0lBcN6Pf2Xuow9D8Y/zO5HxsY48gwzucb6t35kLTXZLk0W76v65x0dtD9
oulu9H93k76WeqBO1tMwluw/0h6Q9h0Ri4XNdu40wE0/dpjlh9adI0aMEGec
cYa48cYbrXWGUf9duHChtV0ijY3xNlg3Cfvdeuut1pzDBx98sGkMKrZB/sQa
vehHOu+886y4Vqh3Qy9jm3j92Kjf33DDDdZxsWYS9sM6Rah7Y8wn9LC9Xx1/
E2lsez+2/XrZNba5n5ux4viMZxL+fvvb327lbzqVn+zHDh+jzNdt6zq+16PS
uq1bt2404nuNGzdur33ctTa/NLa9XQ2m29XQr2tf8wzrgnfr1q0p/6BucsEF
F2BtzTanwzwmDO8TfUz8n4qWRTsY2vX0b07tc/H2sfuq2w71/3iH6bbDVN8D
2tBmgDZGN3GEly5d+inaW2T5MA/tL6odhnG5spxkGjtZGd6WMsVtGeK3JvSj
DKP/wfqf6f3YQDTPzT5GtU1er8YCvTZjxoyZeM8iDkWqmgttr/qv+Tmq7f1O
L/1vbfPnz2/E/Ovq6upJhr6+WrXbdKS+Tg/c9GO71VxuzTyHWT9GXRPr86xa
tcrV8aDBsR+0tXl8HA/9QnZ/MJdbr1+czH+seYz9UacNyn8/rzfq0VhP2X58
u79hpSfZ+diPHQ1CxI3vdb0ax/ZyXV3d2/K+bOzTp0+9ucag+UzpPtd4czjw
N9W2JrNdDeOrkUcRjyqe7kT/LdqNsA3avzCX+sUXX7R+a8s6B/i8YsWKhMeE
2TW2PoYeN4LPy5YtE6effrp1DLwrkG57+xxiZv373/+22uewxjhilul9pk+f
3tRnr8+RqO1Q62SnOSNmerF+HG47rlEqz/nEiRM/KSoq2oV46qgHqvYXMy4X
28yzlHgaW48V91pmeC1j/NakYZfh9N99+rJBYwNjDJmeq3W96s/+ryw/xsn3
9q4JEyZ8grLDrQYLW0P6vb/d6H/zNtAzmKtVWlq6ff369Zir9Yqqp+l1Ro8R
XAclbUimscN+35oWb6y2X+UH8ili9WA9Xf0d1uRDbFmsbxRVeRNU+RmWv374
T40dLaJ1fK8rVF0G8b2KJk2atBhj2aBtU82Xdku0vanN0WcNPY55w4mOYx4P
6xFCp6Zy/lQNx8Ta+6mcP5H/esyf3hZ9E9Dc+D7R9bLvYzdcJ1wbra3dXn83
hvJcaqp6aR/X19e/I2IxNx9Q9UHG5WoHJOvHdnqnB10Ghl1GBb09/XfeP9PH
ipvE0dkYN/4raS81NDT0Qbs24jagzdbUbE6azEmjOmlCt5rXbXrcmtfzZYv/
so7zaUFBQd2QIUM+3L9/fy8RW9/s5yI2Pvwb1NfpRyKNHcb7M5klmqPsl40c
OVKceuqp1hxljJlEXNk77rijqV8nav/D9Deq8jOeUWNHjzGOraPqo8T6p7dJ
e1zam0uXLp0s3/N75L3an4pOs+eLRBow0ZwJp3zmVlN6zddez+e0f7r4j/YN
tKeMHz9+CdpXVDsL6rVXCltcrqjzLAkON/3YNFrQli392BrRek0UtGvfJe1v
0vKqq6unYwzRoEGD6j/88ENfNJ/fGpHnD/b8GOPWt2/furKysu2rVq3CWLLu
IhafC2vnYA2dLoJxPNKSIPuxvZoZmzoIQ95FnxLi1+DdFbW/QVsm+EuNnR6I
1vG9EM/zBjWW7d8yLw2urKzcOnDgwHr0OePeBaWx7RZE34ifGtjv7aPwf9as
WQcw12vJkiVTVXmO9pXbBeNytTvcaGysN6D/mp+jKk+8psft/vQ/eP+zTWOD
OO3aF4nYXBzM0X5l//79FZMnT16Itu0BAwbgvWyN9Qqq35QWvWGOAObIyXpW
bUlJya6ZM2diHZQSaS9K+620H6g68gmCc7XSFjcam+UH/Q/af2rs9EGV++bY
cR3f6z6MUTp48GDpyJEjV2EsG8ZVJ7qnbjTtli1bQu8H9pLeMPrFw/Qf5fqQ
IUPqER9969atQ0RsLZWHVPvKuaq9hWPD2xF+9mOnY5kTptF/7/5no8YGovWa
KGep8hZ92k9Ie1WWuRWyfv5+VVXVVqyLhnVIobdRbkapB7Xex1/zc9Q6NdP8
Rz8D5ryNGjWqPjc3t06+azdLnT1L3vsyVRY/pvqur1T1seNYHqc3fvZjp1v5
EXb5RP+9+y/zHjV2mmEby9ZFNMf3wlilvPfff39mfn5+7cKFCw/6oUm9mt8a
2Ov5MsV/rOFYWlpaN2zYsA8RH13E5nrdp+p5ZlyuQ1ietx+SaWz7O9xubSkD
zO3d/u50fr/LaPofvv/ZqrGBrV37GNWnfYFq47xXaW1orZKtW7eOnDhx4gd9
+vTZ9tZbb9VVVFTUDh8+vB51KKwjgrU/sG4KYnRg3CLW4MFf8zP+mp/173Zz
2t7+u93cnt9t+rymN2z/sa4q2kagp6dNm9Y4ZMiQul69etVKXV0r67+bp0yZ
slhq7qEiNkcLa5o9rvL7tSo/nKjGPDCOR5qTTGOz/KD/YftPjZ2eGG3sR6mx
Sbg3N0n7vbSumzZtGllWVrZj1KhRezGvKFGeiGdBa2KvGjhojZwO/ss62UGM
DZ89e/YctJuI1nO9GJerneKlH9vvMino7b2WeenmTzb6n80aW2Pr00bbJuZp
Y/z49apf+xFpz4pYjIfiAwcO9Fu9evXkmTNnLhw7duyqgQMHfiyf062VlZXb
y8vLd8qyeZf+S4vOcA9gVVVV23F/cJ9kfl45Z86c96X2nijvZR+lq18VsfVP
fqfKYa2tu6j8wL7rDMGNxnZ6H2db+UH/w/efY8XTF6Pc/5wao3SmtOtELG7E
i/v27asaMGDA+t69e9chzpS+p2H346abpbP/aA+RZfze4uLinevXr0e9tauq
v90iONeL5MTX2PPmzfOlzHCyoI/vVkN6LRPpv3f/24PGBkaf9uGG1u6i3stX
qnf0vUqH/VXa80qbYf2MfGhvERtjXC6ttzSMTaqgRWb6HuB+lIqYlsZ9elPa
f9X9e1LdT+RtzLfG+neYo3WSoLbOSEQcjY3YrOlQfgRtXv2j//77T42d/ojE
66A+La1w6tSpCzFXbOnSpSnpvHTWoGFYVP4jpkBlZWUd4sM0NDT0lffuJRFr
L0G7CeYCMi4XSaqx/S5j7OZUprjdP+gyjf4H73970dga0ay1db/2l0Ss7fM0
VUe6XMT6t7FG2p3SfqHe49BqGGf2RxGbx0tLD/ujui+/U/cJdd071P1Df/Vl
6r6eKmLrn3xJGOWwyOK8no2IJBo7aI3m9viZXn7Qf+fzcax4ZiBar4N6sSoj
UIa8uWrVqgkFBQW7p0yZsi9R/s0Uc1svzARDLBDE2Zw4ceJiEWtPR/sI2knQ
XsK4XKQJ4UJj+13GBH38dD9epqU3DP/bm8Y2Ec1a+7OiWW+jLfQk9d4+R9Wb
EP8B83ygv69UdhUtcsN9QBmL+4L7g3oT7hfatHH/UJfC/dS6GveZ659kMMKD
xvbbgn4/p7vRf87HziRE63VQUb5jbRbElXhl165dA/r06VPTr1+/eqx72lbN
GvT2fmtsp+2j9l++3/eh/WPZsmWTRGycGtpFblPlvV5LhXG5iIXw0I8dtbFM
zT7/27PG1ojmvm08mx2kHaHK4aOVPkMb6XGqXO5s2NdokZq+D53U/TlW3a+j
RbOm7iCoq7MGkUYam0ajxs4sROL4Xrh//5BWMnbs2OVS09VjXc0gNG22WVD+
b9u2TQwYMKC+qqpqy86dOweK2HqlaA9hXC6SEJHBGpuWfUaN3RqjHNa6W9uh
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
QgghhBBCCCHEH6ixCSGEEEIIIYQQf6DGJoQQQgghhBBC/IEamxBCCCGEEEII
8QdqbEIIIYQQQgghxB+osQkhhBBCCCGEEH+gxiaEEEIIIYQQQvyBGpsQQggh
hBBCCPEHamxCCCGEEEIIIcQfqLEJIYQQQgghhBB/oMYmhBBCCCGEEEL8gRqb
EEIIIYQQQgjxB2psQgghhBBCCCHEH6ixCSGEEEIIIYQQf6DGJoQQQgghhBBC
/IEamxBCCCGEEEII8QdqbEIIIYQQQgghxB+osQkhhBBCCCGEEH+gxiaEEEII
IYQQQvyBGpsQQgghhBBCCPEHamxCCCGEEEIIIcQfqLEJIYQQQgghhBB/oMYm
hBBCCCGEEEL8gRqbEEIIIYQQQgjxB2psQgghhBBCCCHEH6ixCSGEEEIIIYQQ
f6DGJoQQQgghhBBC/IEamxBCCCGEEEII8QdqbEIIIYQQQgghxB+osQkhhBBC
CCGEEH+gxiaEEEIIIYQQQvyBGpsQQgghhBBCCPEHamxCCCGEEEIIIcQfqLEJ
IYQQQgghhBB/oMYmhBBCCCGEEEL8gRqbEEIIIYQQQgjxB2psQgghhBBCCCHE
H6ixCSGEEEIIIYQQf6DGJoQQQgghhBBC/IEamxBCCCGEEEII8QdqbEIIIYQQ
QgghxB+osQkhhBBCCCGEEH+gxiaEEEIIIYQQQvyBGpsQQgghhBBCCPEHamxC
CCGEEEIIIcQfqLEJIYQQQgghhBB/oMYmhBBCCCGEEEL8gRqbEEIIIYQQQgjx
B2psQgghhBBCCCHEH6ixCSGEEEIIIYQQf6DGJoQQQgghhBBC/IEamxBCCCGE
EEII8QdqbEIIIYQQQgghxB+osQkhhBBCCCGEEH+gxiaEEEIIIYQQQvyBGpsQ
QgghhBBCCPEHamxCCCGEEEIIIcQfqLEJIYQQQgghhBB/oMYmhBBCCCGEEEL8
gRqbEEIIIYQQQgjxB2psQgghhBBCCCHEH6ixCSGEEEIIIYQQf6DGJoQQQggh
hBBC/IEamxBCCCGEEEII8QdqbEIIIYQQQgghxB+osQkhhBBCCCGEEH+gxiaE
EEIIIYQQQvyBGpsQQgghhBBCCPEHamxCCCGEEEIIIcQfqLEJIYQQQgghhBB/
oMYmhBBCCCGEEEL8gRqbEEIIIYQQQgjxB2psQgghhBBCCCHEH6ixCSGEEEII
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
65vCfL0TlP66tK6u7vuVlZUvSb02UtoGqal3y/93jxo1qm7evHmNCxcuFIix
t3LlSrFixYoWpr/D33hmbuPH9m6P53R8J3/cbh+m//j7wQcfYKyomDt3buPI
kSNre/fuvVvWtXZJDf5Rbm7uoH79+v1d3uNrVX37dHXfj1FtLNTapAnROi7X
d6ZMmfJ/8n2wedq0aZ+09d0LQ91f/zU/ezlmJlmY/uNeyXdAzYQJE/4P91DY
4nvxmc8O3PRjO9WH7NtHXV90Or/b49H/4P2nxo4eN/3YfCbof9D+tweNbeu3
/pLq0zxX2lVSkz2el5c3XpbN2wcOHLhnwYIFjZs3bxYHDhwQjY2NcU3/hr/x
zNwm3vb23/0+vpNFnb6w/N+wYQN094G+ffvulmXfVnmfh82YMeMh1b99jtLa
HQXnbLZ7bO1vnVT+uL6ioqIY7W2rVq1q9T72WzM6Hc/r717Pn2n+457JZ35X
WVlZKe6luqeM75VFxNPYfs3Hdmtejxd2eui//+ejxo6eeBrbr/nYfCbov9vz
ZftYcdG8JnBHpang49XDhg17Jj8/f2lpaelurJeze/fulDVq0OZWQ3vV3Olm
Qfi/fft2MXv27H09e/bcLe/7vHHjxj0u88GVIjY/AHM2j+JY0vaJoa+PUu1v
F9bW1t4u88p7vXv3rkWMqHjvz3TTvG7Nfny7OZ0vE/zftm2bqKioqJVae4Z8
B/xUxOaOnKjqX9TZGU4yje23+V3/8np+pz4c+h++/9TY0ZNMY/OZoP9h+5+t
GtvWd63HfV4uddbDUmMtRlzVZcuWRa4nYYi3pv+an/3aPt0tTP+R/+X7trGk
pARae+aqVaswZxPxfk7hWNL2h9EGp+NyXb5o0aI/9OjRY93o0aMbEJdLvyv9
7md1q2nt5nQ8J/N6vkzxH/cQ91LWf9fJ9/+juMfqXjO+V4bjRmOHXR+Muv4Z
dXrao//U2NHjRmPzmaD/QacnGzW2rV8KfZRYX/YGqakGYtznwoULDyTTaF41
n938Pn66Hy8T/MdzNGPGjH0yP+woKioqFrH52hxL2k6I0waHefrXDBw4sCvy
hNTZjXg/BjlW229NGnS/cab7j7Y1WQfeMWDAgNfU836GiK2DyHUZMhQv/dh+
jJPIZKP//vtPjR09Xvqx+UzQf7/9zzaNLeKsCSzryw/KevOK4cOH1+kx4W40
Wtia0Gs/td+aN5v9xxhy+Q6ulflj/vr16+/mWNLsx9YGd7yIxeW6qbCwcGRx
cfGejRs3xn3fuu0Xdru/Vw0Z9PmywX/cW9zj/Pz8UXLbW9S9P0HlBT7vGUaY
Y8W91seyrf5K/1v7Q40dPWGOFeczQf+d/Bk/fnzWaOw44z6vGDNmzN+lfto2
f/78/alqOifzun/Qxwv6fNnmP/q0p02btlfWzz6eMWPGH2W+uUxaF9VOw3p3
FiFars+Ae3zpypUrfyXfEcuGDBlitcElel961ZRuyw+/Na7X37PF/9raWjF4
8OA6+bwvl/f+12quyEkqT3DseAYRT2NjbkA21O+Crq/Sf/ZjZyPxNLaEzwT9
j8T/bOnHNvqvoa+/Ie3qAQMGvIp1ZbG+dFB6jZY9tmrVqoOyjNwu38d6PTTq
7CxBvR/MuFwYG3712LFjn8Wa87NmzdrnVUMGbW7LB7/Pl23+456/+eabW2T5
9zzygsoTXJMhg0jWj+13/crr8dw+X1Gnl/67Px41dvQk68dOtzzWHp6J9u5/
NmhsY+wn9NCpqC9NmjTpBVl/qsXYQOgn9FW2VXvpffW8eKfjOW3v9/G8bk//
mw1xth977LF9U6dOfcbQ2RxHmsEY7wcdlwtx+24oKyuryM/P3/3hhx8mfOe7
Maf3b9QWdPoy0f81a9YI5IHCwsIq5AnBNRkyCjdjxZ3yo9v6Uyr1Kz/ra27P
R//D958aO3rcjBXnM0H/g/Y/08eKi5ZzK6GHvjNq1Kh/v/jiiw2bNm1KS03n
VoPaza1mjtqfTPMfcXWx7tWsWbP+qsaNn6h1dtT5nbhDtFyfAffx4h07dvwM
8duqqqpqEdsp0fuV1j4MazL06dPHWpNh48aNP0MeUXmlo2A8v7Qm2Vhxt+ZU
X/K6v9vje00P/Q/ff2rs6Ek2VpzPBP0P2/8s0difV3Wiy2bMmPHX3NzcnRgf
3lYN56TpvGpEt+b1/PTfffpWr179qSwvtyxbtuxhVefurMeQRp3nSWqIlusz
YHzLFbNmzXpc3teN8r23t6118VQN/Wn6r/nZr+3T3TLJf+SFiRMnNkiNtvG9
9957QsTieyHPfElwjnba4qYf220fRrz6kv4bRH0w3fpw6L97f6ixo8dNPzaf
CfoftP+ZrLFF8/xKjO27cPfu3ff26NFj4/Llyw9GqRGD1rRha9T26v+cOXP2
5ebmLpd56zY1vvhY9mulP7ax4YjNdJa062RZ+6Z8P+xcsmTJwSA0n98aMerj
tUf/ly1bhvheOysqKnogz6i8cxzHjqcnXvqxnepfbutbbs1tfTPo89N/7/5T
Y0ePl35sPhP032//M1xjH6b6qLBWzS0FBQWz4Y+T5sI10n/Nz23VcEGb3+ml
/6kfr3///nXl5eXDRGyu5mlq/CjHjKcptrkjiMl0gbyPPyoqKhpXXFxci/kj
+t0Xdr+p1/Olu4bNFv9rampEaWnpntzc3Al79uz5kWB8r7QlWT92W+pDQVrQ
9ceo66dRpy8d/KfGjp5k/dh8Juh/2P5nqsa2jRG/etSoUa+VlZXtQfma7prR
b02YaZo5k/xHnB+siTRv3ryn1fjRE1S+S/tnpL1hGxtuxeVasWLFb6RWWjV0
6NB6qZdaaDInzeb2d7vZt7eb2/397lem/4l/x3OPPCPrzKuWLl36WxGL79VF
5S2OHU8TvPRj+21ht1mlm9H/BmrsNMBLPzafCfrvt/+ZqLFF8zpGGLt7YV1d
HcaI12CN2LZoMrfmVuOle3rof3Krrq5ulDp7tcxrPzHGjLMvO01Q74NDhC0u
l3yvvSTrPNvmzp2734/3f9ga12355VXj0v/W28+fP38/8pDU26+I1vG9Dkn3
sjLbSSeNTaNRY0dPOmlsGi2DNTbG7SEO9g29evUaPGrUqLp00WRuz+e0vdt+
Xvrvv//yPb1n0KBBxTK/XaPKTvZlpwGi5dzrzqI5Llc/jD9Yu3ZtaP20Ttvv
3r0bMZmt+HD4HHY/cdT+B33+oPxHHurZsyfiew1Qc0bOU3mNc7Qjxq6xEa8z
VY3td351ez6vxw+7jYr+O5+PGjt6vGhsPhP032//M01jqzo1ylWsc3aJLE8f
QJylLVu2BKYRM83ov//+I4ay1GybZJ67S8TmZ7IvO2JEy7hcqM9csnnz5nvy
8vIWyXK1dseOHW3SVKm+X1N9v2/dulXcf//9onPnzuK73/2u+OY3vymOPfZY
8be//U3U1dW5Ss/ixYuxFp/1edeuXeLQQw9NOb2Yi/6d73xHdOnSRfTr188X
/5csWSLmzp0byPV12t7J3JaHyc6HvCSvGeJ7LZTX8V7kNZXnGN8rQpJpbK/P
s1vzu77o9/nof/D+U2NHTzKNnSxPXHbZZaJv376BPhNoW0eZne7PhFmuB/FO
uOSSSxDHI2l69Tb2a2ZPm/l7WO8Ee5qS+Z+hGht9B6egT6FPnz79hg8fXp9M
H8FX/df8HLUWTDW9dnObfvrvj/+VlZW18lnJY1929IjmmAJo68BadFdMmzbt
KVnH+XjSpEmfoJ7tVYP5Zb/85S/FXXfdZWli/d2KFSvEeeedJ/7617+6Kh//
9a9/iT/84Q/WZ8wZ/sUvfpFyOnJzc8Udd9zhq/9metya0/mDvj9uj488NWXK
lL1Sx9XIPPY35DmV9/TYcb4LQiaextbtVmHnL6/nS7f00H/356PGjp54Gnvh
woWO9zyexvY7D9rbxdP1mTDL9SDOp/VzsvTobXQ9J17aYG7qQX5db6f+DfN4
Gaix9fNzobR78/LytqB/JkgNZ9/e6Xevx0s3DUv/Y5+XL18uSkpKMC/7DjUm
GesfHRL1M9GesI0N76TeWdfLsrGn1JC75D36NKryKZ6hvn/EEUcIezs6TOo0
qz/bTRrilX2plhf/+Mc/xFNPPeWr/240dlT1Bb/Pt2rVqk+R18rKygqR90Qs
vlcnjh0PH7vGNudju73fXvOT2/zmdXsno//h+0+NHT1e+rH79OkT6DPhduxZ
VM+ELteDeieY/diJ/LHrcHvaonwn6PuYiv+ZpLGN+jXK1GtmzZrVFWuJ26+j
3xrQaXu3/aZOx/dq9D8Y/1F3k3XrPWvWrHlK9WFhTibXGA4J0TIuF+IJXFhb
W/vjoqKiqfI9UIuYS6m+O/0o31IxaOwjjzwSa2fF/a2kpKRpbvayZcvErbfe
Kk499VRx4YUXWjZgwICm7W+++Wbx9a9/XXz1q1+1xptPmzZNfOtb32r6feTI
kdZYcPx21llnibvvvlt8/PHH1m833nijOP7448XXvvY163f0oyc6n/Yf6fvn
P/8pLr74Yuu3m266SZSXlydMz8yZM1vtg+9lvbNpH4y5xn74i7HyV1xxhdXH
P3Xq1FbXB+Pr9bj4MMzN/d+8ebPo1asX4ntNlXnwdtXmy/heIZOsH9vp/trN
j+c96PeJn+mh//77T40dPcn6sZPlCZSl6MfeuXOnVUah7PnhD39oae/LL78c
Wskap3zLLbeIiy66SHzve99rocl12Yay9cc//rG13wUXXGCNY9N1E/sYY/z/
5z//2dKTKDOvvfZaMXny5BbHmz17tpWOSy+9NKV04JiPP/543GPCMHftqquu
str9Uf7juKgvPPnkk1b5jXOeeOKJTeU61pCJd+2c6iswxHJBOf+///u/4txz
z7WuydixY1tobPRDm9sgPeY2OIau58Src5i/w5zqIE7+4744+ZZqPzYsAzV2
B2lHSru9oqJi1rx58w74rSH93j8qTUj//fd/woQJDfJ9NkTmv1vUOFGOFw8B
0TIuF+aJXFpdXf1w9+7d144YMaJBx+VKR8N4cMyBfvXVV63yKpEGQHn873//
2ypz8D/K0S9/+csCa03osuPll18Wv//9763P5nsemg994igb8D/ag5544glx
zz33NO37f//3f03lSCrnQ90AY8u3b99u/Y9xHGeeeaZV5sdLT7x9MMbouuuu
E08//bT1/7Zt2yyt/+CDD4o33nhDfPDBB6Jr166WzjavBdJyyimniFTG/Edl
uG4jR46s79Gjx0fvv//+72WevEzlTcb3Cgk3GturmfXxtmgyp/29Hj9oo//O
6aPGjh43Gts03Y+NMuroo4+22njxGb+hPRvrqfzkJz+xylp8t2DBAtGpUyer
HEY+QJl3zDHHWNuY5TD6XaHR8NmuzaDF0SertZ3UM+K0006zylgzHTg2fndK
h3lMXa6bx8T/0PsdOnSwxldv3LjR+g5t8agPFBYWxi3X4xm2/89//mOdB2lD
WY76AzSs3gbnuO+++5rShvVDr7/+enHCCSc09VHrbXRfw7p161psY/YZx0ub
/Zo61UGc/Ne+JasbpdqPDcswjX2Iqrvg2fl1fn7+duQzv7QejeZkWPuspKRk
HeYpiNjaZ1/iePHgMPquzbhc1wwZMuQ/sj6zY/78+QdSrSNpvYa/5me/tk9m
o0ePFg888IDVXvrFL35R3HDDDUJqM6vNHL+jPHjkkUeayhltaNc1x1SZ46TM
sgVroR133HFN/dawDRs2iO7duzf9D40NvQ8fUH7jfOYccfN8WPscfd5oSzf9
R1855nXHSw/2gX7Wa81pQ5mJ8gl/cV7c1tLS0qbrqdsH8LveB+l84YUXfK0j
B3X/Zf3tAPJiv379XhWM7xUqYWpsGs3JqLGjxw+NjcNAu5q/n3TSSU3ztbVB
uw0aNMj6rPcbNWpUq2Oj/xnrjJplNvrJoX21jtOGshFt421Jh9Mx8RkaE8dF
eW1u89///lf8+te/tj47zQFLpb6ydOlSS/vb6wPQ4occcoi1XSrb2DW0PW3m
7051kPXr1zv6n4pvWdyPrcvTjqtWrXqxsLCw1ThxGPzSf83PiXST2+3d7h/0
8el/eNuj/ibL0T3y9z/KfHi5Gi/OcjQAbGPDO6s2jRuLi4uHFRQU7DE1WRAW
lCaDDn7nnXfE1Vdfbb23dXs0ykWM6erWrZt49NFHrfFhX/jCF6wyWx/nlVde
iauxYdClKF/QjpuXl2fpbvO8aMfFNvp/+/l+9KMfWedDe0BRUZH42c9+5uiP
Wd6hDRj7xNseY9hlOWPVGz7zmc809Q9oe/jhh63xXTpdGKuG9iw31z/K+4+y
G+WRzJfDVf36AsH4XoETT2Mj/4TdhhZ1/gtje/rvbNTY0ZNIYzvdY1Njo1zV
OlVv/z//8z+txk2jvNN9n1oT2/UdDGOhn3nmmRZlds+ePa3+0ueff76FQd+d
ffbZTekw2wyRFqQDY6RNf3Q67Md87rnnrL8oo3FMbI/6x2c/+9lWaZT1qqY1
UVHPQF9xsuuVrP6A3+V1t8Z2x9sXY9SgV1PZxrxmelwA0qbThX4K/btZb7E/
47oOkor/GBeZzLds1Nii5VpHxwwZMuSdMWPG1LVFo9nNrQZz2t++vVeN5/Z4
9D9Y/6U+2jN16tR8EYuVexLHi/uPiBOXa82aNfdJ7bikf//+dbr/1zR7nclu
9vLCax0rlf1RRqB9NN72KDsxZyg/P98az4R5QRgz3atXLys2BXxE+7d+r8MS
9WPr46KNVl4fS0t/4xvfEA899FDT+UyN7XQ+aPSf//znjv6b5V2yfTAnbPDg
wVa9AeWb/XqhrR7j6XFNMO8J7Qte70fY9x/3A3mze/fuH6xatep+0TK+F8eO
B0Cyfmy/NVemaT76H77/1NjRk6wfO9k9NDW21mDmNtC2KCfNe661Lb7DGOmc
BBr773//u1X2aj2I7THG7JprrrH6pO0m9U2rdJhaH+kwj6/TgXnHyY6p6whY
I8buv6kxdT0j0fUy6w+9e/e20gO/UX/Q/fgVFRXWnOZ4zxh8mDBhgrUN9Gu8
51Fvo+s5el+znwFm1oNSqYM4+W+vG2GsvfYNdSNd1ptpSvZOyDCNredif0k+
CzPjrSMUz7xqSK/mpBmDNvrvr/+TJk3a269fP/RX3arGhR6Zhs8Mxq//VlqX
JNtcIO2noaQmRdRzbo/L9R35nnpGlh+bp06dui9VDeXWgqgTYu0O9C2j3h9P
A2LMOMqMgoICax6VvU6H8dq6Hxum25fx2Syv0eaK8sXcH2OeMH4ca7Dgf1Nj
ozzG+ez+6PNNnz5dnHzyycI+z33cuHFWO7ve3tTY7733nrWPfZwa5jBhLLjU
nS00tt1QBkJfo8zV9QH79Upm6XL/Z8yYsU/WnzbLe/8s8q6wxfdKw3dFxuJm
rHjUGs6reT0f/Q/ef6xrT40dLW7Gipv3UGtsaOV4/ZzJtC0+m2PF7XkM84uh
10w9CP2Iedr282D9T8wFNjV2onTocyAdqEPgmFg7LNEx8VlrTLv/6AOGxtTl
erKx4vHqDzDMFdc6FPoMc6rtdYg1a9aIww47rGlOGrax1xnMbZKNFbfrXac6
yOrVqx3913Uxu2+oGzn1Y8d7J8g6U6ZobP3cYNzosTK/foQ6W1Dvcy8WtqZE
fxXWRsB6C/FMz/1vqyVaZz9d/A/b8F6oqqqaL/PhXSIWwwv1O3NO9s3SSqUd
GtHjonle2iRp8Z7no6R9JO2uENOTFBE/LtcN8lkvlfpxl9aKiepITprMafsg
jgcdjLU/sb6GOVcav2M+NsYfYX0UrC+OtTHN8WmItfWVr3xFlJWVNX2H9/+9
997bomzBbyhDUAZgXTJ9fsxpwtxv1Bnwv6mxMT8L59PaH3/t58Na5FifVB8P
x8E64CjHtH8Ym4b06PSZ++A7lK/4Xc/zStRHAEP/O9YAxVqe8XRSGPfLr+Oh
bMrPz98lr3MvNd7lHJF6fK97pH02rOcuk3EzVtyvNhTzd9QPscatnrsX73zo
/0BS8Yymkr/MOr6b9HnN7/HGxSTb3mzjczqfuW2iPiCn9Aftv9f3DT47aOyO
0m6P6FFpN7gZK25+l4rG1nEu9D3X2laXbcjX0NOYx6aPjWNC9+EdYX9mUDd4
/fXXm84B/QeNjLZ5nQ57nk6m9c1j6n3MY2Jb1EOcNLauZyR6JnR9RdcfYGb9
QX/3/e9/31oHxnxnQL+iroL2AHyHbfR6ZPr9cNtttzVtY14zbGPWOezvLXsd
BKbrIL/61a9S8t/0Tf+mfdPryJjj053eCRmmsfV6Z8fJ67zdXL/O67sx2bvW
7fG9bu/WoLH18xOE/3aNnW7+h33/MU9UvkfWy3z4K2kXi5brnt0ibR+yrLSf
RPfEWBwubaG038T5rbu0/uEmJzG2seFWXK7t27f/VD7nMysqKmr1nOVk99Ft
HcvJ3OabRMeH3sI7HnoazxLWJ0HdHGUhyhBsg3c2yhqs2/3Tn/5UnH/++db6
mVi3E/vpudUrV64Up59+utX+jb5rs7zGWCfMxUJcCsT1wHsB8510+sw1z1I5
H6451i/FNigXMZYbZaHpv5keaG9zH4wTQxqwhrheOy1evUEbtBHOgXF1ftzP
qO8/NBXybo8ePebIz3eKWHyvE1UZdniCcva5nNi7Y0i4T2Bm4qYf26mccLr/
8fbHc3zUUUdZYzHj7Y86Odq/kVTzHZbs+PHmUwRRjtn3R10UbYGpHs++fbLr
Z9aD9X6pXN8w/W/L/bfvn0RjQ1/PlPZpTqwNjQSEm35s0+xjxe35IdlYcfO5
RT82yj9oPRwT+ra6utraz96OhbrBt7/9bWsblMcov1966aUWx7PnOa31zfxn
amz01dqPibJdH8PsxzXNHCuuy3UcQ7epm+eDH/b6A8bYmfUHbId1u3Edzjvv
PGt8GtZ8xXh27AtNgW0wNltvgzoDtkH/g97GrqHNtM2YMaOV3jXrINDqqIP8
5je/aVpf1sn/eL7Z60ap9mPDMkhjH6o0NtJ3nLxPu+1tx21914b9Lva7rNAa
Oyj/MWdUPw/p6H/Y9x/rNRcVFW2R+fAhaZciPyqN/cOcmL4+IO3BaJ+YJi6U
tk3a8cZ335ZWI+049f+XpN0q7ffSLopzjCukPZYTG3t+kt8JVPoazzdiHnWR
dtns2bMflfWV9WPGjGnQ/VJO+c5rPnN6zt2a/fjQmYjJiPVKdDu3fXv0aaPc
QDmQLD1oizX768xzob8f47RQl3XyP5XzQRdjrRe9TaL06PPpfVAPMOempXJ9
0Yetxye5fe+m4/3HPZJlbD3ysryGfxKx+F4ni/jxvZ7LienrXdKu8/s5y0aS
9WO7fT6d3vvxDBobYzQw5yNefvrtb39rWY7S2Knk30TtUH7nVz/8TzV99v67
tviTCf4n0NhaXyMfzJD2lSifmWwnWT92kHnCfG6hwRArC2OeU8mzqFMiPpSf
z4Q+ppdnAmW+Oe7anh7UH6DBUf4nOx5+Rx1Cr3Uab1tobXMbJ/+T1YH0/cA9
MGOjuPEfYwJ13cjLOyHDNPYRqp/rK6+//nptutSdvTwHfhzPSWPr/Ib+Lbxr
0J6k467/5S9/aaobo83CHgteahxLY+v+tnT0P+z7j/6p/Pz8HTIfPiLtCtTt
Pve5z90ms+n+nPSsH/8zp7lfDGNQl+Y0j1m7RNqH0v4r7RFpE6QV5jSPc+8t
bZi0B6Q9I229tO/5lTClr1EmdlD6+grEQOrRo8eO6urqxiDvY9jvgXQ7frql
D2PM0I6djf4jL0v9t7Oqquo19c7oouqAetz4czmxOvhH0s726/nKdpL1Y3vN
L6ncX2hsxLPDnAxzngYM5UTHjh2tel6OMVYc9VLkc7QnYfwHylvMk9D7xRsr
jv4g9M2gnw3foQ6P8ZAomzEeBmsZYFxLvPRirthNN91ktb1hPAr61tC3hfgD
Zt0Y5T/GSCbb3mxn09vr/5OlydTYqG/o/ZLVS3T9GefRx4WZx9WG9YKxbjDm
mmD/u+++26qzB33/7WbX2DKtX85p1tfvSDsi0gemHZCsHzvId0KyMVp+5bGg
tw/imWjv/meqxs7Ly9uTKXXboI8HjY1yHmWc3bR+Rlmq466jfQvfoQxC2Ym5
F/jfjBeP/+3x4tPV/7DvP65Pbm7uLpkPH5N21XXXXfdLWX+AvkY52ihtr7IG
aZ/kxMaHweql1Urbo2y3sl3KdirboWy7sm3KtirbomyzsgUOjw/GjFdLu1Pa
S9Kq1Pfoe18m7bvGtvhuqLS7pZ0gbUNOy/nc35c2Lcm50Df+gbIlyhYrq1a2
SNnCz3zmMwsPO+ywBZ///OcXfvvb317arVu3kUVFRXsQC8mv+xmVpbtGTBf/
0daOsV/QHHpMXTaY3X+8d4uLi3e//vrrQ9S48a+gL/uQQw55Lif27oC9mxNb
y0EbnpcV0qbavqdJk2Va2dFHH92rc+fOlTL/9HnjjTfqUu3H9uP+omycMmWK
NR9CzzvUv2PdYPRv6/WGdT82ylysP6TLZow9ROxW/bu9ro7xIOecc06LeY4Y
A4m1BvUxMIYVcXHRD2RPJ46HdVluv/12Kx4tvkM7BNYOgr7Xcyq1Dk51e/t4
SaQJaxHFS5Opsc3PqdRLnHyF7sd6RmZan3jiCSsecJjPNz6b64oPHz78nMMP
P1zr6zppZUbe7aeea9igqJ+jbDKZt0plfaJc5oneJ510UlVhYeGGVPuxvZj5
3LLMp//6cwatK95CY6O9MJGf5jo+5udUr5Pb/b2ez+vxoLG//vWvW/M07Kbn
X6LcwmXEGFJzX8QVwloAWB8JseDRhm2eE+U/YsHLfJK2/oe9P66R1Ng7ZT78
s7Srr7322t/L9zq0tYjINqbwCF2cE9Pj63JiY8PBVTmxursdfD9abYe2gO8Y
vx0m7Ywk5/mam7QjVjLqWJgf893vfhdrVu+PN46alt2m2/Wy3ZC3H3vssX14
b6Av+4orrjhfPgOf+PguaFcGrXbEEUdY/cgov15//fWEc0uCMK2xMV4S8QPM
c2N+Yb9+/VpobIyDhA6153eMG9Njxcy6OtZTQL8sjq/rbNDc0Jh6vV59DKzV
E09X6vOjHd7+G9ZjQxrx2dTYbrbHZ/TV6zSZ2+s0JdPYOUnqJeZxzfor1h7C
cfEZ7XKIn4A6jt4fbbRo4wj7+Tb7seWz/U+UbVE/I+3NUF89/PDDrXUQ0Pby
1ltv7QxDY8PwfIeZ36hp09//TO3HfuONN2rt+scvjefWotbk0NgY053seDru
un1fvZYeynKMD4t3fMSCN8eKp5v/Yd9/XMvCwsLtMh8+rurKJ8h63r05sT5s
9DdflRMbE/Y5aUdKOzYn1r+LtbyPVvYFZR2VfVHZMcq+pOzLyo41jgP7irJO
6vtUQHv5X43/MWd8bU5sLPhQZRhTPkbacrUN1nDT/dI9c2LruJlrqNuBBj9T
2lnKzlZ2jrJzlZ0Hk9r6gs6dO1/0zW9+81vvvPPOb0aPHt0Da4gvWLCgMazn
l0YLw5CnMf5l/Pjxb8p3xnVqvPiR8r38g5zYeBfUEYul3W/YWzmxuRsv2b6n
SZPv3V/KevQDp59++sOXXHLJH730YzuVI/F+1xobnzHuG7Hn8Bnjvk488URL
c9v7saEXMda5W7du4tFHH7ViwWMtHR3zB9tDIzzzzDOWdsR6QGY68vPzrX7e
5557roVBu5999tmt/NLnR9uw/TfMDdPrGGLeIrQvxrTr7e3+6+3x2dTKTmlK
prGT1UtS8RVpefLJJ611iO+//360f7dpPExb7r+9nmEfKy7zJ8pMXE/0Yz9u
5F3MyypU9ljUz1E2WYcOHX7ZsWPHX3fp0uWh888//w9lZWWr26qx/cgTYVrY
dWv673y+TNXYWPMM72rtm2lO19V+Xbya03UPentobMRtc9LYOu66uQ3WIkRZ
hjjymA8V7/zoD0c/drr6H/b9x5i2kpKSLXqsuLTOyJ8ym0JnH8yJjRFPxxgd
faX90fj/FzmxtcX/R9npytBP/Q3bvl2k/VzalJzYeFZfEC3jdV2JdeTWr19f
LK/vtpEjRzbY+0Uy2dKtPKL/4RjyMPKyzNNbkbfVWonI6yeqfI/y9sacmM6G
3e3X85XtJFvzLIz8ZmpsrJd78803W58xH/j555+3PpsaG/OqMef4rrvusuLl
YtwztC36h02Nje0ffvhhS+8iFsGLL77YdE70z15zzTXWWuZ2Gzx4cKvnTWtm
nMfuP3S8GWvA7MeOt1ZQvO1TSVMyja3rJaZpjZ2qr/pYmNeO9KFO9NBDD4X+
vkmw5ll+TkxnY17WqdE9Le2DZGuetdcyyP5OoP/h+Z+pGlu+g7dhPJBfOtmL
pnO7v9fj282useMZxlGhLLN/rzX2vHnzrPoC1hcx04Q4VYgFj37sdPU/7PuP
NWsqKyvXynz4e2mXi1jc20NVVtU6G/Ovb4nuiYkLNPYjxv8YP74oznZYd/xp
aTfkxNreTeAnxqaf7EeCRPOa4lhj+Xxpt0l7ct++faWyDrW2d+/edXqdHbf5
yO370+3+Xs/n9njZ4j/e29AlWO8h2/1H3q2oqKgbNGjQ2v3790NfP6ny+Hki
Fo/AXFtc62zUx//hx/OV7STT2EE/XzCUmeiTxmdoaIxZx1hu9EvrNYW1xsXv
mGOMdcTsx+vcubOlsfFZjxXXv2OeMWKz6jJe1tmsedH29E2dOtWa5233W2tm
rAtm9+973/ueKC8vtz7b+7ExVtzuP9ZnwbxwfNbbm2myb480YR63ua3W2Pis
Nbb9emuNjbZ9fVzT8P6Ar/iM64++a9NnjNnFGABzHbog7r+93pBAY+P51job
66lcHt0Tk/0k09hhvBPc1CWDPp/XMo/+e0/P2LFjM0Vj6/jYVuyuqqqqNVgr
J5Fv7cn80Nj4jPVZsG6L/g3loo4Fn6wfu72ZrEN92q9fv7kyH/5WtIzdpUF/
7wBpHRJk56h4O6elxgaIJfIH43+MbZ8n7VvSzs+J9cmfaPyOz1iP7XN+JEg0
ryuOvuwTpF0i7afS/iqt5/Tp0+fJemkd2jXcvj/dvl/t5nQ++/5u389OZtZL
27J/PDP7kOzHD9p/9OFBX2D9JqyRfPLJJ1tzLtuqidL9/iPPIu9OmzZtPvKy
ytM/VXn8BNWHfZitvNU6+1k/nq9sx0s/th/5y+zHhiE/Y27VnXfe2XQsU2Mj
BivW1DbTiHjw0NCYu6y31+On9TEGDhxolcNat2Nc+uuvv950XrTlQIua8UXM
8+M5hz4227VkHcp6BvV4QLMfW29vro2BNc2xvZ5Lbo/HZU8T9DPShHls8TS2
3ibZ+Dp8dvIV1xXXRpcRMKwvg/YO+BLk/bdbkvjYWmdjbdNLI3tg2gFe+rH9
zBPx4tW5Pb65TaJnyEuZl8x/jNfEWv1dunT5//buBkyOqs73+Ii4XK/usyog
q8sjrHdZQHdXFlF3BfdhUeGqD6gLil5RvO6iPCi6Cy6rd7kr4gLXKK6ASWaS
mWEyk5mEJBNCSCSTTGICeX+RvJFAXgh5IcS8GZKeJAwTzj2/7lNMTaWme850
dVf3zPfzPP9nJuma6jpdp+qcf9epOq8/g6HYGEj5dZ+HnsMQvBb+Tq7YY7Sc
+z+IKrqOHeTY2ePG7vNlVo/aKn0Gwc+4CC8zkOXLHb7bF11eOfZb3/rW7LNA
40JtT5BjR9cfbst0TGnudT1/JTxfvHLvUubYxZa/3Pu/o6Ojq0NfahjzdRsX
2XhHJMeuVMqxvxP5Pz2j7Ckby2ty92P/1sYdode/6f6vs6b3Waj/kORGhfLs
t7rxs3rm8jU2vmfjga1bt86tr69/2fZlj+c7H/qG7/kz+n6+5+dC2xtdXmOM
9bzdgW7PQCLcTmv9X/3qV8tWfs39893vfrfPtlx++eVmxIgRieyPStr/CxYs
OG7r7CHVXVuH/8vV5Wtc3X6Pq+vR/DoQvU8D/YjLsVWvB7O/B1OfwtexFbpu
q80K8j/9X3AdWbmh+otqTy+88ELzhS98IftctHvuuSd7TVbXvtW/jF7HDtat
+ax0vKh8mkP+0ksvzeaaarN1z7LWE7f9Qc6u69J6X93frfm49Lfh+5bD17G1
vK57R5dfu3Zt7LlEEd4mlTG8Tf19txf+7j+8D4Lr2Po9ut4PfOADfcqqn/ru
Qv+vecCuvvrqbJ9I48lLvf+jkSfHFh3rjBUvsbgce/Xq1WU7JwShMaFqX/O9
X6H1h5cJH0Nx6y52/dEYOXLk68dgMceE7/bde++92XkEgtdU1qAf5FueYsqf
1Dmhyq5j/4Hrm5y+cOHCx9rb27PPPUs65/J9vVD4rj/p7fVdn3Jtzb2utnY4
lr/Q642NjUeeffbZRlsPr3fHzB9W4jET4w01fefhCtNz1fL17XX9Ws8wK8m1
edP3vuyz3Od6pY2bbNxnP//Jtq18afLkyV0aBziQ82kpc6gk3t93fYXah4G8
f77vv0tZfh0/6ksHz30KXtM9qXrmU7nKX+r9r+dE2XrapbqqOmvr7r2uDl/p
6vRZ/Vy/xiD4XMcuFEkfz/nWr++99axwXcctZv2670Jzf+Tb/iBn1r91/GvO
q61bt/a7feEcX9esg+UHun3hbUry89V6841d1DIaG65nlKtfnsb+L5Bjowx8
rmNX0jmh0PoHcl3cd/35QuNr9GyDcpf/vvvu65Njl/LzLcf+r6Lr2OqDv8nG
W3Td0J5DfzFy5MjXv7MuJgf0zQmLzSFLnaNS/tKVX/2VUaNGvWzr4I/ddanz
TO9zi1Akd5y/WW2j+2z1bKgbbNxpo37OnDkbx44dmwnGTBZz/iz3+Tgc+p5A
z/FXn1Djp3WdSNdh9FxcXdvRMuonalyp1qHcTctv2rTp9eV1nUjLq58evI/6
xP/yL/9iLrnkEvPBD34w+7yg+fPnv/6+4WtIWlbr1+/KfXUNSN/3awyLnsuk
cSy6dhb0V9XG51u3tmHmzJnZ8WUf/vCHs3+vZz9pjLi2MXwfShC6HhW+tl1M
+5b2/n/hhRc0Lihj6+gG1VVXZ7/i6vB5rk6/mXNFcvJdx066fqQdvuUJXuvv
unh/Ec7JKykGW/5y7n9y7PTlu46dRJ0YSNutCLevA/2bfG1sXNutbQ/abn2P
EG67NUd80HYH677tttteX/fHP/7x7Lrjyq+xMbr/Qs+JUFv+9NNPZ98jupye
O6i5BvR7f32I6Hbo/KxnOGobNDbl05/+dHYuPr2mz0jzEGseRr2vrvWFP8e4
v9dywTx9wfmrv+0I2gaN0Qn3U/QMSvVTSnFOqKLr2MF1rje79vROPdtZ/ZrB
5lKVEtoPSeaI1RbVVH59j65nAdj6930bH3fjPk9L+/gYStyxrjbyj1w/Rfev
Xmty85E/tHbt2kVjxow5snLlyld9+lRp52ThZdTv1X0c1157bfaZRvo/1S89
H0jthn4Pt6lqN4Llda9hcHzoO99gea1Dz0/Qd8BBW6LnFmt+2aVLl2ZfD9YZ
/l3LqZ3XXK4afxY8S1JtjvoBek6T/h2sO2gvg3XrOpfWpzxa85GGt+/222/P
5tlxn5fabd27qp/l2B+l3P+qi6qTqpuqoyY3r9+1ru6e4+ryH1Ri21rNfMaK
l/r4TvrvkwrfnDnufvBqLn859z85dvp8xooPpk5E2+Kg7Q63xVo2X/sd1KPo
30TbWD0/MWi/w+vzbbsLrTtaTp1DlTvrO3b9HtzTET0mwveaDmQ79Df6XkF/
E4xH1Jge3ZOi7dB76Xv3W2655fU+TPSelODvg2ctaNytvi8IvsMvtB2F+ilJ
nxOqJceWUHuqbbz18ccfX9LZ2XnMN0/Svgt+hn9PavlKD8o/+PJPmTIls2DB
At2LHX7e2alpHxtDTWTsuOZGu8j1W26xMcKen6e3tLTsnzFjRpe+56yUPtZA
I3gOkr5Pjb6meXwmTZp0UhtdE3o2cHh7guWV66rNDH9nrNC9ikH7ka+d1vo1
v0C4/LpXWs9x0jNItO5o/hJet+7V1LN8w98H65lJNu85qYxqT3XPpM9zHsrd
Zx/I+6nu2Xaoq7m5eb9t86erbro6+j9dnX0XY8NLp5Q59lCK8LO/SrE8kQty
7PSVMsdWDKTt1u/9td/9/U2h9tun7VYEbbd+H0jfIBrKWTXvfPAehZ6ZPJDt
0Gu6Ph7k10Hoc9H93/o9fD92tKz9/b2utZ5++unZZzoW2g6ffkoSUWU5dvie
7Bs01+ioUaMyqjfhnCkaxeaQvq8Xev+kc1zf96f8g1u/Gyd++Pjx4/eb3L3Y
f+muT1Xk8VLtTO+z0IKx4+fbuNzknjV3d09PT7PNsbc1NTVlSjXOxyd8csCg
zY22FYof/OAH5t///d9j2+h8y9fW1ma/q73rrrv6xHe+8x3z/ve//6T2KtpO
x13rCtrQgaxbZVWbrDZQzzfTfDp6plJc+TU+S8+FSnufFROqc+PGjctMnz79
edVFWyfvsnGjq6Pnh8aGn8I5ojTIsYlKCnLs9JUrx87XFuv3pNvvwbbd+n0g
7Xc0BpNjF9oO/f6lL30p7+ebL8fO9/ca+237gwPajqCfomvi6qeEn+WYdFRZ
jh2+tnW1jR81Nzfv1ljLcuaA5c5py729lD9+fStWrHh10qRJm0xuDp6rbJxr
uBe75NxxrzkF3m7jvW78wBdNbq7h0cuWLVtRV1eXeeaZZ15Lu4/l207rPuvo
a3feeWe2DYhro/Mtr3uSdP+W5tiJhu6birZX/T3fN65dGsi6g9C6pkyZkt0m
Xau++eab+7yu5yfpe+S090ExsWHDhhOqc6p7qoOuLn7R1c1zXV09jXNDafnk
2DqPBz/Dv/e3j32X9/37Uq+f8pe//OTY6fPJsQdTJ6L5cnj5oC3W7/ly7PD7
Kb8O2u+///u/z7apmldPEfyuNnYgbXe4DEHbrd/7a7+DdceVPy7Hjn5eWq/m
R4huRzjCua2uVd9www15zwnKsTVWPPh/9XmCsiof1t/H7RuV79FHHx3QHErB
9mpOsqCf8q1vfask54QqzLGDNvUyjclbvnz5r8ePH3/EJ6fyDd+crdxR6u2j
/EeyY0I11+22bdvabL37R9eX1jOCuRe7DELfr2kMy9luHK6+Z7vVxi927NjR
0dDQcEj3jmifDbSfVsrIdz6OGzsWvPbJT37SNDU1FRxrFl3elj17b1d0OzR/
r+7zjrbNPjn2QNat56eoDQxvn8ac6t4nfQ8a/J/6Gfq7JPo7vu1dsaG6pTqm
uqY6p7rn6uDVrk6ebfLPy4UEJXkdu9LqX6lzVMqffPnJsdOX5HXsuH2sZ3vV
9DPuO2iLtWyQG4bz8nx/U6iNDbfX4bxT46kK5dgDab+jEc6x9X6nnnpq9t7n
8DHxzW9+s8917PB2xOW2ixYtMn/6p3960pj12bNnm1tvvTX7e77r2AsXLsz+
vfrj4bJqXkT1MzZv3lwwx472UxTqp+h7f90bnvQ5oZpybAkdP3/lrhvc19jY
uE+fTdq5HjF0Y9WqVT0TJkzYbnLPE/+cGwuqceLVMC/2kGBOnt/rfTY+4b7z
uMee0x6ZNGnSi3Y/ZdQOFtsnK+XyanPVbqh91T1Ewf/re2W1IXoGaLiNVnkK
La/lLr74YvOLX/zi9fdVe6Pnj6sN0/8F7VX492j7GC6P2iV9Tx1ed/C6nh0S
rDv4t8Zf6VkiwftrDp+3ve1t2fKG23XNYRt3Tb6Un3+x61MZ7OedUR1TXVOd
c3XvE64uMi9XmeXLsaP7Lxqlrk++71/s8sWuj/IXX35y7PTly7GTqBPRtjtY
PtoWR3Ps6N8oWltbs3+jtjiujQ3a746Ojj7r882x9X/hdev/wuuOK384x1Zo
THn473WPt+75iruOHV5fOMfW/+mZ5Xp2erCM+jaXXXZZNv/WMhrX/pWvfOX1
5cN9lujfaxnl21pe91oH5eovx9a2Kh8P91MU4X5K0ueEKsyxg362zl9X2Pjn
5cuXz25ubj7SX36k70yCn3ERXiZu+ejrhaLQ3/uuP+ntofx+5dcxrmcGb926
dZLJPc/oY+56FfPwpMCcPL/XZe78lZ3fa968ees1h9KWLVv6PVcO5HyZdITf
Q+2K7hnS99p6puanPvWp7Hwe+q45uDcoeh07WP6CCy7os7zm7AjWre9xL730
0uz/X3XVVdl7sPSczmAb4r4L198G7XS0/OH2UZ9nvnUr6uvrs/+vuTOUR2sM
1sSJE/uU3/Z5st/pF2rPCu0v3/5RMftfZVedUt0yvfNyfdnVPeblSolPjl2o
P1RtOV25t5fyF14fOXb6fHLswdSJcNsdbYvVdgfLhdvafH+j9jvczsS1sVpn
uL0O553hnDIc0Rw737rjyq/niivHDtanbde1Ym2/5thSvqrvFYL3iOtDBNsR
fE8fbK+er671aB6zc889t8+8npqf9Pzzz89up/LucFn1uv7+uuuuy/abPve5
z2X7GDfddFN2fFzcdgQ/g+3I108pxTmh2nJsccfQGW5snp49dZ/d17uWLVv2
ajXkkEnnmNWWQ1db+WfPnn1s2rRpz7lr2Ne640TXsHmeeEpM3/m9NH/aJTY+
r+/cbDy4cePGBXV1dYeXLFnSnVQfLMk+ZXg+HbUh+k5Y9yn39/f5lo9bv+as
CJ43lnT5tW5975uv/BpXpOd66jv9gfapi23Piu2z9/f64sWLu1WXNmzYsEB1
y9Wxz7s69x7DvFypicuxg2eg+h6vvlHq9Rf7/pS//OUnx05fXI6t+SGTqhNB
vqzf49riuPXn+5u40HOu1X6X4pjQutV+D6b8yvM155f6AMWeE/SZaH4R5cxx
rytXDsaE9/f3+hyD3How54RwP6VU54QqzbHf4MbkqX+jZ7jeauvNxNGjRx/R
eEXfHMs3il1f0ttT7vcbTuXXnAC2Xr1sj/UGk5uv6zKuYVcGc/L8XnrOu55F
d7ONn9p9NrW1tXXv1KlTu+JyvULtSylzvHDOPJD1xc1x67v9lVT+wayv2O33
/XvVGdWdtra2vapLqlPuHHCVq2vMy5WyfDn2YPpDpczRil1fubeH8vu/Hzl2
+vLl2EnUiSBf9qmD4Rx7uB0Tw/2cUI05trh+zdvdNuva4o/mzZu3rLm5OaO+
USXlpJWWI1fa+1Xa9gTr1vdj9fX1mdWrV3fa+vVDk3uuUXAfNtewK4DLs8Nj
x4P5vb6qc0JPT0/TE088sbmxsTGj72+TPF8Xs3xcju3bRhebQ6ZZ/lK0h0mW
X892aWhoyNi2cfOJEyceVl1ydSo6L9cbqqG9HKqKybGTjqTrd7UF5ed+7EpQ
TI49kOgvX853TATt/XA8JoKfw/WcUMU5dtCv/hOTe8bz/7Zxvz2etuu5rz45
lcYjBD/Dvw/09WLXn3ZQ/vjta29v77LHxjO2Xt3njg+NDc0+S7wajpHhxPTO
76XvP841kfm9bBu7tK6u7siaNWt6Bnv+T3r54H7kwS5fbPuWdvlL3R4Ptvyq
I6orqjO27ox0deg60zsv1x9xDqgMlZRjEwQ5dvpKnWMrfNviwf4NUf1RrTm2
mN65fDRn7sdt3Gr7SPUPP/zwft1DF+RM0Sg2x/PNGYtdvtD2F1qe8vuXf8aM
GcdbW1t3nzhx4kE39vhy12YyH3aFMvHze33Gxrf1/dvu3bt/3dTUdHDWrFnZ
7+Aq/TvWUm8f5e+7ftWJjo6Oow0NDb9XXVGdcXXnM4Z5uSqST46t8UnBz/Dv
Sb3u+36+Uez6KH/py0+OnT6fHJtjgvKXuvxVnmMHzz06w227xvLeceDAgQn1
9fW/X7ZsWc9gcrJCyye9vmLf3zenpfz539/mYN0jR4482NXV1Whyzze6yo0P
fTv968oWyrM1xuVM0zu/1zds/KS7u7t16tSpO1taWjJ6dsNgz+2DiXJfp620
qOTyaz4P1Yn29vYdx44da7V15W5XZ1R3LnR16c0c/5UlX46ddH/ON6q9/0n5
/YMcO335cmyOCcpf7vJXc44tpnfM+DvdtYYv2Ljz4MGDj9x1113HbPle9b2u
Wex1Ud+/Tzsof+82d3Z2Hq+vrz9g61CjGyP6WZN7vtEZjA+tHqZ37Pjb3TiX
j5rcHAS6r77uqaeeWjNmzJjMxo0by9a+DMX2YyiUX88WVV148sknV6tuuDpy
vasz73V1iGO/AsXl2DqXJ3FNIxrR9ZX6Gorv8klvD+X3Lz85dvricuzf/va3
HBOUP5Xyz549u6pzbAnl2RrL9yEbX7Jxl21rJzU2Nh5csGDBcZ+cS89MC36G
f087FyxXDMfyaz4Fm3dlWlpafpfJZFps/fk/JvcsPX1vc5bhOeJVJzTOJTy/
1zVubMKDW7ZsmVtfX/+yza1eGeg5t5xRbPtQ7VGO8ttj/hXVAVsX5tk68YCr
G6ojFxvm5ap40Rz7gQce6Pc6dqEYSH+pmP5e0sv7bj/lL335ybHT53Mdm2OC
8pe6/NV+HTtgeufwUb/ob1ye/X9tvtTW2tq6Z+LEiV16HmA15JzFvl/S2zvU
y695+MaNG5eZMmXKjp6eHs3R9QOTe8bRxe57G+7BrlKm7/xeZ7lznMb+aw6m
++w5sH3ChAm/mzRpUte+ffu8zvelbj98/77c21vN5de+njx5cqatrW2PPQdM
NrnnGt7k6sZfuLrCvFwVLl+OXWz9Kba/lXT/r9zHM+X3f39y7PTly7E5Jih/
ucs/FK5ji+n7vCPl2R8OjQ0d29nZ+cyYMWOOrF271jsnS/r1aBTKAQv9faHw
Xf9wKv/y5cv1DOHMkiVLVprcM4S/b+NzkfyafnYVMyfP73WeyT3D7gYb/2Gj
Yc6cOc9pnrZt27aV7HztG0mvr9TvXy3l15z32tezZs16Tvvexp2uLvydqxvM
y1Ul4nJsndfL0X8rFL79P9/1+wblL335ybHTF5djB2PFOSYof7nLP1RybDEn
P1dYedJn3fi/BzZv3jxv3LhxB+wxl9m5c+eAczLfHLHY5dPOUYdD+Z9//vns
teu2tra9ti7oGcI/N7lnCH/axgdsvIv8emgxfceOq//zITdeQd+r/GrdunWL
NWfTypUrXy1FDujbnvjmlMW2D8W+XzWUX/u2trZW37Uu1j63cbvJ3RPyIVcn
GBteRfJdx067v1jp/T/Kn3z5ybHTl+86NscE5S93+YfKWPGA6Ts2VHmSnlel
8X8aB/gTGw8vWLBgjfpZjz32WNeOHTuKvk5abeGbww6l2Lx5s5k0aVJG92Au
X758ha0P9TZ+ZHLPENb8b3qG8Dvddaw3pl2fkazI93A6P1zk+kO32PjZ3r17
Z+h7uBkzZhxVfQmfL5POMcvdvvluX6mXL2f5tS+1T5uamg5oH2tfu33+KVcH
3mWYl6vq+FzHJohSBzl2+nyuYxNEqWMoXccOM33HhmrepctsfNHGbbpmeezY
sYlPPvnk2jFjxhyeMGGCrl1l79FLOwdU6Plbwc/w72lvV7WWX/fhax635ubm
Iw0NDYcWL178dE9PT7OtByNsfNddx/qIyT1D+HTD882GtFCeHT4/XGHj6zbu
Vt2YPn36CxrnoHv1+zt3VlpOG3292O1Nen1plV/70ObWGbtPt3V3d+t5hne7
fX2F2/fB2HDy6yrjk2Pr+nbwM/x7Wn2vYrfH9+8pf+nLT46dPp8cm2OC8pe6
/EM1xxbTO39P8FxhXa+40sbXbPybjf86ceLE+DVr1ixtb2/fPWrUKI0dPvLU
U0/1bNq0yWj+3CRywKRzxkLr8309GkmXp9zl37VrV3Y+nvnz57/S0tJyRPt1
2rRpu5577rmn7D4fZ3Ljwr/v6vwVbqzD2e6czDjRYSJ0fgjm9/pb9z2cnnlX
u3Tp0pW6V3/Dhg2vJZGTFhuVMO6p2sqvfad9qH2pfer2rfbx3xjm5ap6SV7H
rsT+WTmD8hdffs0dR46driSvY3NMUP5iyz+Uc2wxfceOn+H6VZrD5yqXayvX
0jNl644fPz7lmWeeWTJnzpzN48ePPzB69OhsfmZ/P6Jr3TYPPzJ9+vTMY489
1ieC/9PPuAgvE7d8odcLra9QlPr90iy/fk6ZMiW7f5RPP/TQQ122T324ra1t
X2dn53M2117Y3d090e7f0TbuNbl7829w+1/365/Ldazhy5z8rETVCc3d9D19
B7d9+/Y59fX1h+bNm3fct60odU5cbA5c6hw5zfJrX2mfad+98MILc7Qv3T4N
z8vF2PAqly/HjvZ3ojGY/lJ4ed/XC71/0v1Zyl/+8pNjpy9fjs0xQfnLXf6h
nmMHTO/zjtSvOtPl2h+08Ul3XeNmd41D+fZDJve82TbbZ3vs+eefn79x48Yl
a9asWWmP1adXrly5etWqVUTKof2g/bFu3brlNpdebPvSvzl69Oijdr+1mtx9
1g/auMfGHSZ3P/517rr1RaHcmueaDXOR7+GC+b2udHXm3kwm88iUKVN2T5gw
ITv/X3A+Lfd13EqLSi3/3r17jeZqtH2rl7q6uia579b+ye1T5uUaQoq5jp10
/63UyxfbP6y08gzF8jNWPH3FXMdOu44PxWNiuJd/uOTYYnrn8DktdF37HFfu
v3HXNpWH3Whyz8PRNW7N6/Jjl6v91OSelfNzomLiZ26/3OP2k9q3293+0zgF
3Wut71F0v/X7TO76VZ/c2gzR+g4/5uT5vT5mcudFnQPqf/Ob36wfM2ZMRs/N
G8j5ulJz0HJFGuXfsmWL0T6aN2/eMyb3Pdudbh9eZiLzcqVd31A8E5Nj636h
gV5j8OmvFeq/Jb1+3/6i7/tT/uTLT46dPhOTY69atYpjgvKnUv7hlGMHTG+u
HVy70v3aZ7lz4gUmN5bwoyZ3zVN5t8YX/oPJ5d9fdHE9kXoE+0L7RXNaX+32
l+Y+Vk6t69Xnu/16ptvPr48JN0O8nsOf6Tu/l76P0ZxO+p5Gz0p8aMOGDU/p
XoSlS5e+OtC8r1KjUPtSbWH3SbfmXrP76EmTG4t0m2FeriHN5Mmxk+4PFjp+
Kr3/R/lLX37GiqfP5MmxOSYof7nLPxxz7DDXp9Yx+SaTy7d1XL7D5HJu9bE1
pvg8l6sp3kdUXAT75r2uXTvb7b93uP3JNWsMmOl//j/dTzJi//79j40fP37f
tGnTuuzviZ2Pk16+UCT9/mmV/8CBA0b7oqWlZb/2jcnNF3Cz22d/aZjrfsgy
Hjl20v2xUq+/0tdXbdtbjvKTY6fPeOTYHBOUv9TlH+45dpjpvb4d5NzBmHLF
W1z8IVFxEeybYF9pv53q9iN5NbyFzgXh+b00PuJGG3edOHFinD1vbm1sbMzs
2LGjJDntUItSlH/nzp1G+2DGjBnPa59o37h9dLnpOy/XKZwHhh5TxHXstKPU
/btKj6FYfnLs9JkirmOnHUPxmBju5SfHLizU3yYqPNKuKxhaXL0K5vfSmBbd
g6D7E/QcvdErVqxYpvHJa9asOVFszhhtTwq1N77tUaHtK7T+UufMvuVbu3bt
Cc39YPfBcpObN+AOt28+4vYV83INcaaKc2xi6AU5dvpMFefYxNALcmwA6J/p
HTuuOQl0H4Lu89e9/7fauP/FF1+c1djY+PtZs2YdV/8+qZw1Gklc903y/QqV
r1Tl13Oj58yZc0yf+c6dO9V23W/jO26fXOT2EfNyDQP5cmzVk+Bn+Pe0+1z9
RdLbS/nLX35y7PTly7E5Jih/uctPjg0A+YXy7GB+Lz0H4BM2/tHGPUePHp3Y
3t6+q6WlJbN79+7subXY68zR5ZMeR5V0zl/s9g5kffpsW1tbM5MnT35Rn7n9
7H/i9sEn3D5hXq5hJC7HPnjwYFn6Y8X21yq9/0j5/ctPjp2+/nJsjgnKn0b5
Ozo6yLEBYABM7z3ap9v4M5ObE+rLrl9VP3/+/HV1dXWZZ599NvEc03f5tHPo
pMujz1Tzci1YsGCd/azHuM/8y24f/A+Te8Yh83INIz7XsQtFuftzxS5faPsp
f/nLT46dPp/r2BwTlL/U5ec6NgAMnMuzw/N7XWLj8zb+2caDW7Zs+c3YsWMP
L1y48JVirjMXilJf1/ZdX9LbEw59lja/Prxp06b5+ozdZ/1Z99m/xzAv17CU
L8f27b8V218r9fqS7o9S/uS3lxw7fflybI4Jyl/u8nMdGwD8RMaOh+f3+paN
+2xu2d7W1va7KVOmdO3duzd7ri32unKxUcoceDDvP5Dy79u3z7S3t3e1trb+
zuZO7fps3WfMvFzIO1bctz+U9PJJ9+eKDcpf+vKTY6cv31hxjgnKX+7yk2MD
gD/T+zz76PxeN9j4kY1Ge37dVF9fn3n++ecTz1HjctKhFNu2bTMNDQ0ZfYb6
LG38h/tso/NyMafAMFXMWPFC/aViXy+2f1fq/inlT7785NjpK2asOMcE5U+6
/IwVB4DBM73ze2m8cjC/13U2vm9j5Nq1axfX1tYese18T39tw2DCt/2pptBn
pc9s9erVS/QZus/yOvfZnuM+a+blGubyXccutr9X6ij19lH+8pefHDt9+a5j
c0xQ/nKXn+vYAFAc03d+rz8xuTmkPmPj2zbu37Nnz8xx48YdnDlz5lHlAGnn
sIPJ0X2XH0zoGqRtj442NTUdeOmll2aY3Lxct7jP8iL32TIvF7J8xopXW1R6
f5jynxzk2OnzGStebVGNx8RwLz85NgAUL5RnB2PHL7RxhY1v2Li7u7t7/KOP
PrrD5o9du3btqoqct5w5vD6T5ubmzNSpU3fqs9Jn5j67KyJjw8mvkTWUc2yi
+oIcO31DOccmqi/IsQEgOaGx42+38V4bH7VxvY0f2qhbsmTJKs3vtX79+rw5
aPj/4l73zWmLXV80klz/M888Y/SZLFq06Lf6jNxndb377N7rPkvGhqMPnxxb
YySCn+HfB9t38l0f7z/0358cO30+OfZwqJO8f7rv/8QTT5BjA0CCTO/8Xjqf
am6pi21cY3JzTj2wdevWufX19Yfmzp37is7Dg7kuHA3fnLfQ60nn8P29Pn/+
/OP2s3hZn4k+Gxvfc5/Vxe6ze6thXi7EGE7XsZPuD1ZbVEP5ybHTN5yuY1fD
MTHcy891bABInuk7v9dZ7vyqOadusnFfV1fXpIkTJ+6x0bVnz56iz+VJ59i+
r/tuj8ps+z9d+gyOHDky2eTm5dJnc6X7rM4yzMuFPOJy7AMHDsT2twr1x6Kv
R6NQ/60Sr6FQ/vKWnxw7fXE59sqVKzkmKH8q5SfHBoDSMX3n9zrPxsdMbg6q
O200dHZ2bqirq+vavHlz9rw82Pudo1HqseC+y4f/b+vWrWbMmDEZW/Zn7WdQ
7z6LG9xnc54JzcuV9v5D5cqXYxeKpPtvSfc/i+2fUv7yl58cO335cmyOCcpf
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
    "], {{0, 783}, {985, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{595.6692708333323, Automatic},
  ImageSizeRaw->{985, 783},
  PlotRange->{{0, 985}, {0, 783}}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.7064811871674156`*^9, 3.706481190908956*^9}},
 CellID->947089424,ExpressionUUID->"145ff2c6-64bf-48aa-b9e6-f81a8b1997b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monad templates", "Subsection",
 CellChangeTimes->{{3.706509189914254*^9, 3.706509194322814*^9}},
 CellID->583157604,ExpressionUUID->"52986d88-293a-4986-b8e2-e37521f008e2"],

Cell[TextData[{
 "The template nature of the general monads can be exemplified with the group \
of functions in the package ",
 ButtonBox["StateMonadCodeGenerator.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 ", [4]."
}], "Text",
 CellChangeTimes->{{3.706481327888515*^9, 3.706481420227741*^9}},
 CellID->14485520,ExpressionUUID->"c7dc9b95-c11f-4847-9c34-f78639a92d1e"],

Cell["They are in five groups: ", "Text",
 CellChangeTimes->{{3.70648144639625*^9, 3.706481460018506*^9}, {
   3.706481529442477*^9, 3.706481759214596*^9}, 3.706482441829156*^9},
 CellID->792482529,ExpressionUUID->"ec3c36c6-2623-4645-a96c-e48a8347c0c3"],

Cell["1. base monad functions (unit testing, binding),", "Text",
 CellChangeTimes->{{3.70648144639625*^9, 3.706481460018506*^9}, {
   3.706481529442477*^9, 3.706481759214596*^9}, 3.706482442547934*^9},
 CellID->560286209,ExpressionUUID->"b7bc3487-d283-41db-84eb-e68c66e26be2"],

Cell["2. display of the value and context,", "Text",
 CellChangeTimes->{{3.70648144639625*^9, 3.706481460018506*^9}, {
   3.706481529442477*^9, 3.706481759214596*^9}, 3.706482443177566*^9},
 CellID->14522568,ExpressionUUID->"c00b2349-2fa1-404d-8e1a-4f7707ff7969"],

Cell["3. context manipulation (deposit, retrieval, modification),", "Text",
 CellChangeTimes->{{3.70648144639625*^9, 3.706481460018506*^9}, {
   3.706481529442477*^9, 3.706481759214596*^9}, 3.706482443743907*^9},
 CellID->1415148265,ExpressionUUID->"777a462e-de87-42a2-9d48-79bbce2a0e79"],

Cell["\<\
4. flow governing (optional new value, conditional function application, \
iteration),\
\>", "Text",
 CellChangeTimes->{{3.70648144639625*^9, 3.706481460018506*^9}, {
   3.706481529442477*^9, 3.706481759214596*^9}, 3.70648244837693*^9, {
   3.706831789893114*^9, 3.706831794414633*^9}},
 CellID->1015499330,ExpressionUUID->"52829c74-8862-48af-9a7f-a03d6081c633"],

Cell["5. other convenience functions.", "Text",
 CellChangeTimes->{{3.70648144639625*^9, 3.706481460018506*^9}, {
  3.706481529442477*^9, 3.706481759214596*^9}},
 CellID->1444696601,ExpressionUUID->"072090b4-5fb8-49e6-b135-e3efec2987a4"],

Cell["\<\
We can say that all monad implementations will have their own versions of \
these groups of functions. The more specialized monads will have functions \
specific to their intended use. Such special monads are discussed in the case \
study sections. \
\>", "Text",
 CellChangeTimes->{{3.706481774493794*^9, 3.7064819234394913`*^9}, {
  3.706951419462316*^9, 3.706951420010833*^9}},
 CellID->1565660025,ExpressionUUID->"6c8f532e-fdbd-489e-8567-f6a209d92781"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Software design with monadic programming", "Section",
 CellChangeTimes->{{3.706509207957784*^9, 3.706509221041905*^9}, {
  3.707023124102353*^9, 3.707023136173568*^9}, {3.707023204732429*^9, 
  3.707023208692597*^9}},
 CellID->930913484,ExpressionUUID->"006689c2-755d-4b17-9c08-b2a77c6bb5b7"],

Cell["\<\
The application of monadic programming to a particular problem domain is very \
similar to designing a software framework or designing and implementing a \
Domain Specific Language (DSL).\
\>", "Text",
 CellChangeTimes->{{3.7065091634648743`*^9, 3.7065091662533693`*^9}, {
  3.70650925692008*^9, 3.706509334387511*^9}, {3.7068318235084767`*^9, 
  3.706831849606184*^9}, {3.7069519198407707`*^9, 3.706951966244174*^9}, {
  3.707023235605907*^9, 3.707023240462561*^9}},
 CellID->1444557193,ExpressionUUID->"5bbfc645-a359-4488-b7bc-c9140da1cc65"],

Cell["\<\
The answers of the question \[OpenCurlyDoubleQuote]When to use monadic \
programming?\[CloseCurlyDoubleQuote] can form a large list. This section \
provides only a couple of general, personal viewpoints on monadic programming \
in software design and architecture. The principles of monadic programming \
can be used to build systems from scratch (like Haskell and Scala.) Here we \
discuss making specialized software with or within already existing systems.\
\>", "Text",
 CellChangeTimes->{{3.706952260505965*^9, 3.7069523601032677`*^9}, {
   3.707023144453696*^9, 3.7070232130465198`*^9}, 3.70702325938881*^9, {
   3.707023296199701*^9, 3.707023440121407*^9}, {3.70716131653972*^9, 
   3.707161359365952*^9}},
 CellID->1370113416,ExpressionUUID->"b4ba89bd-d78d-46e6-8f04-c5358aa27e76"],

Cell[CellGroupData[{

Cell["Framework design", "Subsubsection",
 CellChangeTimes->{{3.7069498811008377`*^9, 3.706949891112102*^9}},
 CellID->29035931,ExpressionUUID->"69371a83-c541-4a16-861f-2299d8364f00"],

Cell["\<\
Software framework design is about architectural solutions that capture the \
commonality and variability in a problem domain in such a way that:
1) significant speed-up can be achieved when making new applications, and
2) a set of policies can be imposed on the new applications.\
\>", "Text",
 CellChangeTimes->{{3.706950440936095*^9, 3.706950584960468*^9}},
 CellID->528104448,ExpressionUUID->"c11ef198-b192-4ce3-bd91-8c770f6b97f2"],

Cell["\<\
The rigidness of the framework provides and supports its flexibility -- the \
framework has a backbone of rigid parts and a set of \
\[OpenCurlyDoubleQuote]hot spots\[CloseCurlyDoubleQuote] where new \
functionalities are plugged-in. \
\>", "Text",
 CellChangeTimes->{{3.7069506026905336`*^9, 3.706950776192245*^9}, {
  3.7071614253391447`*^9, 3.707161435676117*^9}},
 CellID->301544485,ExpressionUUID->"7bc4d54f-fb04-485f-b5a0-5b0bbd6e2e2c"],

Cell["\<\
Usually Object-Oriented Programming (OOP) frameworks provide inversion of \
control -- the general work-flow is already established, only parts of it are \
changed. (This is characterized with \[OpenCurlyDoubleQuote]leave the driving \
to us\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]don\[CloseCurlyQuote]t call us we will call you.\
\[CloseCurlyDoubleQuote])\
\>", "Text",
 CellChangeTimes->{{3.706950798017597*^9, 3.706951120056455*^9}, {
  3.706951196482506*^9, 3.706951219655039*^9}},
 CellID->2144236122,ExpressionUUID->"246b0d65-66a0-4eab-ac8b-1b50c0245719"],

Cell["\<\
The point of utilizing monadic programming is to be able to easily create \
different new work-flows that share certain features. (The end user is the \
driver, on certain rail paths.)\
\>", "Text",
 CellChangeTimes->{{3.706950798017597*^9, 3.706951036751461*^9}, {
  3.70695112656041*^9, 3.706951180200341*^9}, {3.707161498734734*^9, 
  3.707161567031069*^9}},
 CellID->1253422147,ExpressionUUID->"9db3a1a0-2e6d-46d6-a58c-ecc772d56cba"],

Cell["\<\
In my opinion making a software framework of small to moderate size with \
monadic programming principles would produce a library of functions each with \
polymorphic behaviour that can be easily sequenced in monadic pipelines. This \
can be contrasted with OOP framework design in which we are more likely to \
end up with backbone structures that (i) are static and tree-like, and (ii) \
are extended or specialized by plugging-in relevant objects. (Those \
plugged-in objects themselves can be trees, but hopefully short ones.)\
\>", "Text",
 CellChangeTimes->{{3.706949901844493*^9, 3.7069499251552134`*^9}, {
  3.7069500372978077`*^9, 3.70695043035917*^9}, {3.70695123805209*^9, 
  3.706951255116204*^9}, {3.706952180260014*^9, 3.7069522057957897`*^9}, {
  3.707161596363489*^9, 3.7071616783966923`*^9}, {3.7071617405302577`*^9, 
  3.707161775698661*^9}},
 CellID->1598931206,ExpressionUUID->"b3ce420f-68e8-4b04-839d-edff5a247c91"]
}, Open  ]],

Cell[CellGroupData[{

Cell["DSL development", "Subsubsection",
 CellChangeTimes->{{3.706872664739845*^9, 3.706872685283113*^9}, 
   3.706873182661807*^9},
 CellID->1773904331,ExpressionUUID->"d2208e18-16f9-4530-a441-85ae76c254f0"],

Cell["\<\
Given a problem domain the general monad structure can be used to shape and \
guide the development of DSLs for that problem domain.\
\>", "Text",
 CellChangeTimes->{{3.706867150196405*^9, 3.706867208364211*^9}, {
  3.7068707744707203`*^9, 3.706870777576125*^9}, {3.706872687351726*^9, 
  3.706872688465889*^9}, {3.707161794002687*^9, 3.70716180201223*^9}},
 CellID->494619816,ExpressionUUID->"bdb51217-5168-4f06-9222-714ea37edb75"],

Cell["\<\
Generally, in order to make a DSL we have to choose the language syntax and \
grammar. Using monadic programming the syntax and grammar commands are clear. \
(The monad pipelines are the commands.) What is left is \
\[OpenCurlyDoubleQuote]just\[CloseCurlyDoubleQuote] the choice of particular \
functions and their implementations.\
\>", "Text",
 CellChangeTimes->{{3.706872086505148*^9, 3.7068721012094173`*^9}, {
  3.706872168959156*^9, 3.706872514280245*^9}, {3.706872620460326*^9, 
  3.706872627208994*^9}, {3.706872694068261*^9, 3.7068726972290683`*^9}, {
  3.706949644363409*^9, 3.706949713436949*^9}, {3.70716185002944*^9, 
  3.707161870401224*^9}},
 CellID->166049975,ExpressionUUID->"152518a7-5e09-4162-b046-ec5fe57f741d"],

Cell["\<\
Another way to develop such a DSL is through a grammar of natural language \
commands. Generally speaking, just designing the grammar -- without \
developing the corresponding interpreters -- would be very helpful in \
figuring out the components at play. Monadic programming meshes very well \
with this approach and applying the two approaches together can be very \
fruitful.\
\>", "Text",
 CellChangeTimes->{{3.706871708041275*^9, 3.7068717671484*^9}, {
  3.7068717993671093`*^9, 3.706871910047545*^9}, {3.706871943304185*^9, 
  3.706872075964432*^9}, {3.706872231972639*^9, 3.706872236211212*^9}, {
  3.706872524010369*^9, 3.706872561068927*^9}, {3.706872731060695*^9, 
  3.706872825672639*^9}},
 CellID->1220672372,ExpressionUUID->"5bd6a159-c121-4e0f-b356-9c1edd1affaa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Contextual monad classification ",
 StyleBox["(case study)",
  FontSlant->"Italic"]
}], "Section",
 CellChangeTimes->{{3.706474441150288*^9, 3.706474474999901*^9}, {
  3.706477009152545*^9, 3.7064770355689087`*^9}, {3.7065081512060003`*^9, 
  3.706508152331053*^9}},
 CellID->929276413,ExpressionUUID->"7b9ec493-6d38-40a6-8e47-5b4b8b88636b"],

Cell["\<\
In this section we show an extension of the State monad into a monad aimed at \
machine learning classification work-flows.\
\>", "Text",
 CellChangeTimes->{{3.706485577880515*^9, 3.706485660319047*^9}, {
  3.706508025221594*^9, 3.706508123992575*^9}, {3.70650817097486*^9, 
  3.706508178127046*^9}},
 CellID->1847592307,ExpressionUUID->"06955396-b033-43ac-8c79-3b44cf9306c2"],

Cell[CellGroupData[{

Cell["Motivation", "Subsection",
 CellChangeTimes->{{3.706508417060647*^9, 3.7065084185780697`*^9}},
 CellID->2017851776,ExpressionUUID->"6e6c31f1-c786-4977-a8e4-b7a79656eec3"],

Cell["\<\
We want to provide a DSL for doing machine learning classification tasks that \
allows us:\
\>", "Text",
 CellChangeTimes->{{3.7065091634648743`*^9, 3.7065091662533693`*^9}, {
  3.70650925692008*^9, 3.706509274176593*^9}, {3.706870860638453*^9, 
  3.706870898076637*^9}, {3.706870934628149*^9, 3.706870998900361*^9}, {
  3.707142617448821*^9, 3.707142630413752*^9}},
 CellID->973045808,ExpressionUUID->"7622357c-c3fb-4440-8d00-aade17ab02b9"],

Cell["1) to do basic summarization and visualization of the data,", "Text",
 CellChangeTimes->{{3.70687166111572*^9, 3.706871691828538*^9}},
 CellID->892923151,ExpressionUUID->"97b92905-6b12-48eb-92bc-b5f336b0470d"],

Cell["\<\
1) to control splitting of the data into training and testing sets;\
\>", "Text",
 CellChangeTimes->{{3.7065091634648743`*^9, 3.7065091662533693`*^9}, {
  3.70650925692008*^9, 3.706509274176593*^9}, {3.706870860638453*^9, 
  3.706870898076637*^9}, {3.706870934628149*^9, 3.706870983893734*^9}, {
  3.706871695282451*^9, 3.7068716958792667`*^9}},
 CellID->743673621,ExpressionUUID->"b993be0d-d01a-4696-b231-dfe5befa484c"],

Cell["2) to apply the built-in classifiers;", "Text",
 CellChangeTimes->{{3.7065091634648743`*^9, 3.7065091662533693`*^9}, {
  3.70650925692008*^9, 3.706509274176593*^9}, {3.706870860638453*^9, 
  3.706870898076637*^9}, {3.706870934628149*^9, 3.706871027543973*^9}},
 CellID->567722607,ExpressionUUID->"47535644-3a53-4d4d-8c8e-b82579ce4aaa"],

Cell[TextData[{
 "3) to apply classifier ensembles (see [",
 ButtonBox["AA9",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 "] and [",
 ButtonBox["AA10",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/"], None},
  ButtonNote->
   "https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/"],
 "]);"
}], "Text",
 CellChangeTimes->{{3.7065091634648743`*^9, 3.7065091662533693`*^9}, {
  3.70650925692008*^9, 3.706509274176593*^9}, {3.706870860638453*^9, 
  3.706870898076637*^9}, {3.706870934628149*^9, 3.706871040210738*^9}, {
  3.706871498845842*^9, 3.706871575919366*^9}},
 CellID->444012228,ExpressionUUID->"c13f1342-4071-43ef-bcfe-3f374c2eb2fe"],

Cell["\<\
4) to evaluate classifier performances with standard measures and\
\>", "Text",
 CellChangeTimes->{{3.706871578348859*^9, 3.706871637222621*^9}, {
  3.70714267563021*^9, 3.707142714631312*^9}},
 CellID->7842671,ExpressionUUID->"30f9f7bf-b53c-4b65-b460-fe180e3fec09"],

Cell["5) ROC plots.", "Text",
 CellChangeTimes->{{3.706871578348859*^9, 3.70687163859352*^9}, {
  3.707142678765802*^9, 3.707142717230032*^9}},
 CellID->815269030,ExpressionUUID->"969a6c80-fd82-4e6d-bce9-42597d3c9c72"],

Cell["\<\
Also, we want the DSL design to provide clear directions how to add (hook-up \
or plug-in) new functionalities. \
\>", "Text",
 CellChangeTimes->{{3.706872845484249*^9, 3.706872972959051*^9}, {
  3.706873135692709*^9, 3.706873150620056*^9}},
 CellID->1280919350,ExpressionUUID->"c1cd2266-7280-4995-ad70-e894c7e3ea04"],

Cell[TextData[{
 "The package [",
 ButtonBox["AA4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 "] discussed below provides such a DSL through monadic programming."
}], "Text",
 CellChangeTimes->{{3.706872845484249*^9, 3.7068730242144537`*^9}},
 CellID->2035437922,ExpressionUUID->"93073334-1867-413e-8d02-f242d29e0981"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Package and data loading", "Subsection",
 CellChangeTimes->{{3.706508391183875*^9, 3.7065084009265823`*^9}},
 CellID->190658344,ExpressionUUID->"c67e9c80-ab9e-4263-8dbc-e717d05a28b1"],

Cell[CellGroupData[{

Cell[TextData[{
 "This loads the package [",
 ButtonBox["AA4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 "]:"
}], "Text",
 CellChangeTimes->{{3.706485666474164*^9, 3.706485687859078*^9}, {
  3.706866465343121*^9, 3.706866491661455*^9}},
 CellID->349186284,ExpressionUUID->"4d18722a-e22f-4ccf-b249-5f2d32d6cfd9"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/\
master/MonadicProgramming/MonadicContextualClassification.m\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{3.706485503962178*^9},
 CellID->1848551584,ExpressionUUID->"adc1ceb1-cf0a-49e6-b971-df63cd00ef3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["This gets some test data (the Titanic dataset):", "Text",
 CellChangeTimes->{{3.706485690853361*^9, 3.706485705904024*^9}},
 CellID->960551139,ExpressionUUID->"4732dfa1-22d1-49c8-a6cd-005ba2f84a2d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataName", "=", "\"\<Titanic\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{"Flatten", "@*", "List"}], "@@@", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", "dataName"}], "}"}], ",", 
       "\"\<Data\>\""}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"varNames", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"List", "@@", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", "dataName"}], "}"}], ",", 
       "\"\<VariableDescriptions\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"varNames", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"varNames", ",", 
     RowBox[{
      RowBox[{"\"\<passenger\>\"", "~~", 
       RowBox[{"(", 
        RowBox[{"WhitespaceCharacter", ".."}], ")"}]}], "\[Rule]", 
      "\"\<\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"dataName", "==", "\"\<FisherIris\>\""}], ",", 
    RowBox[{"varNames", "=", 
     RowBox[{"Most", "[", "varNames", "]"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"ds", "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"AssociationThread", "[", 
       RowBox[{"varNames", "\[Rule]", "#"}], "]"}], "&"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.705525695340042*^9, 3.705525716630457*^9}, {
   3.705525748396863*^9, 3.705525754578226*^9}, {3.705533103866844*^9, 
   3.705533138156797*^9}, 3.705562001523367*^9, 3.7055628687110586`*^9, {
   3.7064279612125072`*^9, 3.7064279708408422`*^9}, 3.7064829484121733`*^9, {
   3.70656590083237*^9, 3.706565921237445*^9}, {3.707025837164932*^9, 
   3.707025858684768*^9}, {3.707079017748898*^9, 3.707079020739625*^9}, {
   3.707079081570609*^9, 3.707079090581118*^9}, {3.707080149056017*^9, 
   3.70708015083206*^9}},
 CellID->1348418674,ExpressionUUID->"a08cd3a9-98da-4c38-ae86-81762fb4ef08"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monad design", "Subsection",
 CellChangeTimes->{{3.707142771028642*^9, 3.70714278479704*^9}},
 CellID->477727127,ExpressionUUID->"1d066933-c803-4f4c-b1a2-c5f361225ca3"],

Cell[TextData[{
 "The package [",
 ButtonBox["AA4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 "] provides functions for the monad ",
 StyleBox["ClCon",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " -- the functions implemented in [",
 ButtonBox["AA4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 "] have the prefix \[OpenCurlyDoubleQuote]ClCon\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.7071428026460743`*^9, 3.707142894158291*^9}, {
  3.707156705741397*^9, 3.707156735763639*^9}},
 CellID->1865951003,ExpressionUUID->"d0375fe3-2d77-4e7f-be02-e6a17e91aed4"],

Cell[TextData[{
 "The classifier contexts are ",
 StyleBox["Association", "Program"],
 " objects. The pipeline values can have the form:   "
}], "Text",
 CellChangeTimes->{{3.707142787844656*^9, 3.707142799390424*^9}, {
  3.7071429089982*^9, 3.707142923599529*^9}},
 CellID->1334810280,ExpressionUUID->"c3ea37da-25ed-416f-97ca-33024b72f6e3"],

Cell[TextData[StyleBox["\tClCon[ val, context:(_String|_Association) ]", \
"Program"]], "Text",
 CellChangeTimes->{{3.707142787844656*^9, 3.707142799390424*^9}, {
  3.707142914218182*^9, 3.707142957396817*^9}},
 CellID->1542199398,ExpressionUUID->"74b8cbe9-2c73-40a7-84d1-a5e404c7953b"],

Cell[CellGroupData[{

Cell["\<\
The ClCon specific monad functions deposit or retrieve values from the \
context with the keys: \"trainData\", \"testData\", \"classifier\". The \
general idea is that if the current value of the pipeline cannot provide all \
arguments for a ClCon function, then the needed arguments are taken from the \
context. If that fails, then an message is issued.
This is illustrated with the following pipeline with comments example.\
\>", "Text",
 CellChangeTimes->{{3.707142787844656*^9, 3.707142799390424*^9}, 
   3.707142915623307*^9, {3.7071429668332644`*^9, 3.707142969499384*^9}, {
   3.707144001828501*^9, 3.7071441104866967`*^9}, {3.707144374107484*^9, 
   3.707144449583941*^9}, {3.707156742976445*^9, 3.707156743413232*^9}, {
   3.707156776287372*^9, 3.707156898585381*^9}},
 CellID->1765146543,ExpressionUUID->"5fbef98d-ecf6-4289-aee9-abf8806ffd02"],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox[
        TagBox[
         RowBox[{"ClConUnit", "[", "ds", "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Lift data to the monad. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConSplitData", "[", "0.6`", "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Split the data and store the parts to \\\"trainData\\\" \
and \\\"testData\\\". *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{
          "ClConMakeClassifier", "[", "\"\\\"LogisticRegression\\\"\"", "]"}],
          HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Create a classifier and store it to \\\"classifier\\\". \
*)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConEchoFunctionContext", "[", 
           RowBox[{"\"\\\"context keys:\\\"\"", ",", "Keys"}], "]"}], 
         HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Show the keys in the current context. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConClassifierMeasurements", "[", 
           RowBox[{"{", 
             
             RowBox[{"\"\\\"Accuracy\\\"\"", ",", "\"\\\"Precision\\\"\"", 
               ",", "\"\\\"Recall\\\"\""}], "}"}], "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Compute evaluation measures *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["ClConEchoValue", HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* and display them. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConAccuracyByVariableShuffling", "[", "]"}], HoldForm], 
        "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Compute variable importance estimates *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["ClConEchoValue", HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* and display them. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["ClConRecoverData", HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Recover the original data from the context. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConSplitData", "[", "0.8`", "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Split it again. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConMakeClassifier", "[", 
           RowBox[{"{", 
             
             RowBox[{"\"\\\"LogisticRegression\\\"\"", ",", "0.8`", ",", 
               "3"}], "}"}], "]"}], HoldForm], "Input", StripOnInput -> 
        False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Train an ensemble of 3 classifiers. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConClassifierMeasurements", "[", 
           RowBox[{"{", 
             
             RowBox[{"\"\\\"Accuracy\\\"\"", ",", "\"\\\"Precision\\\"\"", 
               ",", "\"\\\"Recall\\\"\""}], "}"}], "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Compute performance measures *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["ClConEchoValue", HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* and display them. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConAccuracyByVariableShuffling", "[", "]"}], HoldForm], 
        "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* Compute variable importance estimates. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["ClConEchoValue", HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* The current pipeline value is an association of \
measures, *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{
          "ClConRetrieveFromContext", "[", "\"\\\"trainData\\\"\"", "]"}], 
         HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* but we can retrieve data from the context. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConEchoFunctionValue", "[", 
           RowBox[{"\"\\\"summary:\\\"\"", ",", "RecordsSummary"}], "]"}], 
         HoldForm], "Input", StripOnInput -> False]},
      "RowDefault"], 
     StyleBox["\<\"(* And compute records summary. *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Echo",
 CellChangeTimes->{3.707171520125416*^9},
 CellID->1478848543,ExpressionUUID->"0b47d903-eb4a-41e6-a5ca-baddb06e4faa"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"context keys:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{"\<\"trainData\"\>", ",", "\<\"testData\"\>", 
    ",", "\<\"classifier\"\>"}], "}"}]}]], "Echo",
 CellChangeTimes->{3.707171065180525*^9},
 CellID->31731823,ExpressionUUID->"eb2495a7-c398-42c4-9084-c7022f0cdd3f"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7384615384615385`"}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.7696969696969697`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6842105263157895`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.8089171974522293`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6310679611650484`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707171065282948*^9},
 CellID->740804705,ExpressionUUID->"c65dffdc-2483-4934-9b64-9d51bc5891cd"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"None", "\[Rule]", "0.7384615384615385`"}], ",", 
    RowBox[{"\<\"class\"\>", "\[Rule]", "0.6346153846153846`"}], ",", 
    RowBox[{"\<\"age\"\>", "\[Rule]", "0.7153846153846154`"}], ",", 
    RowBox[{"\<\"sex\"\>", "\[Rule]", "0.5769230769230769`"}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707171065382392*^9},
 CellID->1741975276,ExpressionUUID->"a5f39929-a197-4120-874e-711736f2e259"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7701149425287356`"}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.7948717948717948`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7333333333333334`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.8157894736842105`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7064220183486238`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707171066025591*^9},
 CellID->733904181,ExpressionUUID->"d43e7ba4-1e25-4d0a-aee2-d32ebf7586c7"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"None", "\[Rule]", "0.7701149425287356`"}], ",", 
    RowBox[{"\<\"class\"\>", "\[Rule]", "0.7203065134099617`"}], ",", 
    RowBox[{"\<\"age\"\>", "\[Rule]", "0.7624521072796935`"}], ",", 
    RowBox[{"\<\"sex\"\>", "\[Rule]", "0.5632183908045977`"}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707171066206889*^9},
 CellID->1728985346,ExpressionUUID->"43132f2f-8b45-47a1-b38e-469098eeda30"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summary:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"{", 
   RowBox[{
    TagBox[GridBox[{
       {
        StyleBox["\<\"1 class\"\>",
         StripOnInput->False,
         LineColor->RGBColor[0, 0, 1],
         FrontFaceColor->RGBColor[0, 0, 1],
         BackFaceColor->RGBColor[0, 0, 1],
         GraphicsColor->RGBColor[0, 0, 1],
         FontFamily->"Times",
         FontColor->RGBColor[0, 0, 1]]},
       {
        TagBox[GridBox[{
           {"\<\"3rd\"\>", "534"},
           {"\<\"1st\"\>", "243"},
           {"\<\"2nd\"\>", "204"}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"], ",", 
    TagBox[GridBox[{
       {
        StyleBox["\<\"2 age\"\>",
         StripOnInput->False,
         LineColor->RGBColor[0, 0, 1],
         FrontFaceColor->RGBColor[0, 0, 1],
         BackFaceColor->RGBColor[0, 0, 1],
         GraphicsColor->RGBColor[0, 0, 1],
         FontFamily->"Times",
         FontColor->RGBColor[0, 0, 1]]},
       {
        TagBox[GridBox[{
           {
            RowBox[{"Missing", "[", "]"}], "196"},
           {"24.`", "39"},
           {"30.`", "34"},
           {"21.`", "31"},
           {"18.`", "29"},
           {"22.`", "27"},
           {"\<\"(Other)\"\>", "625"}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"], ",", 
    TagBox[GridBox[{
       {
        StyleBox["\<\"3 sex\"\>",
         StripOnInput->False,
         LineColor->RGBColor[0, 0, 1],
         FrontFaceColor->RGBColor[0, 0, 1],
         BackFaceColor->RGBColor[0, 0, 1],
         GraphicsColor->RGBColor[0, 0, 1],
         FontFamily->"Times",
         FontColor->RGBColor[0, 0, 1]]},
       {
        TagBox[GridBox[{
           {"\<\"male\"\>", "629"},
           {"\<\"female\"\>", "352"}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"], ",", 
    TagBox[GridBox[{
       {
        StyleBox["\<\"4 survival\"\>",
         StripOnInput->False,
         LineColor->RGBColor[0, 0, 1],
         FrontFaceColor->RGBColor[0, 0, 1],
         BackFaceColor->RGBColor[0, 0, 1],
         GraphicsColor->RGBColor[0, 0, 1],
         FontFamily->"Times",
         FontColor->RGBColor[0, 0, 1]]},
       {
        TagBox[GridBox[{
           {"\<\"died\"\>", "606"},
           {"\<\"survived\"\>", "375"}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.707171066298573*^9},
 CellID->1455482665,ExpressionUUID->"1728ed31-44f2-4c8d-a18b-1e716cd463d7"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "The pipeline and results above demonstrate polymorphic behaviour over the \
classifier variable in the context: different functions are used if that \
variable is a ",
 StyleBox["ClassifierFunction", "Program"],
 " object or an association of named ",
 StyleBox["ClassifierFunction", "Program"],
 " objects."
}], "Text",
 CellChangeTimes->{{3.7071711379807673`*^9, 3.707171138932852*^9}, {
  3.707171171312146*^9, 3.707171272661453*^9}, {3.70717134236696*^9, 
  3.707171415695149*^9}, {3.7071715659882736`*^9, 3.707171592670306*^9}, {
  3.70717167261492*^9, 3.707171690320284*^9}},
 CellID->310927678,ExpressionUUID->"2877e9ee-9bc2-4f86-a3ca-dfca1df837d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Another usage example", "Subsection",
 CellChangeTimes->{{3.7065083756598177`*^9, 3.706508381767581*^9}, {
  3.7071714413687477`*^9, 3.7071714447201567`*^9}},
 CellID->933770995,ExpressionUUID->"b3615f1a-f7b1-4f58-855b-6d5792dd9137"],

Cell["\<\
This monadic pipeline in this example goes through several stages: data \
summary, classifier training, evaluation, acceptance test, and if the results \
are rejected a new classifier is made with a different algorithm using the \
same data splitting. The context keeps track of the data and its splitting. \
That allows the conditional classifier switch to be concisely specified.\
\>", "Text",
 CellChangeTimes->{{3.70648570918904*^9, 3.7064858926204453`*^9}, 
   3.7065661616862803`*^9, {3.707117041029933*^9, 3.7071170619200163`*^9}, {
   3.707162053510082*^9, 3.707162054970508*^9}},
 CellID->78620689,ExpressionUUID->"67712a19-c34e-4c35-ae0c-e990cd3c8590"],

Cell[CellGroupData[{

Cell[TextData[{
 "First let us define a function that takes a ",
 StyleBox["Classify", "Program"],
 " method as an argument and makes a classifier and calculates performance \
measures."
}], "Text",
 CellChangeTimes->{{3.707116671339931*^9, 3.707116726532085*^9}, {
  3.707116806993634*^9, 3.707116826308821*^9}, {3.707116861015128*^9, 
  3.7071169045420313`*^9}},
 CellID->675477118,ExpressionUUID->"732de885-c60b-41cd-a10d-0a8a77015751"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClSubPipe", "[", "method_String", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "ct"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ClConUnit", "[", 
       RowBox[{"x", ",", "ct"}], "]"}], "\[DoubleLongRightArrow]", 
      "\[IndentingNewLine]", 
      RowBox[{"ClConMakeClassifier", "[", "method", "]"}], 
      "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
      RowBox[{"ClConEchoFunctionContext", "[", 
       RowBox[{"\"\<classifier:\>\"", ",", 
        RowBox[{
         RowBox[{"ClassifierInformation", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<classifier\>\"", "]"}], ",", "Method"}], 
          "]"}], "&"}]}], "]"}], "\[DoubleLongRightArrow]", 
      "\[IndentingNewLine]", 
      RowBox[{"ClConEchoFunctionContext", "[", 
       RowBox[{"\"\<training time:\>\"", ",", 
        RowBox[{
         RowBox[{"ClassifierInformation", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<classifier\>\"", "]"}], ",", 
           "\"\<TrainingTime\>\""}], "]"}], "&"}]}], "]"}], 
      "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
      RowBox[{"ClConClassifierMeasurements", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\""}],
         "}"}], "]"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
      "ClConEchoValue", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
      RowBox[{"ClConEchoFunctionContext", "[", 
       RowBox[{
        RowBox[{"ClassifierMeasurements", "[", 
         RowBox[{
          RowBox[{"#", "[", "\"\<classifier\>\"", "]"}], ",", 
          RowBox[{"ClConToNormalClassifierData", "[", 
           RowBox[{"#", "[", "\"\<testData\>\"", "]"}], "]"}], ",", 
          "\"\<ROCCurve\>\""}], "]"}], "&"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707083687604097*^9, 3.707083757432106*^9}, {
   3.707083805447804*^9, 3.707083806145148*^9}, 3.707116689722344*^9},
 CellID->1145364184,ExpressionUUID->"f987d0e9-139f-44b9-aa15-b5445808d557"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Using the sub-pipeline function ",
 StyleBox["ClSubPipe", "Program"],
 " we make the outlined pipeline."
}], "Text",
 CellChangeTimes->{{3.707116831404928*^9, 3.70711685842768*^9}, {
  3.707117088326009*^9, 3.707117117630312*^9}, {3.707134954514193*^9, 
  3.707134973406998*^9}},
 CellID->92428780,ExpressionUUID->"1b4cdecc-c0d2-4354-aa31-063a58bef269"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "12", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"res", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "ds", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.7", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConEchoFunctionValue", "[", 
     RowBox[{"\"\<summaries:\>\"", ",", 
      RowBox[{
       RowBox[{"ColumnForm", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"RecordsSummary", "/@", "#"}], "]"}], "]"}], "&"}]}], "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConEchoFunctionValue", "[", 
     RowBox[{"\"\<xtabs:\>\"", ",", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"MatrixForm", "[", 
          RowBox[{"CrossTensorate", "[", 
           RowBox[{
            RowBox[{"Count", "\[Equal]", 
             RowBox[{
              RowBox[{
              "varNames", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], "+", 
              RowBox[{"varNames", "\[LeftDoubleBracket]", 
               RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}]}], ",", "#"}], 
           "]"}], "]"}], "&"}], "/@", "#"}], "&"}]}], "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClSubPipe", "[", "\"\<LogisticRegression\>\"", "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "[", "\"\<Accuracy\>\"", "]"}], ">", "0.8"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{"\"\<Good accuracy!\>\"", ",", "\"\<Success:\>\""}], "]"}], 
         ";", "ClConFail"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
          "\"\<Make a new classifier\>\"", ",", "\"\<Inaccurate:\>\""}], 
          "]"}], ";", 
         RowBox[{"ClConUnit", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}]}]}], "]"}], "&"}], ")"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClSubPipe", "[", "\"\<RandomForest\>\"", "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7070837786517353`*^9, 3.707083814210506*^9}, {
  3.707083881804872*^9, 3.70708399194429*^9}},
 CellID->819828679,ExpressionUUID->"1d4367f1-263b-439e-acbd-0e0010da6c8f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], " ", 
  InterpretationBox[GridBox[{
     {
      RowBox[{"\<\"trainData\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         TagBox[GridBox[{
            {
             StyleBox["\<\"1 class\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {"\<\"3rd\"\>", "523"},
                {"\<\"1st\"\>", "249"},
                {"\<\"2nd\"\>", "209"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"], ",", 
         TagBox[GridBox[{
            {
             StyleBox["\<\"2 age\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {
                 RowBox[{"Missing", "[", "]"}], "207"},
                {"24.`", "38"},
                {"30.`", "36"},
                {"22.`", "33"},
                {"18.`", "32"},
                {"21.`", "26"},
                {"\<\"(Other)\"\>", "609"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"], ",", 
         TagBox[GridBox[{
            {
             StyleBox["\<\"3 sex\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {"\<\"male\"\>", "627"},
                {"\<\"female\"\>", "354"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"], ",", 
         TagBox[GridBox[{
            {
             StyleBox["\<\"4 survival\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {"\<\"died\"\>", "606"},
                {"\<\"survived\"\>", "375"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"]}], "}"}]}]},
     {
      RowBox[{"\<\"testData\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         TagBox[GridBox[{
            {
             StyleBox["\<\"1 class\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {"\<\"3rd\"\>", "186"},
                {"\<\"1st\"\>", "74"},
                {"\<\"2nd\"\>", "68"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"], ",", 
         TagBox[GridBox[{
            {
             StyleBox["\<\"2 age\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {
                 RowBox[{"Missing", "[", "]"}], "56"},
                {"21.`", "15"},
                {"35.`", "12"},
                {"36.`", "12"},
                {"22.`", "10"},
                {"25.`", "10"},
                {"\<\"(Other)\"\>", "213"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"], ",", 
         TagBox[GridBox[{
            {
             StyleBox["\<\"3 sex\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {"\<\"male\"\>", "216"},
                {"\<\"female\"\>", "112"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"], ",", 
         TagBox[GridBox[{
            {
             StyleBox["\<\"4 survival\"\>",
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontFamily->"Times",
              FontColor->RGBColor[0, 0, 1]]},
            {
             TagBox[GridBox[{
                {"\<\"died\"\>", "203"},
                {"\<\"survived\"\>", "125"}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Grid"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"]}], "}"}]}]}
    },
    BaselinePosition->{Baseline, {1, 1}},
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}}],
   ColumnForm[{"trainData" -> {
       Column[{
         Style["1 class", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{"3rd", 523}, {"1st", 249}, {"2nd", 209}}, Alignment -> 
          Left]}], 
       Column[{
         Style["2 age", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{
            Missing[], 207}, {24., 38}, {30., 36}, {22., 33}, {18., 32}, {
           21., 26}, {"(Other)", 609}}, Alignment -> Left]}], 
       Column[{
         Style["3 sex", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{"male", 627}, {"female", 354}}, Alignment -> Left]}], 
       Column[{
         Style["4 survival", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{"died", 606}, {"survived", 375}}, Alignment -> Left]}]}, 
     "testData" -> {
       Column[{
         Style["1 class", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{"3rd", 186}, {"1st", 74}, {"2nd", 68}}, Alignment -> Left]}], 
       
       Column[{
         Style["2 age", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{
            Missing[], 56}, {21., 15}, {35., 12}, {36., 12}, {22., 10}, {
           25., 10}, {"(Other)", 213}}, Alignment -> Left]}], 
       Column[{
         Style["3 sex", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{"male", 216}, {"female", 112}}, Alignment -> Left]}], 
       Column[{
         Style["4 survival", 
          RGBColor[0, 0, 1], FontFamily -> "Times"], 
         Grid[{{"died", 203}, {"survived", 125}}, Alignment -> Left]}]}}],
   Editable->False]}]], "Echo",
 CellChangeTimes->{3.70717901706683*^9},
 CellID->605528801,ExpressionUUID->"addd1262-1b02-4fc8-bb39-56671c75cb90"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"xtabs:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"trainData\"\>", "\[Rule]", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {
           StyleBox["\[Null]",
            ShowStringCharacters->False], 
           TagBox["\<\"died\"\>",
            HoldForm], 
           TagBox["\<\"survived\"\>",
            HoldForm]},
          {
           TagBox["\<\"1st\"\>",
            HoldForm], "98", "151"},
          {
           TagBox["\<\"2nd\"\>",
            HoldForm], "117", "92"},
          {
           TagBox["\<\"3rd\"\>",
            HoldForm], "391", "132"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxDividers->{
          "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
           "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}], 
       "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[
       SparseArray[
        Automatic, {3, 2}, 0, {
         1, {{0, 2, 4, 6}, {{2}, {1}, {2}, {1}, {2}, {1}}}, {151, 98, 92, 117,
           132, 391}}], 
        TableHeadings -> {{"1st", "2nd", "3rd"}, {"died", "survived"}}]]]}], 
    ",", 
    RowBox[{"\<\"testData\"\>", "\[Rule]", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {
           StyleBox["\[Null]",
            ShowStringCharacters->False], 
           TagBox["\<\"died\"\>",
            HoldForm], 
           TagBox["\<\"survived\"\>",
            HoldForm]},
          {
           TagBox["\<\"1st\"\>",
            HoldForm], "25", "49"},
          {
           TagBox["\<\"2nd\"\>",
            HoldForm], "41", "27"},
          {
           TagBox["\<\"3rd\"\>",
            HoldForm], "137", "49"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxDividers->{
          "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
           "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}], 
       "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[
       SparseArray[
        Automatic, {3, 2}, 0, {
         1, {{0, 2, 4, 6}, {{2}, {1}, {2}, {1}, {2}, {1}}}, {49, 25, 27, 41, 
          49, 137}}], 
        TableHeadings -> {{"1st", "2nd", "3rd"}, {"died", "survived"}}]]]}]}],
    "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.70717901710784*^9},
 CellID->197555274,ExpressionUUID->"a525aecb-3fb7-4e84-ae85-f50315f226e6"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"classifier:\"\>",
   "EchoLabel"], " ", "\<\"LogisticRegression\"\>"}]], "Echo",
 CellChangeTimes->{3.707179017381757*^9},
 CellID->301771856,ExpressionUUID->"51674653-4758-4962-8902-440478adbfd8"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"training time:\"\>",
   "EchoLabel"], " ", 
  TemplateBox[{"0.242112`", "\"s\"", "seconds", "\"Seconds\""},
   "Quantity"]}]], "Echo",
 CellChangeTimes->{3.70717901744741*^9},
 CellID->1670693225,ExpressionUUID->"c1588d9d-190d-46e1-9c1b-fbbaed2e5460"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7977941176470589`"}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.8176470588235294`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7647058823529411`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.852760736196319`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7155963302752294`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707179017529975*^9},
 CellID->992348050,ExpressionUUID->"b884fafc-59b5-416c-a3fc-1d3ac82c8d6a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"died\"\>", "\[Rule]", 
    TemplateBox[{
      GraphicsBox[{{}, 
        GraphicsComplexBox[CompressedData["
1:eJx113tMl1UcBnA0zSxnRhLZNDUzyzI1y5lGrzZzGmWFmXNCF6/DvGRqFiMt
zZVYmrAMRnhhZhGkaBgBpoIioCiioogoV5EfF384TW1e1jnnefs+63eKf9hn
P+E97znP8z3Yc/LckGmt/fz87m3l56e//9/XY9VHxlzv8bHzb68Qr08KXbSz
NNrn8zjxrw+82HVo+Hqff58ors1dW3n6xg8+P58knnPrTvUrUnx+31ZxZPzu
nJRR23x+/3ZxdvpfjxfOTPN53g7x7ccHfdu4Kt3n+RnOhic+e+V6wVLH18Et
s9WKMsVY307xNx1+mtH35B9irHe3+L3O8+o3fbJHjPVni79+qGNC2t05YrwP
nTog+fV9G/eK8X77xEefH61eKVeM9/3H0Zb/fPlcZk3ufqclZ8Tla09+L8bn
iZaxX3ni+yctnXtpQr6Tv6iqR0Tkj5axfwXioeHdH76tgcZ+HhCHqbf1jzwo
xv4WuutLsbxk+US1ZYfE2H86MebKiKc2HBbjPIrEZnldjjgd2hXXZL2fahnn
RV+aEFvyaDWN8ysWt62o2zogudjdn+3ip0MGpg/ttcMyzvuo+L7pz0QNWUDj
/Ok+zcumDg86JkYe6GcXmASIkQ/6JfV2rxXRyEuJ2BxfLI280LPa7zr09rsn
xMgHvRgHIEZe6NWB+gk08lIq3rDOvLAY+Tkl3tb72uAly2nkid6bMuqeL8aW
uflJt4y8lTmhCWuiMkoyLJvlBp4WI4+0flu1I2LksVx8VaVtXRKNfJ4R31Hw
acTmD2hsF60O540tw86KkV+678lu/X9rUyFGnunn3tInRCPPlWL17IuTg2nk
u9Ltw07L+mF1W2nkn/5dx6tzlRh9oIcHjcu48FGV83n9xbAhX+6yjD7Q2B4a
/ah2+7XHcsi+jWqHqp0TXZJiJyVkW0af6LJ2+gk0+lXt9jXH8hQTkBpnpjOx
dfyVvWLkLdcy+kk3rdKBp9FXGnWl0d9a8c0A/QI0+kybeCXQ6Hetc2tq+1ll
r+63rHcvutU5MfpPf6faHjCdxjygddviDtCYD7ROc7f+dWLMC3qgfv0YGvOD
VuFQFacxT86LX9D1CqUxX+iDC/NW9sumMW/oceYB9WLMH7r8ht5wGvOInmYC
TGM+ecTm+Md53HmTZxnzy+NEq/Z1Scq3/KFefrrH7WeB+JHUcJXAg5Yx/zxu
3wrFmSU64Icsm3HVtcHt12Hx2OsF/qVpRWL064hlzFNazVbVKBrztMGZ1ylo
113tisXom+1O0a1UBBqcYb0C5icPOmoZ87hRbG7fMTTmc6PbV9s9zUBtdNoO
bu4T/M4xMfpsG/O90SkanVve8NVxyz/r8eDf5PatxDLuA9rEdRGN+4HOMtdJ
kxM3yRy4GHk6YRn3SbN4pBk4zc6UOQtH9a2zjfum2c3fSXE/vT3+pZbVMFcX
AI37iR6/ZZi6YS64ebWN+4vWt03LbBr3GY0/d2jcb17nakxvlfBTYvSBzt58
U++AZa8eH4O9bj9OW8Z96XVW6sfF0uhPuXh84S+H1ZGL0Z8z4u4Vy5fVX6TR
p7Nij+aDFWL0i9Zpi+ldKUZ/aF2emiwafaoSm/iH2Dbxj/e6/aLVWtSCafSn
2jL+fvA6pi2LafSJNvENqBGjX7T+dH4yjX7RXUeu9uaMqBWjXzTiRqMv58R1
b87YNHkOjf7QevXb29SJ0RfaxCGeRl9os50Dz4vRHzoiMrBjYh6NftSLTTzC
aOSbNq9/mUbePWJ9emuiaOSfVg9XK2oQI/+0WX46jfw3Wsb/eluc0rT16oRp
9IM207yGRl+axGY5ETT6Q5t4d2oWo0+0Opy1ezbT6Bdtfjzoghh9ozHeafTP
K9ZtSw2n0Uf6v7/7fvHzvwGJ/xBt
         "], {{{}, {}, {}, {}, {}, {}, {}, {
            EdgeForm[], 
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             Opacity[0.2]], 
            GraphicsGroupBox[{
              PolygonBox[CompressedData["
1:eJwlzFV0FgQAhuH9A6SFbXRPOqRLGgSlY3TDaIENUFFSaZVQ6e7uLunuRrrD
JJRunnN28Xzf3RseGR0RFRwUFBQglgkljBCSkoQPSUwiEpKA+MQjLh8Qh9iB
mEYwgUBM9J17yxte84qXvOA5z3jKEx7ziP/5j4c84D73+Jd/+Ju/+JM/uMsd
bnOLm9zgOte4yhUuc4mLXOA85/ids5zhNKc4yQmOc4yjHOEwhzjIAfazj73s
YTe72MkOtrONrWzhNzaziY1sYD3rWMsaVrOKlaxgOctYyhIWs4iFLGA+85jL
HGYzi5nMYDrTmMoUJjOJiUxgPOMYyxhG8yu/8DOjGMkIhvMTP/IDwxjKEAYz
iIEM4Hu+oz/96EsfetOLb/mGnnzNV3xJD7rTjWii6EoXOvMFnehIB9rTjra0
IZLWtKIlLWhOM5rShMY0oiENqE896hJBHWpTi5rUoDrVqEoVKvM5n1GJinxK
BcpTjrKUoTSlKEkJPqE4xShKEQpTiIIUID/5yMvH5CE3uchJDrKTjaxkITMf
EU4mMpKB9KQjLWlITSpSkoLkJCOMUEJ4D+YHgYQ=
               "]]}]}, {}, {}}, {{}, {}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwl1GWcCAYYBvC7447j7hjTMWyM6c5hcqa2053T7nSzsdDNdBsWum26me7u
7o7Z+N/Ph//zfnu+PW/6ptGRUYEBAQEfiJgbRCxiE0wIcYhLKPGITxjhRJCA
hDEdJCIxH5KEpCQjOSlISSpSk4a0fEQ60pOBj/mEjGTiUzKThc/ISjayk4Oc
5CI3echLPvJTgIIUojBFKEoxPqc4JSjJF5SiNGUoSznK8yUV+IqKVKIyVajK
13xDJNWoTg1qUova1KEu9ahPAxrSiMY0oSnNaM63tKAlrWhNG9rSjvZEEU0H
OtKJznShK93oTg960ove9KEv/fiO7+nPAH7gR37iZwYyiMEMYSjDGM4IRjKK
0YxhLOMYzy9MYCKTmMwUpjKN6cxgJrOYzRzm8ivzmM8CfuN3/uBPFrKIxSxh
KctYzgpWsorVrGEt6/iLv1nPBjayic1sYSvb2M4OdrKL3exhL/+wj/0c4CCH
OMwRjnKM45zgJKc4zRnOco7zXOAil7jMFa5yjevc4Ca3uM0d7nKP+zzgIY94
zBOe8oznvOAlr3jNv7zhP/7nLTHjDySIWMQmmBDiEJdQ4hGfMMKJIAEJA9//
kHdHWIHx
             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             AbsoluteThickness[1.6], 
             GrayLevel[0.5]], 
            LineBox[{274, 275}]}}}], {}, {}, {{}, {}}, {{}, {}}}, {
       DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        AxesOrigin -> {0, 0}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
        Identity, AspectRatio -> 1, Axes -> {True, True}, 
        AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
        Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
           FormBox["\"Recall\"", TraditionalForm], None}, {
           FormBox["\"FalsePositiveRate\"", TraditionalForm], None}}, 
        FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
        GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
          GrayLevel[0.5, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], 
        Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& ), "CopiedValueFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& )}}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        Ticks -> {Automatic, Automatic}}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"ROC curve\"", "\"No-discrimination line\""}, 
         "PointLegend", DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"PointLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0.5]"], Appearance -> None,
                     BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> False]}],
                     "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]},
     "Legended",
     DisplayFunction->(GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ),
     Editable->True,
     InterpretationFunction->(RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}], ",", 
   RowBox[{"\<\"survived\"\>", "\[Rule]", 
    TemplateBox[{
      GraphicsBox[{{}, 
        GraphicsComplexBox[CompressedData["
1:eJx11310j2UYB/ARSTnSsqRDSFJKSDmi9dCRQ0q1JcdBL17P5CUhtbMo2ilT
ZDtpzhqzI7W2bDStIWzMjDFvm2Fs9tt+9j47hI6X033f36fre3ru2j87n/Pb
nue+r/t7Xc/z6zZpTsjU5gEBAfc2CwjQv//vJ+GJz165nrfE+bejxRezh16+
9uT3ns8TxfsXnu8aHvGj5+9TxG1aHfVtfz/N8/9bxE+H9MsY1H2r53oZ4gnx
q6IyCzM9198h/ryqaeLAL3d67rdbXNQxKXZ8fJbzWPmRkde7fux4jfVki2c4
45rHXdkjxvpyxLemtJ55+tV9Yqw3VxytVtsxab8Y688TP5IWpu5wUIz95Iu3
FeoFHhJjf4fFo6/nBRanF4ix3yPiue2Cd97V6qhnv/Tg7kHzkvsf8+yfbjmg
vueod4576kEXjMgpqfnqhKc+heI1482GPfUqEk+evWB4L3+Rp34nxb31cgKL
PfWkr8b0UBU85akvnbXxpr6jp95nxMv15WL/8TLLOI8S8Zj8Xw6rLTvrkiYs
3FEcbRnndVbcpTRyaVUTjfM7J67WfLBUjPOkdbVjepSJcb60PlzfdhrnfV5s
jjeExvnT6t5qgTTyUC42p7+o3N3/GvGvD7zYaVDYOsvID23iEORzr5doGfmi
9afzkn1ORc7qsjM3fhDj/kni2bfuVLdIEeN+qeKIuF3ZKcM3i3H9LeKsjL8e
z5+Rbhn5pjsNW9mYPbTCXc9Wy8g/jbhWOLef6P9t7YoMMdafKR51cZbawTbL
6J9Ksf/N6Rsmza5097tD/E2bn6b3OvmHGPvfJX6v/dyqDZ/stox+pPXpbWnh
d+uVZRn9Spv2ifM7Xz/UNj797mzL6Ge/W286rW/y63vX7xGjvnstm7j2u+Ac
e36EKmGOZcwHOjyiQ9vE3Atu/ek/X67c5svZJ8Z55FrGfKly7h+/ZM6lsfst
m/adSGP+0CYOl2nMo2r3vPMs6+5bFVXtDArr8vBtNbYxv2i1WLXjGjcPByxj
vtU4E1W1AyMOipGXfPHiyHHqiA6JkR86MebK0KcSDouRpwKxWX7HI2Lkh740
Nrbw0XIaeTkqblnqT+2bTCMvx8T3TXsmauB8Gvmhe9YvnTIk+LgYeaKfnW8S
IUae6JfU6l8roJGfQrE5vlgaeaJntt556O13i8TIl20T14waZxEKLEbe6JUd
9B1p5KdYnLDWFECM/JwSb+5xbcDiSBp5sY3nXa2zJ2X4PV+MPm25OH2dmtg0
nn+1br5os/wOZ8TIG613rypm2bx9+GrdPJZYxvO1zrmq0rc2iUZez1o28Q+v
c+7I+zR84wc0yk2rw35j0+BzYuSb7nWyc5/fWpRaxvO8zs0//dxbOgE0+qFM
rNbSNGkUjf6g9cX9qTT6hf5dx7X9eTH6hx4SHJrZ8BGNfqJRDhr9VS4O2bte
VYBGv9GnW+kr2DavG+3q3X6kJ5uA+MToT7puhQ44jX6l0a40+rfCMt6n6p2b
QXrBNPqbNvGIp9HvtK5GdLNKMfqf/k51e9A0GvOA1t205gCN+UDr9HXu4xdj
XtD99PZjaMwLWh2uamka8+OC+AXdHhNozBP64ILc5b2zaMwX2+phvnr3Rhrv
p/VOqFlAlRjziC65oQ+Axnyip5qA2jbHGdzgzq9qy3gfbnBMfEJpzDf6Q729
DBrzjTbjpFONGPPMNr7O0Hj/bhTrt+20sEZHzULVATTmId0uupk6QhrzsdYy
3ucbHfN0HEljftLdzMCiMT/pn3X7BdaJMT9pE4+FNOYpvd2MY9vut2h3vtaL
h5mGpjFvaTWs1ICjMX/pMZsGq4nZIMY8pvW0vDiLxnym8TpAYz43iht1uwyg
Ma9pU944GvOb/u/f3h9+/jdntHYJ
         "], {{{}, {}, {}, {}, {}, {}, {}, {
            EdgeForm[], 
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             Opacity[0.2]], 
            GraphicsGroupBox[{
              PolygonBox[CompressedData["
1:eJwlzGV0FgQABdB9o3tB9+jusmgBaUY3jK4NUBQMulVSuru7u0Pp7k4VUJEQ
VOCew4/73q/3IqJiIqODg4KCAsQWYYQTSgjJSEoSEpOIhCQgPvGIS5zA+30s
ggkE3p++VW/4n//4l9e84h9e8oLnPONvnvIXf/IHT3jMI37nN37lIQ+4zz3u
cofb3OImN7jONa5yhctc4iIXOM85znKG05ziJCc4zjGOcoRf+JnDHOIgB9jP
Pvayh93sYic72M42trKFzWxiIxtYzzrWsobVrGIlK1jOMpayhMUsYiELmM88
5jKH2cxiJjOYzjSmMoXJTGIiE/iJ8YxjLGMYzSh+5Ae+ZyQjGM4whjKEwQxi
IAPoTz/68h3f8g1f04fefMWX9OILPqcnPehODNF0oytd6EwnOtKB9rSjLW2I
ojWtaEkLmtOMpjShMY1oSAPqU4+6RFKH2tSiJjWoTjWq8hlVqEwlPqUiFShP
OcpShtJ8wsd8xId8QClKUoLiFKMoRShMIQpSgPzkIy95yE0ucpKD7GQjK1mI
IDOZyEgG0pOOtKQhNalISQqSE04YoYTwDvCJgZU=
               "]]}]}, {}, {}}, {{}, {}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwl1GWcCAYYBvC7447j7hjTMWyM6c5hcqa2053T7nSzsdDNdBsWum26me7u
7o7Z+N/Ph//zfnu+PW/6ptGRUYEBAQEfiJgbRCxiE0wIcYhLKPGITxjhRJCA
hDEdJCIxH5KEpCQjOSlISSpSk4a0fEQ60pOBj/mEjGTiUzKThc/ISjayk4Oc
5CI3echLPvJTgIIUojBFKEoxPqc4JSjJF5SiNGUoSznK8yUV+IqKVKIyVajK
13xDJNWoTg1qUova1KEu9ahPAxrSiMY0oSnNaM63tKAlrWhNG9rSjvZEEU0H
OtKJznShK93oTg960ove9KEv/fiO7+nPAH7gR37iZwYyiMEMYSjDGM4IRjKK
0YxhLOMYzy9MYCKTmMwUpjKN6cxgJrOYzRzm8ivzmM8CfuN3/uBPFrKIxSxh
KctYzgpWsorVrGEt6/iLv1nPBjayic1sYSvb2M4OdrKL3exhL/+wj/0c4CCH
OMwRjnKM45zgJKc4zRnOco7zXOAil7jMFa5yjevc4Ca3uM0d7nKP+zzgIY94
zBOe8oznvOAlr3jNv7zhP/7nLTHjDySIWMQmmBDiEJdQ4hGfMMKJIAEJA9//
kHdHWIHx
             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             AbsoluteThickness[1.6], 
             GrayLevel[0.5]], 
            LineBox[{274, 275}]}}}], {}, {}, {{}, {}}, {{}, {}}}, {
       DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        AxesOrigin -> {0, 0}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
        Identity, AspectRatio -> 1, Axes -> {True, True}, 
        AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
        Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
           FormBox["\"Recall\"", TraditionalForm], None}, {
           FormBox["\"FalsePositiveRate\"", TraditionalForm], None}}, 
        FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
        GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
          GrayLevel[0.5, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], 
        Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& ), "CopiedValueFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& )}}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        Ticks -> {Automatic, Automatic}}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"ROC curve\"", "\"No-discrimination line\""}, 
         "PointLegend", DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"PointLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0.5]"], Appearance -> None,
                     BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> False]}],
                     "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]},
     "Legended",
     DisplayFunction->(GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ),
     Editable->True,
     InterpretationFunction->(RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}]}], 
  "\[RightAssociation]"}]], "Echo",
 CellChangeTimes->{3.7071790178326817`*^9},
 CellID->1035673748,ExpressionUUID->"692e88ae-0d23-464e-b0ce-7ba64866e461"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Inaccurate:\"\>",
   "EchoLabel"], " ", "\<\"Make a new classifier\"\>"}]], "Echo",
 CellChangeTimes->{3.707179017940872*^9},
 CellID->1213723701,ExpressionUUID->"09573ad3-7025-4be5-a416-1d9a057716bf"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"classifier:\"\>",
   "EchoLabel"], " ", "\<\"RandomForest\"\>"}]], "Echo",
 CellChangeTimes->{3.707179018119316*^9},
 CellID->107079854,ExpressionUUID->"eb50d9f9-8fe1-4b5b-855c-faa475c77cce"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"training time:\"\>",
   "EchoLabel"], " ", 
  TemplateBox[{"0.15535`", "\"s\"", "seconds", "\"Seconds\""},
   "Quantity"]}]], "Echo",
 CellChangeTimes->{3.7071790181788692`*^9},
 CellID->99809992,ExpressionUUID->"58714731-4332-430e-ae59-4daa775ca440"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.8161764705882353`"}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.7927461139896373`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.8734177215189873`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.9386503067484663`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6330275229357798`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707179018273431*^9},
 CellID->321807237,ExpressionUUID->"865d90a0-cb1b-4db3-86a3-e24d4e05e662"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"died\"\>", "\[Rule]", 
    TemplateBox[{
      GraphicsBox[{{}, 
        GraphicsComplexBox[CompressedData["
1:eJx11ntM1WUYB3AwjSxnRpLRMDUjizIlixlEP2nGNMoKMueQLl6HKWZqFCMt
zZVYmrAMRggyowgSJIwQUy4iHkW5yE1AuRw4Hu4wTW1e1vu+z9nzne+v+Id9
duD3ey/P93nOpMVrgpcNc3Jyut/ZyUn+/r+fJ9or516f+Klxu7exk9MXRR5u
iNU+T2D//tDLHr7hydrfp7I7Sne3Nt34Sfv/dHbErbvFIzK152WxoxOPFmcG
HtCen8MuyvvnyfKVudr7DrLvrJnxfc+OPO39+eygwdViBYe09RxmfzfqlxVe
9X9p6zvK/mDsWvu+zwq19Raxv31kdFLuvcXa+uHs6RlvHttbou3nGLv6xTli
C6Xa/uC/X+08ZC09ru23jP1g6OY1lxac0PZvYfuGT3j0jm6Ldh4n2WFita7R
p7TzKWdv2rpQbPG0dl5watyVgGdSzmjnV8FWy3Gv1M4TvrQgvvbx9krtfKvY
I1psWdMzqrTzrmY/sPy5mJnrq7Xzh6f0bVk6y/+sdh/w8+vVDWj3A78iVv9G
RY12X7Vsdfzxtdr9watGHjn97vt12n3CG+lAtfuFd46Tb6jX7ruBnbJHbVi7
/3PsA57XfDZthake4JLMwPu+mteo1QesljOuSasXWO5G7Firn2b2VVEde9Jh
qqfz7Lssn0elfXTeSHnqi9euWzYbtzuWPVgccPna0z9qn6eyT0S2TYyK/ln7
+0z2KJcqa8GH2dr/55hM1wGLy39rv98FNtU77FU/ftofw1vYVP/wC+/ICoAp
D61s8e6hxUEw5QOWD7dlwZQX+E9ZrmPb2JSfNuPZYO8838kH2XQ+eexFSbti
8mvzTZ7lH5Lf/wlM+YPpuNoc53vYZMpnOzv42F5xYjDlFW50kU+AKb/wElWQ
Vjbl2Wp8aR8Km/n1ETbdb6HJvTtkgGDKP0zxh6kfdLBvuskFw9QfYFXOSTD1
iw6jzj09PjSpiE33U2yyPK1Y50429Rf4B9FN3JbD1G9gmeaEkzD1H1hW8/hp
Njb1I9hbHkeczVhpLByWeKWETfVTyr61dOSqxtePm0z9DBbFI1oOTP3toqP+
ytixoprc00+Y/JJsF4tg6ofwqQ1l26cWXXTUo4X9WHa42MEpNtVLOftQrbyQ
02yqnzMmU7+FQ9SG7Gzqv3DzDVkgMPVjuzHvusW1IbeCTfVRafIyFTiY+ncX
W5VzSJexdoz/kXtcqthUX2ZTv4c/ltvLg6n/w6pde3SzaR7AYjaIhMI0H+Ax
sc6iBGCaFz1sNd3n9hh+k93WZcyoNpnmSY+jHs2epBpwjzHCp29K0HtnTab5
A/8q24drL5vmUa+jvuGKOaXN3d/UmKzKLxKm+dXryEMtOyFUFaDJBWocwjTv
+tizVYOCaf7AopmLAQDTPILn7/cTE6Xfka869pKIDYFeNpjyVm8yzTNYTp/B
1f3GVHncrg1sypvZNP9g+vrVb1yN8xQJPMemfJpN83LAKEq7KXfApvw2sbfL
x8fDlOdm9vzy386IK2JTvs+zJ7Rs3WIfgimfF9hdkg+3sCmvsKyWOM9Wkwdk
e/MZcOQTluG0FsCU1za2KvdgmPIBi7WIBcOUj3a2quaNMOUDVuXpZmVT/cPy
03UZMOUB9pi9c6A4oINN9Q9TecCUh06T6fsPrOKcCNP3IZi+BQ4atrdX7Fsc
AVO9w3L3OcNtbKp/WJVPIkx5gNXxe19kU/3DUdHjRqeWwZQHO1uVUxhM9Q+r
47sMUx662PK2d8XAlAdYvFysqJtN+YDV8vNgyksPuyE3WVQETPmB1fSwwpSn
XrZ6fRRM+YJVuY/pY1PeYHEZuwvTYMofrP7dv59NeYSpXcOUzwG2TF92OEx5
hf/7t/6Dz/8F1JsqNg==
         "], {{{}, {}, {}, {}, {}, {}, {}, {
            EdgeForm[], 
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             Opacity[0.2]], 
            GraphicsGroupBox[{
              PolygonBox[CompressedData["
1:eJwt0GdbDQAABeB7s0ORX+D/GHWNrIoQkq6RUPYsW/YmI3tkb0II2VsoIbLJ
TLzPkw/vc86n8+G0TQ6H0iMCgUCQi8QobWhNK6KJoiUtaE4kzWhKExrTiIY0
IIJgsH70r6jjD7X85hc/+cF3vlHDV77wmU985APvecdbqnnDa6p4xUteUMlz
KijnGU95QhmPecRDHnCfe9zlDre5xU1ucJ1rlHKVK1ymhEv//7pAMec5x1mK
OMNpTnGSExznGEc5wmEOcZAD7GcfhexlD7vZxU52sJ1tbGULBWxmExvZQD7r
Wcda1rCaVaxkBctZxlKWsJhFLCSPBcxnHnOZw2xmMZNccpjBdKYxlSlMZhIT
mcB4xjGWbLIYw2hGkclIMhjBcIYxlDDpDCGNwaQyiIEMIIX+9KMvyfShN0kk
kkAvetKD7nQjnq50oTOdCBFHLB3pQHva8Q+juXeu
               "]]}]}, {}, {}}, {{}, {}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwl1GWcCAYYBvC7447j7hjTMWyM6c5hcqa2053T7nSzsdDNdBsWum26me7u
7o7Z+N/Ph//zfnu+PW/6ptGRUYEBAQEfiJgbRCxiE0wIcYhLKPGITxjhRJCA
hDEdJCIxH5KEpCQjOSlISSpSk4a0fEQ60pOBj/mEjGTiUzKThc/ISjayk4Oc
5CI3echLPvJTgIIUojBFKEoxPqc4JSjJF5SiNGUoSznK8yUV+IqKVKIyVajK
13xDJNWoTg1qUova1KEu9ahPAxrSiMY0oSnNaM63tKAlrWhNG9rSjvZEEU0H
OtKJznShK93oTg960ove9KEv/fiO7+nPAH7gR37iZwYyiMEMYSjDGM4IRjKK
0YxhLOMYzy9MYCKTmMwUpjKN6cxgJrOYzRzm8ivzmM8CfuN3/uBPFrKIxSxh
KctYzgpWsorVrGEt6/iLv1nPBjayic1sYSvb2M4OdrKL3exhL/+wj/0c4CCH
OMwRjnKM45zgJKc4zRnOco7zXOAil7jMFa5yjevc4Ca3uM0d7nKP+zzgIY94
zBOe8oznvOAlr3jNv7zhP/7nLTHjDySIWMQmmBDiEJdQ4hGfMMKJIAEJA9//
kHdHWIHx
             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             AbsoluteThickness[1.6], 
             GrayLevel[0.5]], 
            LineBox[{274, 275}]}}}], {}, {}, {{}, {}}, {{}, {}}}, {
       DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        AxesOrigin -> {0, 0}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
        Identity, AspectRatio -> 1, Axes -> {True, True}, 
        AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
        Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
           FormBox["\"Recall\"", TraditionalForm], None}, {
           FormBox["\"FalsePositiveRate\"", TraditionalForm], None}}, 
        FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
        GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
          GrayLevel[0.5, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], 
        Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& ), "CopiedValueFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& )}}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        Ticks -> {Automatic, Automatic}}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"ROC curve\"", "\"No-discrimination line\""}, 
         "PointLegend", DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"PointLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0.5]"], Appearance -> None,
                     BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> False]}],
                     "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]},
     "Legended",
     DisplayFunction->(GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ),
     Editable->True,
     InterpretationFunction->(RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}], ",", 
   RowBox[{"\<\"survived\"\>", "\[Rule]", 
    TemplateBox[{
      GraphicsBox[{{}, 
        GraphicsComplexBox[CompressedData["
1:eJxl2HtM1WUYB3A0zSxnxiSzaWpmlmVKljONftrMaZYVZM6pXfA2zEumZjHS
0lyFpQnLcIQXZhZBioQRaCoIAoJcVBAFRTly5CowTW1e1vu+37PnO98f/7DP
jp7zvM/7PN+fx36hi4Jnt/fz8+vezs9P/7Z/nqwpmXCj72fOnf5WvCVh+vJ9
FVHW65tc3vr0l6/fyF/l3OkocWvWmCvXn/nZej1enLf8fN/wiF+tP58k7tKp
1LP3o2Tr76eInwsOTBvZf4/1fmni6XEbItPL0q333yf+qq5txohv9lufd1Bc
3jMhZlpcpvX5WeJ5ztT2sVcPWfXkiG/P6jz/9BuHrfpyxVGqup4JeVa9+eLH
k8PUJxRY9ReKM8p0gUet8xSJJ93I969ILbbOVyJe3C1o/32dSq3z0qP6ByxJ
HHbMOj/dcXjzwInvH7f6QRePz6lq+O6E1Z8y8aZp5sBWv8rFMxcuGzfIW271
76R4sC7Hv8LqJ30teoDq4Cmrv3Tmjlv6E61+V4rX6reLqbT6XyWeXPhHkTqi
dR9nxH2q16yuaztj3c9Zcb3mI9XWfVU7fz78Sq+RYVtc1t2NHnBOjPuk9WV6
9tK43/Nic53BNO6bVrWogmncf43Y3PaKGgf5EO8y5oM21x3gcS7kbDxXefMX
Mc6b4DLmidavLkn0OAtv36tKSHIZ80b3Gru+JWvMBV+9u8QRsQeyksbtFqO+
FHFm2n9PFc5LFaPePeK7Twz7sXFdmsuYbxrjSGPea33nSRdPbF2gKs4Qo/59
Lnvfmbs9dCGNfal1fujy29xBJ/8R47wHxB92X1y3/fODYpw/02V9eykdvGLs
n9f5/tGucan3Z7ls1iOWxn56ff2kk4cmvpW97ZAY/c122Yxj4EXn2EvjVcty
xOg//e9rtRmenMNi9DdX/NC0VYsuT8kTo9/54pFhfR67q4FG/4+IZ6jq/SMK
xOh3oXjlmqnqyEddRh7R4RE9usbnXvTdDx0ffXXMs1uLxLivYrEpt2eJGPfn
NvKuTmziZUadc3lKTNkTNTTus1Tcsdq7a2ii28hL2oz3FRr5WS/WabEhkkae
1vvm4Zj4wTnPR45Y6rY6jOpYgxj52+CbH3pg8+pZo4OOizFP9AtLzcSIMU/0
q6qbbxbTmK8ysRmXGBrzRs/vvP/oex+Uu2yuP43G86JRXJG6RSVgo29e3cbz
hDZPX0+jswIDI8Z80+t76IppzHuFeOtm00Ax5v+UePeA68NXrqGxD/ShpHEP
fD3ptBj7QZtyelSKsS+0Po3qoBj7U+Uynp9NYjMO4U3ONbUdmxNo7NMZ8T35
X4Tv+NhtPH+bfPtGq8t/e+eos2LsHz3oZO8hf3WoFmMf6Rff1TdKYz/PidVn
t4VOpLGPtH5z7y4a+0n/rce1+3kx9tVt83jv1izGvy9oFc4bD+5odkYHhaRf
+pTGftJoF419rREHZ29THaKxn/TpTvodaOwrPdMMjEeM/aWb1ukBprHPNNaZ
xn5fEN8K0AXR2HfajEscjf2n9Wmj2tWKkQf0T2r7A+bQyAdab8umIzTygtbT
13uIV4w8oAP1caNp7D+tLk+tKI08uCh+Wa/HdBr5QBcsy107OJNGXtAh5gPq
xMgPuuqmbjCNPKFnmwGjkS/1YnPdITTyhv5El5dGI39oEwe9GsTII1plk5pA
GvlEd4tqp1pKI68axebpOIFGftH9TGDQyDP6dz3u/k1i5Bdtrmc5jTyj95p4
pJFvzeKxZmFo5ButwkIFDI28oyfvHKUS65IY+UfrtGpdQCMPaTyOaeRji7hF
j+dwGnlJm3bG0shPGv9r0Ooyvh/RJu6CLonxfYnG100a359axPrbUXIYje9P
9J2/7R/7ddb7P4v6uEs=
         "], {{{}, {}, {}, {}, {}, {}, {
            EdgeForm[], 
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             Opacity[0.2]], 
            GraphicsGroupBox[{
              PolygonBox[CompressedData["
1:eJwl02VwEAQABeCNbbCRsk1KukOkQRrpRkYIogIjpEs6pKRDQOmWbikBEZTu
kG5QUrob4dvx47t37+79femi20e1ixUQEBBI/MD3GdODCCaE2MQhlDDiEi9m
TwISkogPSEw4EUTyIUlISjKSk4KPSEkqUpOGtKQjPRnISCYyk4WsZCM7OfiY
nHxCLnKTh7zkIz8FKEghPqUwRShKMYpTgpKU4jNKU4aylKM8FahIJSpThapU
ozo1+JyaRFGL2tShLl9Qj/p8SQO+4mu+oSGNaEw0TWhKM5rzLS1oSSta04a2
tKM9HehIJ76jM13oSje604Oe9KI3ffievvSjPwMYyA8MYjBDGMowhjOCkYxi
ND8yhrGM4yd+ZjwTmMgkJjOFqUxjOjOYySxm8wtzmMs85rOAhSxiMUtYyjKW
s4JfWckqVrOGtfzGOtazgd/ZyB9sYjN/8hdb2Mo2trODnexiN3vYyz72c4CD
HOIwf3OEoxzjOCc4ySlOc4aznOM8F7jIJf7hXy5zhatc4zo3+I+b3OI2d7jL
Pe7zgIc84jFPeMoznvOCl7ziNW/4n7fEnD+QWAQRTAixiUMoYUQSQTjvAB2r
gbY=
               "]]}]}, {}, {}, {}}, {{}, {}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwV01VgEAQABNANNmIwuktplE5ppLtFukaKsCHdDVJKd3cr3d2dAoICitLd
HW8f7+7v/i5tWESt8MCAgIAEIrKjEJUggolGdGIQkxBiEZtQ4hCXeMSP3CEh
iUhMEpKSjOSkICWpSE0avuBL0pKO9GQgI5nITBa+4muyko3s5CAnuchNHvKS
j/wU4BsKUojCFKEoxShOCb6lJKUoTRnKUo7yVKAilahMFapSjerUoCa1qM13
1OF76lKP+jSgIY1oTBOa0ozmhNGClrSiNW1oyw+040fa04FwIujIT3SiM13o
Sje604Oe9KI3fehLP/ozgIEMYjBDGMowfmY4IxjJKEbzC78yhrGMYzwTmMgk
JjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkqfuN3VrOGtaxjPRvY
yCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlOc4aznOMPznOB
i/zJJS7zF39zhatc4x/+5Tr/8T83uMktbnOHu9zjPg94yCMe84SnPOM5L3jJ
K17zhre84z0f+MgnIs8fSBSiEkQw0YhODGKSiBBiEZtQ4hCXeMTnM1Spggc=

             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.007333333333333334], 
             AbsoluteThickness[1.6], 
             GrayLevel[0.5]], 
            LineBox[{274, 275}]}}}], {}, {}, {{}, {}}, {{}, {}}}, {
       DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        AxesOrigin -> {0, 0}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
        Identity, AspectRatio -> 1, Axes -> {True, True}, 
        AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
        Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
           FormBox["\"Recall\"", TraditionalForm], None}, {
           FormBox["\"FalsePositiveRate\"", TraditionalForm], None}}, 
        FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
        GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
          GrayLevel[0.5, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], 
        Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& ), "CopiedValueFunction" -> ({
              (Identity[#]& )[
               Part[#, 1]], 
              (Identity[#]& )[
               Part[#, 2]]}& )}}, PlotRange -> {{0., 1.}, {0., 1.}}, 
        PlotRangeClipping -> True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
        Ticks -> {Automatic, Automatic}}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"ROC curve\"", "\"No-discrimination line\""}, 
         "PointLegend", DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.132], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"PointLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                    ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0.5]"], Appearance -> None,
                     BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> False]}],
                     "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]},
     "Legended",
     DisplayFunction->(GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ),
     Editable->True,
     InterpretationFunction->(RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}]}], 
  "\[RightAssociation]"}]], "Echo",
 CellChangeTimes->{3.707179018457108*^9},
 CellID->1250409113,ExpressionUUID->"e715c62f-f70f-466a-be3a-a9e9dce85b1a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tracing monad pipelines ",
 StyleBox["(case study)",
  FontSlant->"Italic"]
}], "Section",
 CellChangeTimes->{{3.706474484326166*^9, 3.706474514734801*^9}},
 CellID->350992649,ExpressionUUID->"b61aa113-fa71-42d0-9c66-d58ce3ada4c0"],

Cell[TextData[{
 "The monadic implementations in the package ",
 ButtonBox["MonadicTracing.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"],
 ", [",
 ButtonBox["AA5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"],
 "] allow tracking of the pipeline execution of functions within other monads."
}], "Text",
 CellChangeTimes->{{3.706486139578806*^9, 3.706486143971059*^9}, {
  3.706486340372703*^9, 3.706486383816956*^9}, {3.706866507364058*^9, 
  3.7068665354227533`*^9}, {3.7069488497126713`*^9, 3.70694895453216*^9}, {
  3.706948990982058*^9, 3.706949023539819*^9}, {3.707162106757265*^9, 
  3.707162108824806*^9}},
 CellID->2143357081,ExpressionUUID->"3321ec18-21e3-451a-af80-c01ac88d0bee"],

Cell["\<\
The primary reason for developing the package was the desire to have the \
ability to print a tabulated trace of code and comments using the usual monad \
pipeline notation. (I.e. without conversion to strings etc.)\
\>", "Text",
 CellChangeTimes->{{3.706486139578806*^9, 3.706486143971059*^9}, {
  3.706486340372703*^9, 3.7064863528796268`*^9}, {3.706486392381597*^9, 
  3.706486422899694*^9}},
 CellID->1511765589,ExpressionUUID->"236af6d6-1a1d-4cec-a96c-a478995f574d"],

Cell[TextData[{
 "It turned out that by programming ",
 ButtonBox["MonadicTracing.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"],
 " I came up with a ",
 ButtonBox["monad transformer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_transformer"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Monad_transformer"],
 "; see [",
 ButtonBox["Wk2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_transformer"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Monad_transformer"],
 "], [H2]."
}], "Text",
 CellChangeTimes->{{3.706948956706586*^9, 3.706948959366881*^9}, {
  3.706949034502883*^9, 3.706949037713746*^9}, {3.706952385531021*^9, 
  3.706952387408412*^9}, {3.706954781361766*^9, 3.7069547826975746`*^9}},
 CellID->1365226666,ExpressionUUID->"d7139b57-046b-46c7-a595-7d7b7cfd8505"],

Cell[CellGroupData[{

Cell["Package loading", "Subsection",
 CellChangeTimes->{{3.706508425138198*^9, 3.706508443339614*^9}},
 CellID->1649290914,ExpressionUUID->"934b2bdb-fdf5-497d-a4dd-6ab8f98a22ea"],

Cell[CellGroupData[{

Cell[TextData[{
 "This loads the package [",
 ButtonBox["AA5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"],
 "]:"
}], "Text",
 CellChangeTimes->{{3.706485666474164*^9, 3.706485687859078*^9}, 
   3.7064861150678463`*^9, {3.706866511513336*^9, 3.706866529743127*^9}},
 CellID->2060959769,ExpressionUUID->"17fbbd24-16c5-4b24-a50e-b595c9c0416f"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<https://raw.githubusercontent.com/antononcube/MathematicaForPrediction/\
master/MonadicProgramming/MonadicTracing.m\>\"", "]"}]], "Input",
 CellChangeTimes->{3.706485555813045*^9},
 CellID->1787095120,ExpressionUUID->"126cb6e4-962d-4b32-be4d-7dd965a06aa9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage example", "Subsection",
 CellChangeTimes->{{3.706508447569805*^9, 3.706508450056097*^9}, 
   3.707162183491956*^9},
 CellID->1001394898,ExpressionUUID->"d9b35026-072c-4e3c-b7bf-647d552ba5ad"],

Cell[CellGroupData[{

Cell["\<\
This generates a Maybe monad to be used in the example (for the prefix \
\[OpenCurlyDoubleQuote]Perhaps\[CloseCurlyDoubleQuote]):\
\>", "Text",
 CellChangeTimes->{{3.706486163812149*^9, 3.706486185929714*^9}, {
  3.706486278134554*^9, 3.706486294627267*^9}},
 CellID->614709147,ExpressionUUID->"192ee7c9-6b84-411e-a3f0-3413b8c627f7"],

Cell[BoxData[{
 RowBox[{"GenerateMaybeMonadCode", "[", "\"\<Perhaps\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"GenerateMaybeMonadSpecialCode", "[", "\"\<Perhaps\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.706486066089514*^9, 3.7064860775138817`*^9}, {
  3.7064862033792*^9, 3.706486242855033*^9}},
 CellID->2020291559,ExpressionUUID->"efa161c0-252f-4323-b9b9-6ee2dbfd5c54"]
}, Open  ]],

Cell[TextData[{
 "In following example we can see that pipeline functions of the Perhaps \
monad are interleaved with comment strings.\nProducing the grid of functions \
and comments happens \[OpenCurlyDoubleQuote]naturally\[CloseCurlyDoubleQuote] \
with the monad function ",
 StyleBox["TraceMonadEchoGrid", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.706486149913419*^9, 3.706486151169135*^9}, {
  3.706486499147016*^9, 3.706486507476796*^9}, {3.707162194057499*^9, 
  3.707162196384*^9}},
 CellID->1176289396,ExpressionUUID->"bcb635b5-5372-4bed-af85-0dd30397dc61"],

Cell["Note that :", "Text",
 CellChangeTimes->{{3.706486307708928*^9, 3.706486320527502*^9}},
 CellID->161424290,ExpressionUUID->"cc223954-2e10-408d-8935-672fe74343ca"],

Cell[TextData[{
 "1. the tracing is initiated by just using ",
 StyleBox["TraceMonadUnit", "Program"],
 "; "
}], "Text",
 CellChangeTimes->{{3.706486307708928*^9, 3.706486324090784*^9}, {
  3.706486516726819*^9, 3.7064865195368547`*^9}},
 CellID->786195869,ExpressionUUID->"84b2785d-4bbb-4e71-889b-2914e878cc99"],

Cell["\<\
2. pipeline functions (actual code) and comments are interleaved;\
\>", "Text",
 CellChangeTimes->{{3.706486307708928*^9, 3.706486326247044*^9}},
 CellID->127090292,ExpressionUUID->"60a8344c-1b73-4ae3-ba77-09f9ca0777fb"],

Cell[CellGroupData[{

Cell["\<\
3. putting a comment string after a pipeline function is optional.\
\>", "Text",
 CellChangeTimes->{{3.706486307708928*^9, 3.706486327353672*^9}},
 CellID->1407792526,ExpressionUUID->"943252c3-2425-42e1-8f06-47485ae4b919"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"10", ",", "15"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.706485998947001*^9, 3.706486001071738*^9}, 
   3.706486064398326*^9},
 CellID->1941645483,ExpressionUUID->"a12f0bdd-466e-4353-a1ba-7a7631c8a9cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TraceMonadUnit", "[", 
    RowBox[{"PerhapsUnit", "[", "data", "]"}], "]"}], 
   "\[DoubleLongRightArrow]", "\"\<lift to monad\>\"", 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "TraceMonadEchoContext", 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"PerhapsFilter", "[", 
    RowBox[{
     RowBox[{"#", ">", "3"}], "&"}], "]"}], "\[DoubleLongRightArrow]", 
   "\"\<filter current value\>\"", "\[DoubleLongRightArrow]", 
   "\[IndentingNewLine]", "PerhapsEcho", "\[DoubleLongRightArrow]", 
   "\"\<display current value\>\"", "\[DoubleLongRightArrow]", 
   "\[IndentingNewLine]", 
   RowBox[{"PerhapsWhen", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], ">", "3"}], "&"}], ",", 
     RowBox[{"PerhapsEchoFunction", "[", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"#", ",", "Red"}], "]"}], "&"}], "]"}]}], "]"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Perhaps", "[", 
      RowBox[{"#", "/", "4"}], "]"}], "&"}], ")"}], "\[DoubleLongRightArrow]",
    "\[IndentingNewLine]", "PerhapsEcho", "\[DoubleLongRightArrow]", 
   "\"\<display current value again\>\"", "\[DoubleLongRightArrow]", 
   "\[IndentingNewLine]", 
   RowBox[{"TraceMonadEchoGrid", "[", 
    RowBox[{
     RowBox[{"Grid", "[", 
      RowBox[{"#", ",", 
       RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}], "&"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.706485998947001*^9, 3.706486001071738*^9}, {
  3.706486064398326*^9, 3.706486094974123*^9}, {3.706486214917356*^9, 
  3.706486266064026*^9}},
 CellID->74132969,ExpressionUUID->"31fd638d-2c6f-4a1f-9e48-2c9305e37cb2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"context:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"data\"\>", "\[Rule]", 
     TagBox[
      RowBox[{"PerhapsUnit", "[", "data", "]"}],
      HoldForm]}], ",", 
    RowBox[{"\<\"binder\"\>", "\[Rule]", "DoubleLongRightArrow"}], ",", 
    RowBox[{"\<\"commands\"\>", "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{"\<\"comments\"\>", "\[Rule]", 
     RowBox[{"{", "\<\"lift to monad\"\>", "}"}]}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.707179019043874*^9},
 CellID->412294723,ExpressionUUID->"23cd51e9-3995-4af4-875d-17dd8d72e2c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "8", ",", "6", ",", "7", ",", "10", ",", "6"}], 
  "}"}]], "Echo",
 CellChangeTimes->{3.707179019071927*^9},
 CellID->1655164239,ExpressionUUID->"cf7c5dda-5cb8-445b-8b8e-f445f0b87709"],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", 
   RowBox[{"4", ",", "5", ",", "8", ",", "6", ",", "7", ",", "10", ",", "6"}],
    "}"}],
  StripOnInput->False,
  LineColor->RGBColor[1, 0, 0],
  FrontFaceColor->RGBColor[1, 0, 0],
  BackFaceColor->RGBColor[1, 0, 0],
  GraphicsColor->RGBColor[1, 0, 0],
  FontColor->RGBColor[1, 0, 0]]], "Echo",
 CellChangeTimes->{3.707179019135333*^9},
 CellID->1989685282,ExpressionUUID->"4cab2ac9-9b3b-4932-944d-3f5830e52251"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   FractionBox["5", "4"], ",", "2", ",", 
   FractionBox["3", "2"], ",", 
   FractionBox["7", "4"], ",", 
   FractionBox["5", "2"], ",", 
   FractionBox["3", "2"]}], "}"}]], "Echo",
 CellChangeTimes->{3.707179019228011*^9},
 CellID->25183490,ExpressionUUID->"187aa70a-580c-4eb9-8c98-439bcc0c080f"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox[
        TagBox[
         RowBox[{"PerhapsUnit", "[", "data", "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"lift to monad\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"PerhapsFilter", "[", 
           RowBox[{
             RowBox[{"#1", ">", "3"}], "&"}], "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"filter current value\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["PerhapsEcho", HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"display current value\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"PerhapsWhen", "[", 
           RowBox[{
             RowBox[{
               RowBox[{
                 
                 RowBox[{
                  "#1", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}], ">", "3"}], "&"}], ",", 
             RowBox[{"PerhapsEchoFunction", "[", 
               RowBox[{
                 RowBox[{"Style", "[", 
                   RowBox[{"#1", ",", "Red"}], "]"}], "&"}], "]"}]}], "]"}], 
         HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{
           RowBox[{"Perhaps", "[", 
             FractionBox["#1", "4"], "]"}], "&"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["PerhapsEcho", HoldForm], "Input", StripOnInput -> False]},
      "RowDefault"], 
     StyleBox["\<\"display current value again\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Echo",
 CellChangeTimes->{3.707179019315961*^9},
 CellID->204637971,ExpressionUUID->"e24d3de2-87b0-420d-ad83-34d5b0d48145"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["\<\
Another example is the ClCon pipeline in the sub-section \
\[OpenCurlyDoubleQuote]Monad design\[CloseCurlyDoubleQuote] in the previous \
section.\
\>", "Text",
 CellChangeTimes->{{3.7071716180617037`*^9, 3.707171658820084*^9}},
 CellID->1229059750,ExpressionUUID->"59fb002c-6926-4015-92f2-74b99ef23911"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Section",
 CellChangeTimes->{{3.706473780179228*^9, 3.706473781695821*^9}},
 CellID->162017757,ExpressionUUID->"ff1842f9-19cc-4409-b593-9440bb317441"],

Cell["\<\
This document presents a style of using monadic programming in Wolfram \
Language (Mathematica). The style has some shortcomings, but it definitely \
provides convenient features for day-to-day programming and in coming up with \
architectural designs.\
\>", "Text",
 CellChangeTimes->{{3.70695243518881*^9, 3.706952612310945*^9}, {
  3.706952871269822*^9, 3.70695289559147*^9}, {3.707132989053608*^9, 
  3.707133031354095*^9}, {3.707162283271*^9, 3.707162284427068*^9}},
 CellID->23177503,ExpressionUUID->"14dbb5de-e822-4782-9c88-0f9a16ba37a3"],

Cell["\<\
The style is based on WL\[CloseCurlyQuote]s basic language features. As a \
consequence it is fairly concise and produces light overhead.\
\>", "Text",
 CellChangeTimes->{{3.706952703279956*^9, 3.706952817121229*^9}, {
  3.707132884575491*^9, 3.707132887408607*^9}},
 CellID->849752814,ExpressionUUID->"af41be56-6fb9-4867-939f-bb2e3fbfbaab"],

Cell["\<\
Ideally, the packages for the code generation of the basic Maybe and State \
monads would serve as starting points for other more general or more \
specialized monadic programs.\
\>", "Text",
 CellChangeTimes->{{3.706952616822099*^9, 3.70695269938769*^9}, {
   3.706952823208901*^9, 3.706952860726721*^9}, 3.706952921390218*^9},
 CellID->1029292348,ExpressionUUID->"5aea7ab0-4ad0-4107-8a30-2a623957909d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.705575752091214*^9, 3.705575753192294*^9}},
 CellID->1335716251,ExpressionUUID->"3948d7b8-ae2e-4cdb-8ebf-2aad8d654803"],

Cell[CellGroupData[{

Cell["Monadic programming", "Subsection",
 CellChangeTimes->{{3.706865420810686*^9, 3.706865421822042*^9}, {
  3.706972886738592*^9, 3.706972898334289*^9}},
 CellID->1736468466,ExpressionUUID->"bd46b359-ec25-4d6c-8754-6ccfc859d9ca"],

Cell[TextData[{
 "[Wk1] Wikipedia entry: ",
 ButtonBox["Monad (functional programming)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 ", URL: ",
 ButtonBox["https://en.wikipedia.org/wiki/Monad_(functional_programming)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 " . "
}], "Text",
 CellChangeTimes->{{3.705575754330531*^9, 3.705575756704212*^9}, {
  3.705575967113101*^9, 3.70557597427962*^9}, {3.7055762229979763`*^9, 
  3.705576254763075*^9}, {3.70686521491098*^9, 3.706865216958602*^9}},
 CellID->522745332,ExpressionUUID->"054f0f5d-0060-4abd-bf97-4aa5782afe01"],

Cell[TextData[{
 "[Wk2] Wikipedia entry: ",
 ButtonBox["Monad transformer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_transformer"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Monad_transformer"],
 ", URL: ",
 ButtonBox["https://en.wikipedia.org/wiki/Monad_transformer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_transformer"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Monad_transformer"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706948625392528*^9, 3.706948662316517*^9}},
 CellID->425195047,ExpressionUUID->"00260eb6-5964-4a89-b47b-98f0b241df7d"],

Cell[TextData[{
 "[Wk3] Wikipedia entry: ",
 ButtonBox["Software Design Pattern",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Software_design_pattern"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Software_design_pattern"],
 ", URL: ",
 ButtonBox["https://en.wikipedia.org/wiki/Software_design_pattern",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Software_design_pattern"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Software_design_pattern"],
 " ."
}], "Text",
 CellChangeTimes->{{3.707132772051337*^9, 3.707132812599662*^9}},
 CellID->1575061360,ExpressionUUID->"f592aad0-5e9e-4f3c-a23a-6db8d4df7456"],

Cell[TextData[{
 "[H1] Haskell.org article: ",
 ButtonBox["Monad laws,",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://wiki.haskell.org/Monad_laws"], None},
  ButtonNote->"https://wiki.haskell.org/Monad_laws"],
 " URL: ",
 ButtonBox["https://wiki.haskell.org/Monad_laws",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://wiki.haskell.org/Monad_laws"], None},
  ButtonNote->"https://wiki.haskell.org/Monad_laws"],
 ". "
}], "Text",
 CellChangeTimes->{{3.7068652211315403`*^9, 3.706865257706036*^9}, {
  3.706865302465957*^9, 3.706865330630361*^9}},
 CellID->25360951,ExpressionUUID->"c63e4bc4-4d1d-49b4-945b-cea9d573248e"],

Cell[TextData[{
 "[H2] Sheng Liang, Paul Hudak, Mark Jones, ",
 ButtonBox["\[OpenCurlyDoubleQuote]Monad transformers and modular \
interpreters\[CloseCurlyDoubleQuote],",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://haskell.cs.yale.edu/wp-content/uploads/2011/02/POPL96-Modular-\
interpreters.pdf"], None},
  ButtonNote->
   "http://haskell.cs.yale.edu/wp-content/uploads/2011/02/POPL96-Modular-\
interpreters.pdf"],
 " (1995), Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles \
of programming languages. New York, NY: ACM. \
pp.\[NonBreakingSpace]333\[Dash]343. doi:10.1145/199448.199528."
}], "Text",
 CellChangeTimes->{{3.706948679438827*^9, 3.706948679515967*^9}, {
  3.706948745331781*^9, 3.7069488255111*^9}},
 CellID->1039741351,ExpressionUUID->"b8590722-f745-4e54-bc93-73b2f9ff26ad"],

Cell[TextData[{
 "[H3] Philip Wadler, ",
 ButtonBox["\[OpenCurlyDoubleQuote]The essence of functional programming\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/the-\
essence-of-functional-programming.pdf"], None},
  ButtonNote->
   "https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/the-\
essence-of-functional-programming.pdf"],
 ", (1992), 19\[CloseCurlyQuote]th Annual Symposium on Principles of \
Programming Languages, Albuquerque, New Mexico, January 1992."
}], "Text",
 CellChangeTimes->{{3.706972632571433*^9, 3.706972640332685*^9}, {
  3.7069727040885887`*^9, 3.70697270723738*^9}, {3.706972783898829*^9, 
  3.706972805038097*^9}, {3.706972842523799*^9, 3.706972866890851*^9}},
 CellID->858450618,ExpressionUUID->"8b23fa6d-ca99-4efa-bb0a-e0c9d2422131"]
}, Open  ]],

Cell[CellGroupData[{

Cell["R", "Subsection",
 CellChangeTimes->{3.706865443050728*^9},
 CellID->1184396180,ExpressionUUID->"3b76fc36-0013-4f29-9a9a-c5f79373513c"],

Cell[TextData[{
 "[R1] Hadley Wickham et al., ",
 ButtonBox["dplyr: A Grammar of Data Manipulation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/tidyverse/dplyr"], None},
  ButtonNote->"https://github.com/tidyverse/dplyr"],
 ", (2014), ",
 ButtonBox["tidyverse at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/tidyverse"], None},
  ButtonNote->"https://github.com/tidyverse"],
 ", URL: ",
 ButtonBox["https://github.com/tidyverse/dplyr",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/tidyverse/dplyr"], None},
  ButtonNote->"https://github.com/tidyverse/dplyr"],
 " .\n       (See also, ",
 ButtonBox["http://dplyr.tidyverse.org",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://dplyr.tidyverse.org"], None},
  ButtonNote->"http://dplyr.tidyverse.org"],
 " .)"
}], "Text",
 CellChangeTimes->{{3.706865446031752*^9, 3.706865457090899*^9}, {
  3.706865784963993*^9, 3.7068658441264057`*^9}, {3.706865874751796*^9, 
  3.70686601135145*^9}, {3.7068660994708767`*^9, 3.706866102507257*^9}, {
  3.707131810102888*^9, 3.7071318175709767`*^9}},
 CellID->1120673217,ExpressionUUID->"79c1ca99-0548-49a5-bbaf-dc4fcb7e5d40"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mathematica / Wolfram Language", "Subsection",
 CellChangeTimes->{{3.707131224950748*^9, 3.707131236863038*^9}},
 CellID->1723173929,ExpressionUUID->"481b500b-7afd-49ba-a431-464e2b8a6e2b"],

Cell[TextData[{
 "[WL1] Leonid Shifrin, \[OpenCurlyDoubleQuote]Metaprogramming in Wolfram \
Language\[CloseCurlyDoubleQuote], (2012), ",
 ButtonBox["Mathematica StackExchange",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com"], None},
  ButtonNote->"https://mathematica.stackexchange.com"],
 ". (Also posted at ",
 ButtonBox["Wolfram Community",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://community.wolfram.com"], None},
  ButtonNote->"http://community.wolfram.com"],
 " in 2017.) \n    URL of ",
 ButtonBox["the Mathematica StackExchange answer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/2352/34008"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/2352/34008"],
 ": ",
 ButtonBox["https://mathematica.stackexchange.com/a/2352/34008",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/2352/34008"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/2352/34008"],
 " .\n    URL of t",
 ButtonBox["he Wolfram Community post",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://community.wolfram.com/groups/-/m/t/1121273"], None},
  ButtonNote->"http://community.wolfram.com/groups/-/m/t/1121273"],
 ": ",
 ButtonBox["http://community.wolfram.com/groups/-/m/t/1121273",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://community.wolfram.com/groups/-/m/t/1121273"], None},
  ButtonNote->"http://community.wolfram.com/groups/-/m/t/1121273"],
 " ."
}], "Text",
 CellChangeTimes->{{3.707131239056904*^9, 3.707131261816205*^9}, {
  3.707131300461643*^9, 3.7071313630705767`*^9}, {3.707131420622026*^9, 
  3.7071314353833246`*^9}, {3.70713154933664*^9, 3.707131698841765*^9}, {
  3.707131820609413*^9, 3.707131822072027*^9}},
 CellID->419761261,ExpressionUUID->"faf93722-b3de-4d6a-8840-80f43c2a3e96"]
}, Open  ]],

Cell[CellGroupData[{

Cell["MathematicaForPrediction", "Subsection",
 CellChangeTimes->{{3.706865428346772*^9, 3.706865437684455*^9}},
 CellID->443733232,ExpressionUUID->"ddcd1c45-57b4-42b8-b9de-6d94f2dd69ad"],

Cell[TextData[{
 "[AA1] Anton Antonov, ",
 ButtonBox["\[OpenCurlyDoubleQuote]Implementation of Object-Oriented \
Programming Design Patterns in Mathematica\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Implementation-of-Object_Oriented-Programming-Design-\
Patterns-in-Mathematica.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Implementation-of-Object_Oriented-Programming-Design-\
Patterns-in-Mathematica.md"],
 ", (2016)  ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[", ",
  FontSlant->"Italic"],
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 "."
}], "Text",
 CellChangeTimes->{{3.705575754330531*^9, 3.705575756704212*^9}, {
  3.705575967113101*^9, 3.70557597427962*^9}, {3.7055762229979763`*^9, 
  3.705576259716416*^9}, {3.705578011040422*^9, 3.705578012711824*^9}, {
  3.706865177302528*^9, 3.706865180238822*^9}, {3.706866115695068*^9, 
  3.7068661183026342`*^9}},
 CellID->1761207840,ExpressionUUID->"3e7d924e-c475-4769-a9ab-6d973003a514"],

Cell[TextData[{
 "[AA2] Anton Antonov, ",
 ButtonBox["Maybe monad code generator Mathematica package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MaybeMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MaybeMonadCodeGenerator.m"],
 ",  (2017), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[". \n    ",
  FontSlant->"Italic"],
 "URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/MonadicProgramming/MaybeMonadCodeGenerator.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MaybeMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MaybeMonadCodeGenerator.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.7055774494316487`*^9, 3.705577450836499*^9}, {
  3.706456486871336*^9, 3.706456614514513*^9}, {3.706456666228743*^9, 
  3.706456689202498*^9}, {3.7068651821064*^9, 3.7068651842999163`*^9}},
 CellID->1853060279,ExpressionUUID->"21af01d1-4194-4cf7-9a01-ebd252630ad1"],

Cell[TextData[{
 "[AA3] Anton Antonov, ",
 ButtonBox["State monad code generator Mathematica package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 ", (2017), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[".\n    ",
  FontSlant->"Italic"],
 "URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/MonadicProgramming/StateMonadCodeGenerator.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706456619439595*^9, 3.706456747838007*^9}, {
  3.706865186763788*^9, 3.706865193986063*^9}},
 CellID->1576260359,ExpressionUUID->"975b899d-5d17-49d6-b445-4213d61eb93b"],

Cell[TextData[{
 "[AA4] Anton Antonov, ",
 ButtonBox["Monadic contextual classification Mathematica package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 ", (2017), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[".",
  FontSlant->"Italic"],
 "\n    URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/MonadicProgramming/MonadicContextualClassification.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706456625120866*^9, 3.706456626549644*^9}, {
  3.706456782588249*^9, 3.706456850214658*^9}, {3.706865196439308*^9, 
  3.706865200105933*^9}},
 CellID->849584321,ExpressionUUID->"7e5e8eb8-0208-42d4-b3d4-2aad1b3f573a"],

Cell[TextData[{
 "[AA5] Anton Antonov, ",
 ButtonBox["Monadic tracing Mathematica package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"],
 ", (2017), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[".\n    ",
  FontSlant->"Italic"],
 "URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/MonadicProgramming/MonadicTracing.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicTracing.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.70645685388082*^9, 3.706456930742619*^9}, {
  3.706865202334368*^9, 3.70686520471863*^9}},
 CellID->344914144,ExpressionUUID->"9b231601-8a87-49f5-a49b-742a9f8ac231"],

Cell[TextData[{
 "[AA6] Anton Antonov, ",
 ButtonBox["MathematicaForPrediction utilities",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MathematicaForPredictionUtilities.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MathematicaForPredictionUtilities.m"],
 ", (2014), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 ".\n    URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/MathematicaForPredictionUtilities.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MathematicaForPredictionUtilities.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MathematicaForPredictionUtilities.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706457216991127*^9, 3.706457262171836*^9}, {
  3.706865207025414*^9, 3.706865208678802*^9}},
 CellID->913654955,ExpressionUUID->"25ba558f-1fbf-44a5-bbde-a7d6eb3038d2"],

Cell[TextData[{
 "[AA7] Anton Antonov, ",
 ButtonBox["Simple monadic programming",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Simple-monadic-programming.pdf"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Simple-monadic-programming.pdf"],
 ", (2017), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 ".\n    (",
 StyleBox["Preliminary version, 40% done.)",
  FontSlant->"Italic"],
 "\n    URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/Documentation/Simple-monadic-programming.pdf",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Simple-monadic-programming.pdf"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Simple-monadic-programming.pdf"],
 " ."
}], "Text",
 CellChangeTimes->{{3.7064743180406857`*^9, 3.706474423475964*^9}, {
  3.706865210648033*^9, 3.706865211693806*^9}, {3.7068710650858383`*^9, 
  3.706871065445322*^9}, {3.706871108939992*^9, 3.706871109298428*^9}},
 CellID->1290752635,ExpressionUUID->"f3bc5541-a894-4495-acb1-ec4b08c1d51d"],

Cell[TextData[{
 "[AA8] Anton Antonov, ",
 ButtonBox["Generated State Monad Mathematica unit tests",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
UnitTests/GeneratedStateMonadTests.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
UnitTests/GeneratedStateMonadTests.m"],
 ", (2017), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 ".\n    URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/UnitTests/GeneratedStateMonadTests.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
UnitTests/GeneratedStateMonadTests.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
UnitTests/GeneratedStateMonadTests.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706949382285367*^9, 3.706949382352824*^9}, {
  3.706949422234884*^9, 3.7069494975570097`*^9}},
 CellID->1947218098,ExpressionUUID->"441c88c0-3314-4475-a1e2-88ce77264e1d"],

Cell[TextData[{
 "[AA9] Anton Antonov, ",
 ButtonBox["Classifier ensembles functions Mathematica package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 ", (2016), ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 ".\n    URL: ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction/blob/\
master/ClassifierEnsembles.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706871067334419*^9, 3.706871076447619*^9}, {
  3.706871114641288*^9, 3.70687119025852*^9}, {3.706949501820462*^9, 
  3.706949502011391*^9}},
 CellID->1391276453,ExpressionUUID->"c4f598a4-bea7-4026-813b-ca92dd30c43a"],

Cell[TextData[{
 "[AA10] Anton Antonov, ",
 ButtonBox["\[OpenCurlyDoubleQuote]ROC for classifier ensembles, \
bootstrapping, damaging, and interpolation\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/"], None},
  ButtonNote->
   "https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/"],
 ", (2016), ",
 ButtonBox["MathematicaForPrediction at WordPress",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com"], None},
  ButtonNote->"https://mathematicaforprediction.wordpress.com"],
 ".\n   URL: ",
 ButtonBox["https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/"], None},
  ButtonNote->
   "https://mathematicaforprediction.wordpress.com/2016/10/15/roc-for-\
classifier-ensembles-bootstrapping-damaging-and-interpolation/"],
 " ."
}], "Text",
 CellChangeTimes->{{3.706871307076328*^9, 3.706871335043732*^9}, {
  3.70687138491651*^9, 3.7068714717711487`*^9}, {3.706949504160592*^9, 
  3.706949504531608*^9}},
 CellID->1381397035,ExpressionUUID->"f7fca178-20ea-4afe-a1a1-a1b4a1c63f21"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "TutorialMoreAboutSection",
 CellChangeTimes->{{3.843042384656711*^9, 3.843042386024461*^9}},
 CellID->1551376301,ExpressionUUID->"fa78c8db-14d6-4a0d-8252-9af79d768b1a"],

Cell[TextData[ButtonBox["Book Chapters",
 BaseStyle->"Link",
 ButtonData->
  "paclet:AntonAntonov/SoftwareDesignMethodsWithWLBook/guide/BookChapters"]], \
"TutorialMoreAbout",
 CellChangeTimes->{{3.931435408931806*^9, 3.931435416039606*^9}},
 CellID->1382532680,ExpressionUUID->"00810be7-b19d-4a5b-b588-ebed1abc28cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Tech Notes", "RelatedTutorialsSection",
 CellID->453692220,ExpressionUUID->"fd145e54-70cd-4136-9c8b-87751d462be1"],

Cell[TextData[ButtonBox["Implementation of OOP Design Patterns in WL",
 BaseStyle->"Link",
 ButtonData->
  "paclet:AntonAntonov/SoftwareDesignMethodsWithWLBook/tutorial/\
ImplementationofOOPDesignPatternsinWL"]], "RelatedTutorials",
 CellChangeTimes->{{3.931435501118827*^9, 3.931435510172063*^9}},
 CellID->1638194690,ExpressionUUID->"5f6c00f0-7630-4f8d-bfeb-6febdf8abef3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->250316643,ExpressionUUID->"85cebb6b-2ccc-46b3-951e-50950e5f690e"],

Cell[TextData[{
 "New in: ",
 Cell["1.0.0", "HistoryData",
  CellTags->"New",ExpressionUUID->"87f36fa9-d999-4526-bbac-fe77020287ed"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"27b455ad-021f-4c60-8620-0f56b38cd71e"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "b46f5dfa-df01-46d6-a976-2d78f90d54a0"]
}], "History",
 CellChangeTimes->{{3.9314354185601473`*^9, 3.931435421934009*^9}},
 CellID->151354428,ExpressionUUID->"ec4583d7-7f88-403e-8680-7e303a0c66bc"],

Cell[CellGroupData[{

Cell["Categorization", "CategorizationSection",
 CellID->1193233348,ExpressionUUID->"9471436c-27fb-4df2-842f-88233c4ac6a1"],

Cell["Tech Note", "Categorization",
 CellLabel->"Entity Type",
 CellID->1470584150,ExpressionUUID->"c4a5dd96-fabf-436b-8fa7-0d1bb4b0dedd"],

Cell["AntonAntonov/SoftwareDesignMethodsWithWLBook", "Categorization",
 CellLabel->"Paclet Name",
 CellID->718515727,ExpressionUUID->"4e18aefa-631a-4bfe-a18c-7dcd37ef3a74"],

Cell["AntonAntonov`SoftwareDesignMethodsWithWLBook`", "Categorization",
 CellLabel->"Context",
 CellID->793276608,ExpressionUUID->"56882922-7d9f-41a1-a37b-2d6efc141998"],

Cell["\<\
AntonAntonov/SoftwareDesignMethodsWithWLBook/tutorial/\
Monadcodegenerationandextension\
\>", "Categorization",
 CellLabel->"URI",
 CellID->1021470080,ExpressionUUID->"beb56201-a656-42e9-952e-b46356238e53"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->863360442,ExpressionUUID->"0e602e4a-e48e-4868-b7db-c3530722f7fd"],

Cell["XXXX", "Keywords",
 CellID->2099429562,ExpressionUUID->"9a3b8c5d-52df-492f-bf0e-a18d53b3c677"]
}, Closed]]
}, Open  ]]
},
WindowSize->{700, 770},
WindowMargins->{{1316, Automatic}, {Automatic, 238}},
TaggingRules-><|"Paclet" -> "AntonAntonov/SoftwareDesignMethodsWithWLBook"|>,
FrontEndVersion->"14.0 for Mac OS X ARM (64-bit) (December 12, 2023)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "TechNotePageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"47aca810-fc78-46ef-9e94-fe476981b449"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "GenericPipeline"->{
  Cell[19107, 442, 1449, 34, 35, "DisplayFormulaNumbered",ExpressionUUID->"47873a1c-69dd-4521-9898-49ddd33f234f",
   CellTags->"GenericPipeline",
   CellID->1183639224]},
 "MaybePipeline"->{
  Cell[47136, 1166, 3466, 83, 42, "DisplayFormulaNumbered",ExpressionUUID->"7aadc862-95af-4b15-8022-061a53abaa63",
   CellTags->"MaybePipeline",
   CellID->1084870984]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"GenericPipeline", 555422, 11684},
 {"MaybePipeline", 555613, 11688}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 128, 1, 114, "Title",ExpressionUUID->"e283ef4d-b6ce-4504-9829-c5e67a5e70d0",
 CellID->1610336651],
Cell[CellGroupData[{
Cell[733, 27, 172, 2, 45, "Section",ExpressionUUID->"96249701-d33f-47e7-824f-d69d5ba90b6e",
 CellID->1392984828],
Cell[908, 31, 779, 12, 63, "Text",ExpressionUUID->"c5982a83-dbbc-4df1-8f43-e67cd2c8417b",
 CellID->29284602],
Cell[1690, 45, 403, 7, 44, "Text",ExpressionUUID->"db8f8301-d262-4bb0-8442-1f8f7db2d654",
 CellID->412550651],
Cell[2096, 54, 417, 7, 27, "ItemNumbered",ExpressionUUID->"c429c127-1b57-483f-994c-7b3ff6ba4ae7",
 CellID->1661578841],
Cell[2516, 63, 375, 5, 27, "ItemNumbered",ExpressionUUID->"d5840070-563f-4901-847d-afcef30bca7c",
 CellID->278235099],
Cell[2894, 70, 375, 5, 27, "ItemNumbered",ExpressionUUID->"595fe633-d74e-4b64-9719-8b7f16faf002",
 CellID->1225409374],
Cell[CellGroupData[{
Cell[3294, 79, 178, 2, 25, "Text",ExpressionUUID->"3f823950-da6c-47ef-9078-8d3da37f28ac",
 CellID->1087174088],
Cell[3475, 83, 552, 9, 42, "SubitemParagraph",ExpressionUUID->"0a0f9d77-3672-4a1b-98dc-19d8db5826db",
 CellID->1344028340]
}, Open  ]],
Cell[4042, 95, 2357, 48, 82, "Text",ExpressionUUID->"35f6a4aa-bde6-428a-b67c-d06c55d4de47",
 CellID->1851311234],
Cell[6402, 145, 344, 4, 25, "Text",ExpressionUUID->"20b5ee83-dfe7-4fcb-a1cd-47582a02317e",
 CellID->97348455],
Cell[6749, 151, 387, 5, 27, "ItemNumbered",ExpressionUUID->"803fe9ff-c8ea-4542-988c-2f5aa19121ce",
 CellID->1900427818],
Cell[7139, 158, 454, 8, 27, "ItemNumbered",ExpressionUUID->"ab2a4230-1ced-402c-ab2c-e1ef9471850c",
 CellID->966055295],
Cell[7596, 168, 420, 6, 27, "ItemNumbered",ExpressionUUID->"5e8f4872-088e-46fd-b3c9-512e93b93e2d",
 CellID->1514971745],
Cell[8019, 176, 1536, 31, 63, "Text",ExpressionUUID->"84a35e97-fe8e-4dec-b3de-b3b9be31ebc5",
 CellID->1563999383],
Cell[9558, 209, 771, 12, 63, "Text",ExpressionUUID->"45ef28f1-9b14-471b-8d0d-3b69266a1b8e",
 CellID->937790801],
Cell[10332, 223, 525, 7, 25, "Text",ExpressionUUID->"93b44d2d-dcff-47f6-937e-5d20f5543bf6",
 CellID->1067507074],
Cell[10860, 232, 1139, 21, 113, "Text",ExpressionUUID->"bebf7aa6-c2d0-409f-a8b2-992e10713f07",
 CellID->1513005680],
Cell[12002, 255, 1240, 21, 132, "Text",ExpressionUUID->"28aae1f2-d334-400f-8fe3-d85e271dc9e6",
 CellID->732599633],
Cell[13245, 278, 816, 16, 75, "Text",ExpressionUUID->"5a4ae84c-096b-4a3a-9ffb-67e80becf050",
 CellID->1278283580]
}, Open  ]],
Cell[CellGroupData[{
Cell[14098, 299, 176, 2, 45, "Section",ExpressionUUID->"d1fccbc0-d5b2-4f9d-a13e-350f83f862ca",
 CellID->685724472],
Cell[CellGroupData[{
Cell[14299, 305, 284, 4, 42, "Subsection",ExpressionUUID->"0be6b56c-1671-48de-b253-d564ba3e92b6",
 CellID->1573951102],
Cell[14586, 311, 1130, 30, 82, "Text",ExpressionUUID->"2eb51a6f-19de-48a4-b6f5-a0b00c200a07",
 CellID->692607568],
Cell[15719, 343, 347, 8, 25, "Text",ExpressionUUID->"b62f6f8e-f5c0-4033-9213-363e747d9f53",
 CellID->1294028636],
Cell[16069, 353, 375, 11, 25, "Text",ExpressionUUID->"aa810fcd-956a-4521-9510-b91d616b1f89",
 CellID->1172392083],
Cell[16447, 366, 563, 16, 47, "Text",ExpressionUUID->"21d0fefd-da60-4da9-ab0e-02118a14d30b",
 CellID->1231277756],
Cell[17013, 384, 413, 6, 25, "Text",ExpressionUUID->"c1ae988c-74ad-4836-838b-c7ec430bae6a",
 CellID->932822600],
Cell[17429, 392, 544, 13, 23, "Subitem",ExpressionUUID->"ac807d5e-8a5e-443d-ae2c-b3fa10318ca3",
 CellID->1318815100],
Cell[17976, 407, 732, 19, 23, "Subitem",ExpressionUUID->"640a0576-5290-42cd-9597-ec2233996da8",
 CellID->1146665013],
Cell[CellGroupData[{
Cell[18733, 430, 371, 10, 25, "Text",ExpressionUUID->"b2eabd56-5457-4ed4-947f-a14c551ad7d0",
 CellID->480625313],
Cell[19107, 442, 1449, 34, 35, "DisplayFormulaNumbered",ExpressionUUID->"47873a1c-69dd-4521-9898-49ddd33f234f",
 CellTags->"GenericPipeline",
 CellID->1183639224]
}, Open  ]],
Cell[CellGroupData[{
Cell[20593, 481, 765, 18, 68, "Text",ExpressionUUID->"a37d4c1e-647d-4df9-9d1f-7e32cb67e3d5",
 CellID->1283415607],
Cell[CellGroupData[{
Cell[21383, 503, 398, 10, 27, "Input",ExpressionUUID->"e0b05f37-79ee-4bd5-b7be-30782d275023",
 CellID->1040356381],
Cell[21784, 515, 725, 16, 26, "Output",ExpressionUUID->"5f748953-03a6-401d-8278-5fb73dfe5355",
 CellID->457841593]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22570, 538, 177, 2, 42, "Subsection",ExpressionUUID->"d4f5b456-b9a5-4d79-8778-5f59da95618b",
 CellID->509746350],
Cell[22750, 542, 1206, 28, 44, "Text",ExpressionUUID->"7c2127d1-5117-422e-bc3e-f0b7ff153937",
 CellID->994636567],
Cell[CellGroupData[{
Cell[23981, 574, 187, 2, 25, "Text",ExpressionUUID->"73d6da03-91fe-46cd-93b5-ce1664558960",
 CellID->844073321],
Cell[CellGroupData[{
Cell[24193, 580, 2461, 58, 171, "Input",ExpressionUUID->"81800f7b-b48b-47cd-8a06-9169944d8249",
 CellID->63333965],
Cell[26657, 640, 3717, 92, 82, "Output",ExpressionUUID->"e51006fd-618b-446a-9548-c278a0ffb191",
 CellID->1449544490]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30420, 738, 473, 11, 47, "Text",ExpressionUUID->"eb8d539b-2232-4678-a092-26435f104526",
 CellID->1439751862],
Cell[CellGroupData[{
Cell[30918, 753, 4494, 113, 275, "Input",ExpressionUUID->"1485a5d1-295f-4b4f-ba4b-0344dba20dc5",
 CellID->63810238],
Cell[35415, 868, 4109, 120, 100, "Output",ExpressionUUID->"035c3099-6c71-4b08-85e5-bc2979cfe74d",
 CellID->864330213]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39582, 995, 303, 4, 42, "Subsection",ExpressionUUID->"1bd7a009-c088-42ba-894d-cd0d4246dbf2",
 CellID->1218501583],
Cell[39888, 1001, 607, 12, 44, "Text",ExpressionUUID->"f9063bef-56f8-45cb-bf64-0dee868fb600",
 CellID->952047689],
Cell[40498, 1015, 501, 9, 23, "Subitem",ExpressionUUID->"4f33f7b9-0fef-443a-ad55-76dd336fe0f5",
 CellID->164855226],
Cell[41002, 1026, 755, 12, 40, "Subitem",ExpressionUUID->"eb51873d-9ee0-4cbe-842c-dd8520ea2e4a",
 CellID->467878752],
Cell[41760, 1040, 1214, 24, 46, "Subitem",ExpressionUUID->"add486e4-cf00-482b-8883-f2c8067fb2dd",
 CellID->1700553197],
Cell[42977, 1066, 1016, 23, 44, "Subitem",ExpressionUUID->"21ec4e04-f675-4cb9-a22f-0bd800fc7479",
 CellID->337724056],
Cell[43996, 1091, 675, 14, 25, "Text",ExpressionUUID->"bce7830c-1318-4f4c-a79e-143f33b41f8a",
 CellID->328930171]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[44720, 1111, 328, 4, 45, "Section",ExpressionUUID->"1bd4724c-d709-4f8e-bb6a-ec1416667d19",
 CellID->706476619],
Cell[45051, 1117, 516, 12, 25, "Text",ExpressionUUID->"7414315c-cb4d-4b6e-a86f-2bb5273ad456",
 CellID->315451270],
Cell[45570, 1131, 1074, 20, 66, "Text",ExpressionUUID->"947a7647-c656-49f3-9637-8e9eb0bf5d46",
 CellID->1799854094],
Cell[CellGroupData[{
Cell[46669, 1155, 464, 9, 25, "Text",ExpressionUUID->"b783ff87-c347-49b3-8752-927d110991bd",
 CellID->693106216],
Cell[47136, 1166, 3466, 83, 42, "DisplayFormulaNumbered",ExpressionUUID->"7aadc862-95af-4b15-8022-061a53abaa63",
 CellTags->"MaybePipeline",
 CellID->1084870984]
}, Open  ]],
Cell[CellGroupData[{
Cell[50639, 1254, 389, 7, 44, "Text",ExpressionUUID->"a92adb48-d48e-434a-8af8-e503cce6dee4",
 CellID->1290465058],
Cell[51031, 1263, 436, 11, 27, "Input",ExpressionUUID->"25727bc7-f64f-4724-a6d1-567bd2a17242",
 CellID->1408878753],
Cell[51470, 1276, 399, 10, 47, "Input",ExpressionUUID->"1387537b-9b18-43dd-b58d-b6ead8ecb7ee",
 CellID->870509849],
Cell[51872, 1288, 1114, 30, 66, "Input",ExpressionUUID->"1034fe4e-6b38-45d9-80ce-4b5d37100292",
 CellID->2000428779],
Cell[52989, 1320, 736, 18, 47, "Input",ExpressionUUID->"c2009b40-7938-49d8-83b4-e666ef6597ae",
 CellID->202511221],
Cell[53728, 1340, 604, 16, 27, "Input",ExpressionUUID->"cf63271a-ee18-4210-acb0-4401e7426b5c",
 CellID->1991994499]
}, Open  ]],
Cell[CellGroupData[{
Cell[54369, 1361, 556, 10, 47, "Text",ExpressionUUID->"74edad52-83f3-4ea6-92d8-fd7a1e20bd8b",
 CellID->181487963],
Cell[54928, 1373, 1521, 29, 66, "Input",ExpressionUUID->"3ed0972b-7211-45e2-81c8-20fa3a4367b3",
 CellID->841415401]
}, Open  ]],
Cell[CellGroupData[{
Cell[56486, 1407, 341, 6, 25, "Text",ExpressionUUID->"ccc9da7c-dfb3-4096-a93d-812a8ae266ac",
 CellID->488829112],
Cell[56830, 1415, 617, 12, 27, "Input",ExpressionUUID->"ecaec76f-ad17-4fb3-aa3d-f2f89a6bace3",
 CellID->1625935609],
Cell[CellGroupData[{
Cell[57472, 1431, 2385, 37, 275, "Input",ExpressionUUID->"e3cfe45c-d3b6-4f0e-b016-317f33337ced",
 CellID->370372388],
Cell[59860, 1470, 2125, 55, 98, "Output",ExpressionUUID->"7bad8870-44dc-4857-8d0c-bd8180d2fc31",
 CellID->1441116110],
Cell[61988, 1527, 287, 6, 22, "Echo",ExpressionUUID->"c8badb9c-8f68-4740-9345-14700e6f1d9b",
 CellID->1517889904],
Cell[62278, 1535, 311, 4, 26, "Output",ExpressionUUID->"e35b5df9-5862-42af-a00f-1a81a4ca7dfb",
 CellID->1217373815]
}, {2, 3, 4}]]
}, Open  ]],
Cell[62619, 1543, 280, 7, 25, "Text",ExpressionUUID->"01f941cf-9915-43c1-8a87-bd221287b81a",
 CellID->1325003736],
Cell[62902, 1552, 255, 3, 25, "Text",ExpressionUUID->"fa5e48f0-5c46-4be9-95ea-d093074762aa",
 CellID->2079855209],
Cell[63160, 1557, 424, 10, 25, "Text",ExpressionUUID->"6469ebd9-97c4-4f09-b226-f6966e195b6c",
 CellID->1535175444],
Cell[CellGroupData[{
Cell[63609, 1571, 240, 3, 42, "Subsection",ExpressionUUID->"9ac5e434-9f66-47ff-94b6-48b3f2ebfaf8",
 CellID->1825152250],
Cell[63852, 1576, 504, 9, 25, "Text",ExpressionUUID->"8804fdcc-e919-4fef-8f45-3e21802a3e03",
 CellID->677452002],
Cell[CellGroupData[{
Cell[64381, 1589, 335, 6, 44, "Text",ExpressionUUID->"75d13069-5c1f-40eb-951e-4ad3a340c459",
 CellID->2124984867],
Cell[CellGroupData[{
Cell[64741, 1599, 3828, 101, 223, "Input",ExpressionUUID->"881be047-2f89-4e16-9ea9-fc40f1e19c00",
 CellID->1967610059],
Cell[68572, 1702, 4193, 121, 146, "Output",ExpressionUUID->"ef261c48-389e-4437-9c63-0251a9f9913f",
 CellID->521581460]
}, {2}]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72835, 1831, 243, 3, 45, "Section",ExpressionUUID->"39c20c47-e5a7-4e38-8148-f039ed289c58",
 CellID->191351166],
Cell[73081, 1836, 474, 12, 44, "Text",ExpressionUUID->"5fbb4f03-e99b-488f-a732-5d1fc5827bfa",
 CellID->1256027403],
Cell[73558, 1850, 337, 7, 44, "Text",ExpressionUUID->"54e527d9-bbfc-487d-be65-4a63db2ef400",
 CellID->288312211],
Cell[CellGroupData[{
Cell[73920, 1861, 308, 7, 25, "Text",ExpressionUUID->"3cab742e-5907-4faf-a3bf-b2a0930ca392",
 CellID->940222645],
Cell[74231, 1870, 3754, 88, 68, "DisplayFormula",ExpressionUUID->"8db3f4f8-ad70-4be6-9a8e-87eae4e8c5c0",
 CellID->1137319889]
}, Open  ]],
Cell[CellGroupData[{
Cell[78022, 1963, 241, 4, 25, "Text",ExpressionUUID->"e32d0fa8-1588-44ce-b803-b740729b0a1a",
 CellID->183432476],
Cell[78266, 1969, 870, 18, 27, "Input",ExpressionUUID->"71ba696d-0dc1-4c74-9a36-ef61a02e09f3",
 CellID->1310590687],
Cell[79139, 1989, 601, 13, 27, "Input",ExpressionUUID->"82df4a2e-bb14-43f1-b8e5-e5867dc53dac",
 CellID->357909130]
}, Open  ]],
Cell[79755, 2005, 369, 7, 25, "Text",ExpressionUUID->"b4365f4d-317c-4ef9-94e6-c06db43a7686",
 CellID->277052663],
Cell[80127, 2014, 313, 5, 44, "Text",ExpressionUUID->"b900c904-c30c-42cb-831c-282184e51f9a",
 CellID->679560345],
Cell[CellGroupData[{
Cell[80465, 2023, 263, 3, 42, "Subsection",ExpressionUUID->"a7ee32da-976a-4d19-a8e0-0cdee988b53e",
 CellID->1052683669],
Cell[80731, 2028, 1052, 27, 63, "Text",ExpressionUUID->"6579cd99-cf7c-4dd5-ba9c-67f1b3116edc",
 CellID->1484140897],
Cell[CellGroupData[{
Cell[81808, 2059, 352, 4, 25, "Text",ExpressionUUID->"de0fe775-29f6-4590-8ff4-fccbe44d8e78",
 CellID->933495974],
Cell[82163, 2065, 160756, 2640, 465, "Input",ExpressionUUID->"02e76639-b36b-4ac2-9de0-5745299eecae",
 Evaluatable->False,
 CellID->1898793683]
}, Open  ]],
Cell[242934, 4708, 337, 6, 44, "Text",ExpressionUUID->"6e2ed11e-10ad-4bb5-87aa-f64e163e5ac6",
 CellID->1418435761]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[243320, 4720, 280, 4, 45, "Section",ExpressionUUID->"27c3b24a-f93e-422a-9fed-aa2a67921a8e",
 CellID->433869780],
Cell[243603, 4726, 910, 16, 82, "Text",ExpressionUUID->"4dfde840-b3a1-4115-b417-e785cf38aa72",
 CellID->1342410895],
Cell[244516, 4744, 379, 7, 44, "Text",ExpressionUUID->"20a73e87-2c23-4af9-9a4b-385193b654eb",
 CellID->436716883],
Cell[CellGroupData[{
Cell[244920, 4755, 369, 5, 42, "Subsection",ExpressionUUID->"36bc6f49-6b75-4ab9-9824-b43c78ba38c1",
 CellID->1949030782],
Cell[245292, 4762, 1032, 20, 63, "Text",ExpressionUUID->"f6444fe1-6ac1-4b55-b7de-bff57d2824f5",
 CellID->1792285383],
Cell[CellGroupData[{
Cell[246349, 4786, 176, 2, 25, "Text",ExpressionUUID->"aac22107-cdb4-42c5-bddf-af1810d08351",
 CellID->187315612],
Cell[246528, 4790, 331, 5, 66, "Input",ExpressionUUID->"c9771917-4223-4e44-ac0f-89c5e2377250",
 CellID->2464382],
Cell[246862, 4797, 238, 4, 27, "Input",ExpressionUUID->"b6b31796-da37-4ef4-8724-56d6590efeea",
 CellID->616678981],
Cell[247103, 4803, 262, 7, 27, "Input",ExpressionUUID->"97a62ee8-9d3a-4056-96c4-859758eb6b00",
 CellID->767553245],
Cell[CellGroupData[{
Cell[247390, 4814, 2415, 38, 275, "Input",ExpressionUUID->"8750fb9d-9f56-4570-a1b9-d66cc5f685a9",
 CellID->333121186],
Cell[249808, 4854, 2322, 58, 160, "Output",ExpressionUUID->"3eb8cd14-e2f0-4a57-84a6-9d6df2c17222",
 CellID->277905373],
Cell[CellGroupData[{
Cell[252155, 4916, 289, 6, 22, "Echo",ExpressionUUID->"c7ccaa62-18e9-42b9-bbff-0f3dd3a00671",
 CellID->2126155433],
Cell[252447, 4924, 338, 8, 61, "Echo",ExpressionUUID->"10a9d822-3769-44f9-a286-a6c90d0a7919",
 CellID->166476351]
}, Open  ]],
Cell[252800, 4935, 481, 7, 26, "Output",ExpressionUUID->"101b1923-4d75-4458-abe3-6e0d38541c82",
 CellID->1944322863]
}, {2, 3, 4, 5}]]
}, Open  ]],
Cell[253314, 4946, 388, 8, 25, "Text",ExpressionUUID->"77c8e881-4ed0-4aed-a35f-e138bddaef2e",
 CellID->2123185689]
}, Open  ]],
Cell[CellGroupData[{
Cell[253739, 4959, 266, 3, 42, "Subsection",ExpressionUUID->"f1c7867a-8116-49d3-ae55-f9ba206bb7df",
 CellID->1793596471],
Cell[254008, 4964, 714, 16, 25, "Text",ExpressionUUID->"c2377f9e-82ba-4a36-b33d-02e46aa2f5bc",
 CellID->747935158],
Cell[CellGroupData[{
Cell[254747, 4984, 516, 10, 25, "Text",ExpressionUUID->"13e286af-34f1-44d2-8106-8b2cc66d9f20",
 CellID->1324414615],
Cell[255266, 4996, 3088, 81, 99, "DisplayFormula",ExpressionUUID->"a905f612-0261-463f-8ce5-4b4b110c37dd",
 CellID->768433150]
}, Open  ]],
Cell[258369, 5080, 838, 17, 75, "Text",ExpressionUUID->"4c3e88b3-29e3-4a2b-879c-dd02c8443065",
 CellID->89298992],
Cell[CellGroupData[{
Cell[259232, 5101, 535, 13, 25, "Text",ExpressionUUID->"9f349b73-0f3e-44bf-8b7d-92cfafae87a4",
 CellID->1904572938],
Cell[259770, 5116, 382, 6, 66, "Input",ExpressionUUID->"7bd82bd3-d278-47d8-a72e-804236dad90b",
 CellID->1913610431]
}, Open  ]],
Cell[CellGroupData[{
Cell[260189, 5127, 405, 5, 25, "Text",ExpressionUUID->"4f720325-680e-4a8e-926f-bdbe70162479",
 CellID->1335416345],
Cell[260597, 5134, 277, 4, 27, "Input",ExpressionUUID->"cd42dff2-2d60-47dc-8e18-f330223e480d",
 CellID->990915618]
}, Open  ]],
Cell[CellGroupData[{
Cell[260911, 5143, 609, 10, 63, "Text",ExpressionUUID->"ecf2fb58-ff58-4763-9553-ca6d54bf0561",
 CellID->583109241],
Cell[CellGroupData[{
Cell[261545, 5157, 2329, 49, 256, "Input",ExpressionUUID->"bd155032-8d84-4bb9-aed9-917f1d62e51a",
 CellID->1349132226],
Cell[CellGroupData[{
Cell[263899, 5210, 536, 15, 22, "Echo",ExpressionUUID->"a1b084d2-218e-4557-a179-562275621091",
 CellID->1732977356],
Cell[264438, 5227, 401, 10, 22, "Echo",ExpressionUUID->"d0636158-b69c-413b-b7c7-df89f6db909d",
 CellID->1977201678],
Cell[264842, 5239, 818, 21, 42, "Echo",ExpressionUUID->"41cfee8a-1ebb-492d-a494-5364b7f478c5",
 CellID->666648468],
Cell[265663, 5262, 523, 15, 22, "Echo",ExpressionUUID->"81ffbdf2-e19e-496d-9919-2c7338456ddf",
 CellID->938615277],
Cell[266189, 5279, 536, 15, 22, "Echo",ExpressionUUID->"eb430b05-8188-436e-be0a-7aad2fb6af57",
 CellID->2039573324],
Cell[266728, 5296, 220, 5, 22, "Echo",ExpressionUUID->"b0c3d852-f528-4a59-9cd6-712b47ebdefc",
 CellID->974883054]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[267033, 5310, 232, 3, 45, "Section",ExpressionUUID->"f73cb4ef-216e-41dc-b13a-2fcc82e70820",
 CellID->1706745615],
Cell[267268, 5315, 298, 6, 25, "Text",ExpressionUUID->"d8582bf6-91c3-4e88-b966-329d1c0c3976",
 CellID->1334478326],
Cell[267569, 5323, 447, 9, 25, "Text",ExpressionUUID->"b3b9a261-3cb6-46f9-891f-09582de545f8",
 CellID->258015814],
Cell[CellGroupData[{
Cell[268041, 5336, 252, 3, 42, "Subsection",ExpressionUUID->"a322ba5e-7633-40b5-b761-66eddfc0e9cd",
 CellID->702302605],
Cell[268296, 5341, 613, 11, 44, "Text",ExpressionUUID->"1e097925-835d-45e9-bdcc-8f13ad683243",
 CellID->1029758323],
Cell[CellGroupData[{
Cell[268934, 5356, 240, 6, 25, "Text",ExpressionUUID->"e075cb8e-c930-4a60-a1e1-5118c6c42187",
 CellID->577423488],
Cell[CellGroupData[{
Cell[269199, 5366, 859, 21, 104, "Input",ExpressionUUID->"32c54ffb-3655-423a-ad8a-940d659675f5",
 CellID->277962023],
Cell[CellGroupData[{
Cell[270083, 5391, 389, 10, 22, "Echo",ExpressionUUID->"688c4582-089a-4cef-b03a-d7cb7c2b2608",
 CellID->930788336],
Cell[270475, 5403, 390, 10, 22, "Echo",ExpressionUUID->"1f5999ad-6139-489d-9619-faf70fad73c1",
 CellID->1488678404]
}, Open  ]],
Cell[270880, 5416, 632, 13, 26, "Output",ExpressionUUID->"44c1cfb7-0059-4dad-9eab-6f7d6db489a6",
 CellID->2033448478]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[271561, 5435, 288, 7, 25, "Text",ExpressionUUID->"12d392de-0ef1-47f3-a187-81c391c65b4f",
 CellID->1113811388],
Cell[CellGroupData[{
Cell[271874, 5446, 843, 21, 104, "Input",ExpressionUUID->"3eddd6bc-7dd8-4960-a1cb-f04187c81f3b",
 CellID->213047217],
Cell[CellGroupData[{
Cell[272742, 5471, 389, 10, 22, "Echo",ExpressionUUID->"9068f8f4-e238-455f-9392-924e83c3ad71",
 CellID->829336570],
Cell[273134, 5483, 307, 7, 42, "Echo",ExpressionUUID->"7c48de21-ae57-4ac7-849a-76fe3a485fbf",
 CellID->1490862960]
}, Open  ]],
Cell[273456, 5493, 334, 5, 26, "Output",ExpressionUUID->"6b5e2a5a-5133-4b9f-a0e1-e8a4362937f1",
 CellID->94575524]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[273851, 5505, 294, 4, 42, "Subsection",ExpressionUUID->"ec93a429-8a52-4db5-8d95-ef6bb3f78423",
 CellID->392933088],
Cell[274148, 5511, 369, 7, 25, "Text",ExpressionUUID->"d6884380-37bc-4c7b-b0ef-609a791d2579",
 CellID->514195491],
Cell[CellGroupData[{
Cell[274542, 5522, 444, 11, 25, "Text",ExpressionUUID->"706dae08-9860-4dcd-b25b-feff9bbbca25",
 CellID->609421709],
Cell[CellGroupData[{
Cell[275011, 5537, 1909, 46, 180, "Input",ExpressionUUID->"6c0bab9e-4dc1-48d9-a9fb-05af1f86ffaa",
 CellID->1201150620],
Cell[CellGroupData[{
Cell[276945, 5587, 390, 10, 22, "Echo",ExpressionUUID->"2c23928f-d185-44dc-8700-fb87d57cbebd",
 CellID->1392188540],
Cell[277338, 5599, 244, 5, 22, "Echo",ExpressionUUID->"dad555c9-0db5-4e54-8bc9-8787d4e06d91",
 CellID->1678457715],
Cell[277585, 5606, 609, 17, 22, "Echo",ExpressionUUID->"1c9c13d0-31c7-4bdf-a9f7-2acf13d70ba0",
 CellID->493629013]
}, Open  ]],
Cell[278209, 5626, 1156, 24, 26, "Output",ExpressionUUID->"e201dd2a-a861-434b-850b-4c26de87eb52",
 CellID->693493130]
}, Open  ]]
}, Open  ]],
Cell[279392, 5654, 635, 14, 63, "Text",ExpressionUUID->"2e69ff5b-28f0-498e-859b-0fdfdce41317",
 CellID->1145283641]
}, Open  ]],
Cell[CellGroupData[{
Cell[280064, 5673, 304, 4, 42, "Subsection",ExpressionUUID->"ad06c44e-6225-4a3d-92e5-fca04cff0d52",
 CellID->886226226],
Cell[280371, 5679, 525, 13, 47, "Text",ExpressionUUID->"c7953a9f-49bd-4a0a-9e49-d77998db6d4e",
 CellID->2005088437],
Cell[280899, 5694, 712, 17, 25, "Text",ExpressionUUID->"351f69fb-d1c4-4e95-ba4c-a2d9d8dafade",
 CellID->1207971935],
Cell[CellGroupData[{
Cell[281636, 5715, 356, 9, 25, "Text",ExpressionUUID->"8daa4244-6789-429d-aba2-aa51fdc802be",
 CellID->73912807],
Cell[CellGroupData[{
Cell[282017, 5728, 522, 13, 27, "Input",ExpressionUUID->"cdda341d-7c9d-4eb9-96d9-fdd621fcf292",
 CellID->1006999283],
Cell[282542, 5743, 473, 8, 26, "Output",ExpressionUUID->"e7b81ee4-b0fc-4d73-9c14-2c1973723e75",
 CellID->318327374]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[283064, 5757, 271, 6, 25, "Text",ExpressionUUID->"4e5b54b4-33fe-4992-8767-330138f98d60",
 CellID->746410141],
Cell[CellGroupData[{
Cell[283360, 5767, 349, 8, 27, "Input",ExpressionUUID->"d4851193-4d97-4714-93b9-af996e45279c",
 CellID->1463257660],
Cell[283712, 5777, 386, 6, 26, "Output",ExpressionUUID->"b44af661-cc50-49a8-b187-fa0e89db080d",
 CellID->2136249823]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[284147, 5789, 348, 8, 25, "Text",ExpressionUUID->"1554ef20-b8a0-4c62-ac77-02749e8bcba8",
 CellID->171680968],
Cell[CellGroupData[{
Cell[284520, 5801, 702, 17, 47, "Input",ExpressionUUID->"f5ca4c8e-805b-4017-9692-dba12ec9d1bd",
 CellID->1371491255],
Cell[285225, 5820, 470, 9, 26, "Output",ExpressionUUID->"a4101487-716b-4e30-8c14-2aeb3ec4f0c6",
 CellID->1711539534]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[285744, 5835, 341, 7, 25, "Text",ExpressionUUID->"5b370f35-45d4-481f-bed7-7fc7feffa9f4",
 CellID->301496373],
Cell[CellGroupData[{
Cell[286110, 5846, 643, 17, 47, "Input",ExpressionUUID->"f0c412d0-0049-4d2f-a3f1-27fff25975a1",
 CellID->1335617738],
Cell[286756, 5865, 676, 14, 26, "Output",ExpressionUUID->"fd4a0795-2a1a-4b36-821f-0a3066b6b480",
 CellID->80760475]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[287481, 5885, 665, 15, 44, "Text",ExpressionUUID->"66538ef9-063f-4b8b-a297-312bdcb2e577",
 CellID->131638421],
Cell[CellGroupData[{
Cell[288171, 5904, 618, 16, 47, "Input",ExpressionUUID->"b0290a9e-db17-4df7-b38b-41ddaef39278",
 CellID->538785337],
Cell[288792, 5922, 1787, 43, 65, "Output",ExpressionUUID->"63aa2490-492b-4fa8-9f69-d45773268aab",
 CellID->1574103207]
}, Open  ]]
}, Open  ]],
Cell[290606, 5969, 582, 14, 25, "Text",ExpressionUUID->"076aeb7a-9697-4650-9f2f-f7d1a4ef828b",
 CellID->1101552656]
}, Open  ]],
Cell[CellGroupData[{
Cell[291225, 5988, 182, 2, 42, "Subsection",ExpressionUUID->"5561bc74-5ca5-4e7c-b268-0343ffcd7f49",
 CellID->338968605],
Cell[CellGroupData[{
Cell[291432, 5994, 365, 6, 25, "Text",ExpressionUUID->"a98ecdd8-54b4-40fb-8cdd-aa5dead9a88a",
 CellID->1918712391],
Cell[291800, 6002, 736, 16, 27, "Input",ExpressionUUID->"bc41d062-6208-4ea8-abfc-8c5014ded116",
 CellID->1184712185],
Cell[292539, 6020, 1154, 26, 47, "Input",ExpressionUUID->"5cca9225-4c4c-49c2-ac36-a4d08d57c019",
 CellID->2136801958],
Cell[CellGroupData[{
Cell[293718, 6050, 718, 12, 27, "Input",ExpressionUUID->"fd61fcbc-4da6-4fd6-9c8c-a6452a87928d",
 CellID->861479325],
Cell[CellGroupData[{
Cell[294461, 6066, 205, 5, 22, "Echo",ExpressionUUID->"0e77c4be-b4b0-4004-b86b-32c5b18f5b45",
 CellID->548267201],
Cell[294669, 6073, 263, 6, 22, "Echo",ExpressionUUID->"165aaf1f-dd77-4feb-b191-308e423291b3",
 CellID->2022001577],
Cell[294935, 6081, 662, 20, 25, "Echo",ExpressionUUID->"61742f1d-d0ee-42ce-bfca-81dab2050809",
 CellID->1999274511],
Cell[295600, 6103, 260, 6, 22, "Echo",ExpressionUUID->"8d6634e3-b4cd-45e7-90f1-359c142ee2c1",
 CellID->130081768]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[295945, 6118, 263, 3, 45, "Section",ExpressionUUID->"10d2c5e4-70aa-45f8-8cd5-e3de372145a6",
 CellID->145922130],
Cell[296211, 6123, 306, 5, 44, "Text",ExpressionUUID->"6757e5b3-c396-4f46-b6f3-6d8da16ce97f",
 CellID->86914036],
Cell[296520, 6130, 241, 4, 27, "ItemNumbered",ExpressionUUID->"c60b14e1-6d51-4f18-b9f1-fcc8ad642b5b",
 CellID->475323092],
Cell[296764, 6136, 205, 2, 27, "ItemNumbered",ExpressionUUID->"5148d424-7cdb-4616-931e-99d6f36f3dc7",
 CellID->116040404],
Cell[296972, 6140, 235, 4, 27, "ItemNumbered",ExpressionUUID->"7d6a6161-53e4-416c-8873-e2f626ec1412",
 CellID->375918552],
Cell[297210, 6146, 237, 4, 27, "ItemNumbered",ExpressionUUID->"5c3f639d-d7e4-4867-9e39-a1d84590b653",
 CellID->166213990],
Cell[297450, 6152, 246, 4, 27, "ItemNumbered",ExpressionUUID->"c5c5ba2f-ad55-480e-ab0b-922ed87d0658",
 CellID->1829788830],
Cell[297699, 6158, 275, 4, 27, "ItemNumbered",ExpressionUUID->"cc0c1b03-f976-48ad-b6cc-d7f65af1510b",
 CellID->1295040770],
Cell[CellGroupData[{
Cell[297999, 6166, 421, 12, 27, "ItemNumbered",ExpressionUUID->"94dc1c0b-0b2a-4e31-997d-1486e1184881",
 CellID->1003459045],
Cell[298423, 6180, 89236, 1467, 485, "Input",ExpressionUUID->"145ff2c6-64bf-48aa-b9e6-f81a8b1997b5",
 Evaluatable->False,
 CellID->947089424]
}, Open  ]],
Cell[CellGroupData[{
Cell[387696, 7652, 178, 2, 42, "Subsection",ExpressionUUID->"52986d88-293a-4986-b8e2-e37521f008e2",
 CellID->583157604],
Cell[387877, 7656, 641, 14, 44, "Text",ExpressionUUID->"c7dc9b95-c11f-4847-9c34-f78639a92d1e",
 CellID->14485520],
Cell[388521, 7672, 253, 3, 25, "Text",ExpressionUUID->"ec3c36c6-2623-4645-a96c-e48a8347c0c3",
 CellID->792482529],
Cell[388777, 7677, 276, 3, 25, "Text",ExpressionUUID->"b7bc3487-d283-41db-84eb-e68c66e26be2",
 CellID->560286209],
Cell[389056, 7682, 263, 3, 25, "Text",ExpressionUUID->"c00b2349-2fa1-404d-8e1a-4f7707ff7969",
 CellID->14522568],
Cell[389322, 7687, 288, 3, 25, "Text",ExpressionUUID->"777a462e-de87-42a2-9d48-79bbce2a0e79",
 CellID->1415148265],
Cell[389613, 7692, 372, 7, 25, "Text",ExpressionUUID->"52829c74-8862-48af-9a7f-a03d6081c633",
 CellID->1015499330],
Cell[389988, 7701, 237, 3, 25, "Text",ExpressionUUID->"072090b4-5fb8-49e6-b135-e3efec2987a4",
 CellID->1444696601],
Cell[390228, 7706, 466, 8, 63, "Text",ExpressionUUID->"6c8f532e-fdbd-489e-8567-f6a209d92781",
 CellID->1565660025]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[390743, 7720, 298, 4, 45, "Section",ExpressionUUID->"006689c2-755d-4b17-9c08-b2a77c6bb5b7",
 CellID->930913484],
Cell[391044, 7726, 553, 9, 44, "Text",ExpressionUUID->"5bbfc645-a359-4488-b7bc-c9140da1cc65",
 CellID->1444557193],
Cell[391600, 7737, 799, 12, 82, "Text",ExpressionUUID->"b4ba89bd-d78d-46e6-8f04-c5358aa27e76",
 CellID->1370113416],
Cell[CellGroupData[{
Cell[392424, 7753, 183, 2, 43, "Subsubsection",ExpressionUUID->"69371a83-c541-4a16-861f-2299d8364f00",
 CellID->29035931],
Cell[392610, 7757, 445, 7, 106, "Text",ExpressionUUID->"c11ef198-b192-4ce3-bd91-8c770f6b97f2",
 CellID->528104448],
Cell[393058, 7766, 452, 8, 44, "Text",ExpressionUUID->"7bc4d54f-fb04-485f-b5a0-5b0bbd6e2e2c",
 CellID->301544485],
Cell[393513, 7776, 585, 10, 63, "Text",ExpressionUUID->"246b0d65-66a0-4eab-ac8b-1b50c0245719",
 CellID->2144236122],
Cell[394101, 7788, 447, 8, 44, "Text",ExpressionUUID->"9db3a1a0-2e6d-46d6-a58c-ecc772d56cba",
 CellID->1253422147],
Cell[394551, 7798, 946, 14, 101, "Text",ExpressionUUID->"b3ce420f-68e8-4b04-839d-edff5a247c91",
 CellID->1598931206]
}, Open  ]],
Cell[CellGroupData[{
Cell[395534, 7817, 208, 3, 43, "Subsubsection",ExpressionUUID->"d2208e18-16f9-4530-a441-85ae76c254f0",
 CellID->1773904331],
Cell[395745, 7822, 442, 7, 44, "Text",ExpressionUUID->"bdb51217-5168-4f06-9222-714ea37edb75",
 CellID->494619816],
Cell[396190, 7831, 741, 12, 63, "Text",ExpressionUUID->"152518a7-5e09-4162-b046-ec5fe57f741d",
 CellID->166049975],
Cell[396934, 7845, 786, 13, 82, "Text",ExpressionUUID->"5bd6a159-c121-4e0f-b356-9c1edd1affaa",
 CellID->1220672372]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[397769, 7864, 359, 8, 45, "Section",ExpressionUUID->"7b9ec493-6d38-40a6-8e47-5b4b8b88636b",
 CellID->929276413],
Cell[398131, 7874, 386, 7, 44, "Text",ExpressionUUID->"06955396-b033-43ac-8c79-3b44cf9306c2",
 CellID->1847592307],
Cell[CellGroupData[{
Cell[398542, 7885, 176, 2, 42, "Subsection",ExpressionUUID->"6e6c31f1-c786-4977-a8e4-b7a79656eec3",
 CellID->2017851776],
Cell[398721, 7889, 451, 8, 25, "Text",ExpressionUUID->"7622357c-c3fb-4440-8d00-aade17ab02b9",
 CellID->973045808],
Cell[399175, 7899, 215, 2, 25, "Text",ExpressionUUID->"97b92905-6b12-48eb-92bc-b5f336b0470d",
 CellID->892923151],
Cell[399393, 7903, 430, 7, 25, "Text",ExpressionUUID->"b993be0d-d01a-4696-b231-dfe5befa484c",
 CellID->743673621],
Cell[399826, 7912, 341, 4, 25, "Text",ExpressionUUID->"47535644-3a53-4d4d-8c8e-b82579ce4aaa",
 CellID->567722607],
Cell[400170, 7918, 1076, 25, 25, "Text",ExpressionUUID->"c13f1342-4071-43ef-bcfe-3f374c2eb2fe",
 CellID->444012228],
Cell[401249, 7945, 276, 5, 25, "Text",ExpressionUUID->"30f9f7bf-b53c-4b65-b460-fe180e3fec09",
 CellID->7842671],
Cell[401528, 7952, 218, 3, 25, "Text",ExpressionUUID->"969a6c80-fd82-4e6d-bce9-42597d3c9c72",
 CellID->815269030],
Cell[401749, 7957, 327, 6, 25, "Text",ExpressionUUID->"c1cd2266-7280-4995-ad70-e894c7e3ea04",
 CellID->1280919350],
Cell[402079, 7965, 606, 13, 25, "Text",ExpressionUUID->"93073334-1867-413e-8d02-f242d29e0981",
 CellID->2035437922]
}, Open  ]],
Cell[CellGroupData[{
Cell[402722, 7983, 189, 2, 42, "Subsection",ExpressionUUID->"c67e9c80-ab9e-4263-8dbc-e717d05a28b1",
 CellID->190658344],
Cell[CellGroupData[{
Cell[402936, 7989, 599, 14, 25, "Text",ExpressionUUID->"4d18722a-e22f-4ccf-b249-5f2d32d6cfd9",
 CellID->349186284],
Cell[403538, 8005, 322, 6, 66, "Input",ExpressionUUID->"adc1ceb1-cf0a-49e6-b971-df63cd00ef3f",
 CellID->1848551584]
}, Open  ]],
Cell[CellGroupData[{
Cell[403897, 8016, 204, 2, 25, "Text",ExpressionUUID->"4732dfa1-22d1-49c8-a6cd-005ba2f84a2d",
 CellID->960551139],
Cell[404104, 8020, 2129, 56, 180, "Input",ExpressionUUID->"a08cd3a9-98da-4c38-ae86-81762fb4ef08",
 CellID->1348418674]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[406282, 8082, 174, 2, 42, "Subsection",ExpressionUUID->"1d066933-c803-4f4c-b1a2-c5f361225ca3",
 CellID->477727127],
Cell[406459, 8086, 1151, 27, 44, "Text",ExpressionUUID->"d0375fe3-2d77-4e7f-be02-e6a17e91aed4",
 CellID->1865951003],
Cell[407613, 8115, 341, 7, 25, "Text",ExpressionUUID->"c3ea37da-25ed-416f-97ca-33024b72f6e3",
 CellID->1334810280],
Cell[407957, 8124, 286, 4, 25, "Text",ExpressionUUID->"74b8cbe9-2c73-40a7-84d1-a5e404c7953b",
 CellID->1542199398],
Cell[CellGroupData[{
Cell[408268, 8132, 864, 13, 113, "Text",ExpressionUUID->"5fbef98d-ecf6-4289-aee9-abf8806ffd02",
 CellID->1765146543],
Cell[CellGroupData[{
Cell[409157, 8149, 11208, 320, 626, "Echo",ExpressionUUID->"0b47d903-eb4a-41e6-a5ca-baddb06e4faa",
 CellID->1478848543],
Cell[420368, 8471, 321, 8, 22, "Echo",ExpressionUUID->"eb2495a7-c398-42c4-9084-c7022f0cdd3f",
 CellID->31731823],
Cell[420692, 8481, 902, 20, 61, "Echo",ExpressionUUID->"c65dffdc-2483-4934-9b64-9d51bc5891cd",
 CellID->740804705],
Cell[421597, 8503, 543, 12, 22, "Echo",ExpressionUUID->"a5f39929-a197-4120-874e-711736f2e259",
 CellID->1741975276],
Cell[422143, 8517, 902, 20, 61, "Echo",ExpressionUUID->"d43e7ba4-1e25-4d0a-aee2-d32ebf7586c7",
 CellID->733904181],
Cell[423048, 8539, 543, 12, 22, "Echo",ExpressionUUID->"43132f2f-8b45-47a1-b38e-469098eeda30",
 CellID->1728985346],
Cell[423594, 8553, 3875, 122, 140, "Echo",ExpressionUUID->"1728ed31-44f2-4c8d-a18b-1e716cd463d7",
 CellID->1455482665]
}, Open  ]]
}, Open  ]],
Cell[427496, 8679, 674, 13, 68, "Text",ExpressionUUID->"2877e9ee-9bc2-4f86-a3ca-dfca1df837d2",
 CellID->310927678]
}, Open  ]],
Cell[CellGroupData[{
Cell[428207, 8697, 239, 3, 42, "Subsection",ExpressionUUID->"b3615f1a-f7b1-4f58-855b-6d5792dd9137",
 CellID->933770995],
Cell[428449, 8702, 672, 10, 82, "Text",ExpressionUUID->"67712a19-c34e-4c35-ae0c-e990cd3c8590",
 CellID->78620689],
Cell[CellGroupData[{
Cell[429146, 8716, 439, 9, 44, "Text",ExpressionUUID->"732de885-c60b-41cd-a10d-0a8a77015751",
 CellID->675477118],
Cell[429588, 8727, 2175, 48, 275, "Input",ExpressionUUID->"f987d0e9-139f-44b9-aa15-b5445808d557",
 CellID->1145364184]
}, Open  ]],
Cell[CellGroupData[{
Cell[431800, 8780, 371, 8, 25, "Text",ExpressionUUID->"1b4cdecc-c0d2-4354-aa31-063a58bef269",
 CellID->92428780],
Cell[CellGroupData[{
Cell[432196, 8792, 2434, 58, 275, "Input",ExpressionUUID->"1d4367f1-263b-439e-acbd-0e0010da6c8f",
 CellID->819828679],
Cell[CellGroupData[{
Cell[434655, 8854, 10773, 298, 279, "Echo",ExpressionUUID->"addd1262-1b02-4fc8-bb39-56671c75cb90",
 CellID->605528801],
Cell[445431, 9154, 3458, 95, 72, "Echo",ExpressionUUID->"a525aecb-3fb7-4e84-ae85-f50315f226e6",
 CellID->197555274],
Cell[448892, 9251, 235, 5, 22, "Echo",ExpressionUUID->"51674653-4758-4962-8902-440478adbfd8",
 CellID->301771856],
Cell[449130, 9258, 289, 7, 22, "Echo",ExpressionUUID->"c1588d9d-190d-46e1-9c1b-fbbaed2e5460",
 CellID->1670693225],
Cell[449422, 9267, 901, 20, 61, "Echo",ExpressionUUID->"b884fafc-59b5-416c-a3fc-1d3ac82c8d6a",
 CellID->992348050],
Cell[450326, 9289, 30234, 608, 276, "Echo",ExpressionUUID->"692e88ae-0d23-464e-b0ce-7ba64866e461",
 CellID->1035673748],
Cell[480563, 9899, 239, 5, 22, "Echo",ExpressionUUID->"09573ad3-7025-4be5-a416-1d9a057716bf",
 CellID->1213723701],
Cell[480805, 9906, 229, 5, 22, "Echo",ExpressionUUID->"eb50d9f9-8fe1-4b5b-855c-faa475c77cce",
 CellID->107079854],
Cell[481037, 9913, 289, 7, 22, "Echo",ExpressionUUID->"58714731-4332-430e-ae59-4daa775ca440",
 CellID->99809992],
Cell[481329, 9922, 902, 20, 61, "Echo",ExpressionUUID->"865d90a0-cb1b-4db3-86a3-e24d4e05e662",
 CellID->321807237],
Cell[482234, 9944, 30094, 606, 276, "Echo",ExpressionUUID->"e715c62f-f70f-466a-be3a-a9e9dce85b1a",
 CellID->1250409113]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[512413, 10559, 249, 6, 45, "Section",ExpressionUUID->"b61aa113-fa71-42d0-9c66-d58ce3ada4c0",
 CellID->350992649],
Cell[512665, 10567, 1189, 26, 44, "Text",ExpressionUUID->"3321ec18-21e3-451a-af80-c01ac88d0bee",
 CellID->2143357081],
Cell[513857, 10595, 481, 8, 44, "Text",ExpressionUUID->"236af6d6-1a1d-4cec-a96c-a478995f574d",
 CellID->1511765589],
Cell[514341, 10605, 1127, 27, 25, "Text",ExpressionUUID->"d7139b57-046b-46c7-a595-7d7b7cfd8505",
 CellID->1365226666],
Cell[CellGroupData[{
Cell[515493, 10636, 179, 2, 42, "Subsection",ExpressionUUID->"934b2bdb-fdf5-497d-a4dd-6ab8f98a22ea",
 CellID->1649290914],
Cell[CellGroupData[{
Cell[515697, 10642, 591, 14, 25, "Text",ExpressionUUID->"17fbbd24-16c5-4b24-a50e-b595c9c0416f",
 CellID->2060959769],
Cell[516291, 10658, 302, 5, 66, "Input",ExpressionUUID->"126cb6e4-962d-4b32-be4d-7dd965a06aa9",
 CellID->1787095120]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[516642, 10669, 203, 3, 42, "Subsection",ExpressionUUID->"d9b35026-072c-4e3c-b7bf-647d552ba5ad",
 CellID->1001394898],
Cell[CellGroupData[{
Cell[516870, 10676, 343, 6, 25, "Text",ExpressionUUID->"192ee7c9-6b84-411e-a3f0-3413b8c627f7",
 CellID->614709147],
Cell[517216, 10684, 385, 7, 47, "Input",ExpressionUUID->"efa161c0-252f-4323-b9b9-6ee2dbfd5c54",
 CellID->2020291559]
}, Open  ]],
Cell[517616, 10694, 574, 11, 97, "Text",ExpressionUUID->"bcb635b5-5372-4bed-af85-0dd30397dc61",
 CellID->1176289396],
Cell[518193, 10707, 168, 2, 25, "Text",ExpressionUUID->"cc223954-2e10-408d-8935-672fe74343ca",
 CellID->161424290],
Cell[518364, 10711, 312, 7, 25, "Text",ExpressionUUID->"84b2785d-4bbb-4e71-889b-2914e878cc99",
 CellID->786195869],
Cell[518679, 10720, 230, 4, 25, "Text",ExpressionUUID->"60a8344c-1b73-4ae3-ba77-09f9ca0777fb",
 CellID->127090292],
Cell[CellGroupData[{
Cell[518934, 10728, 232, 4, 25, "Text",ExpressionUUID->"943252c3-2425-42e1-8f06-47485ae4b919",
 CellID->1407792526],
Cell[519169, 10734, 306, 7, 27, "Input",ExpressionUUID->"a12f0bdd-466e-4353-a1ba-7a7631c8a9cf",
 CellID->1941645483],
Cell[CellGroupData[{
Cell[519500, 10745, 1769, 42, 161, "Input",ExpressionUUID->"31fd638d-2c6f-4a1f-9e48-2c9305e37cb2",
 CellID->74132969],
Cell[CellGroupData[{
Cell[521294, 10791, 652, 17, 42, "Echo",ExpressionUUID->"23cd51e9-3995-4af4-875d-17dd8d72e2c5",
 CellID->412294723],
Cell[521949, 10810, 243, 5, 22, "Echo",ExpressionUUID->"cf7c5dda-5cb8-445b-8b8e-f445f0b87709",
 CellID->1655164239],
Cell[522195, 10817, 454, 12, 22, "Echo",ExpressionUUID->"4cab2ac9-9b3b-4932-944d-3f5830e52251",
 CellID->1989685282],
Cell[522652, 10831, 347, 9, 37, "Echo",ExpressionUUID->"187aa70a-580c-4eb9-8c98-439bcc0c080f",
 CellID->25183490],
Cell[523002, 10842, 4161, 124, 138, "Echo",ExpressionUUID->"e24d3de2-87b0-420d-ad83-34d5b0d48145",
 CellID->204637971]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[527202, 10971, 313, 6, 25, "Text",ExpressionUUID->"59fb002c-6926-4015-92f2-74b99ef23911",
 CellID->1229059750]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[527564, 10983, 167, 2, 45, "Section",ExpressionUUID->"ff1842f9-19cc-4409-b593-9440bb317441",
 CellID->162017757],
Cell[527734, 10987, 555, 9, 63, "Text",ExpressionUUID->"14dbb5de-e822-4782-9c88-0f9a16ba37a3",
 CellID->23177503],
Cell[528292, 10998, 351, 6, 44, "Text",ExpressionUUID->"af41be56-6fb9-4867-939f-bb2e3fbfbaab",
 CellID->849752814],
Cell[528646, 11006, 414, 7, 44, "Text",ExpressionUUID->"5aea7ab0-4ad0-4107-8a30-2a623957909d",
 CellID->1029292348]
}, Open  ]],
Cell[CellGroupData[{
Cell[529097, 11018, 171, 2, 45, "Section",ExpressionUUID->"3948d7b8-ae2e-4cdb-8ebf-2aad8d654803",
 CellID->1335716251],
Cell[CellGroupData[{
Cell[529293, 11024, 232, 3, 42, "Subsection",ExpressionUUID->"bd46b359-ec25-4d6c-8754-6ccfc859d9ca",
 CellID->1736468466],
Cell[529528, 11029, 889, 20, 44, "Text",ExpressionUUID->"054f0f5d-0060-4abd-bf97-4aa5782afe01",
 CellID->522745332],
Cell[530420, 11051, 658, 16, 25, "Text",ExpressionUUID->"00260eb6-5964-4a89-b47b-98f0b241df7d",
 CellID->425195047],
Cell[531081, 11069, 695, 16, 44, "Text",ExpressionUUID->"f592aad0-5e9e-4f3c-a23a-6db8d4df7456",
 CellID->1575061360],
Cell[531779, 11087, 644, 17, 25, "Text",ExpressionUUID->"c63e4bc4-4d1d-49b4-945b-cea9d573248e",
 CellID->25360951],
Cell[532426, 11106, 822, 17, 63, "Text",ExpressionUUID->"b8590722-f745-4e54-bc93-73b2f9ff26ad",
 CellID->1039741351],
Cell[533251, 11125, 874, 17, 44, "Text",ExpressionUUID->"8b23fa6d-ca99-4efa-bb0a-e0c9d2422131",
 CellID->858450618]
}, Open  ]],
Cell[CellGroupData[{
Cell[534162, 11147, 141, 2, 42, "Subsection",ExpressionUUID->"3b76fc36-0013-4f29-9a9a-c5f79373513c",
 CellID->1184396180],
Cell[534306, 11151, 1205, 31, 75, "Text",ExpressionUUID->"79c1ca99-0548-49a5-bbaf-dc4fcb7e5d40",
 CellID->1120673217]
}, Open  ]],
Cell[CellGroupData[{
Cell[535548, 11187, 194, 2, 42, "Subsection",ExpressionUUID->"481b500b-7afd-49ba-a431-464e2b8a6e2b",
 CellID->1723173929],
Cell[535745, 11191, 1882, 44, 106, "Text",ExpressionUUID->"faf93722-b3de-4d6a-8840-80f43c2a3e96",
 CellID->419761261]
}, Open  ]],
Cell[CellGroupData[{
Cell[537664, 11240, 187, 2, 42, "Subsection",ExpressionUUID->"ddcd1c45-57b4-42b8-b9de-6d94f2dd69ad",
 CellID->443733232],
Cell[537854, 11244, 1564, 33, 44, "Text",ExpressionUUID->"3e7d924e-c475-4769-a9ab-6d973003a514",
 CellID->1761207840],
Cell[539421, 11279, 1475, 33, 113, "Text",ExpressionUUID->"21af01d1-4194-4cf7-9a01-ebd252630ad1",
 CellID->1853060279],
Cell[540899, 11314, 1376, 32, 113, "Text",ExpressionUUID->"975b899d-5d17-49d6-b445-4213d61eb93b",
 CellID->1576260359],
Cell[542278, 11348, 1471, 33, 113, "Text",ExpressionUUID->"7e5e8eb8-0208-42d4-b3d4-2aad1b3f573a",
 CellID->849584321],
Cell[543752, 11383, 1317, 32, 94, "Text",ExpressionUUID->"9b231601-8a87-49f5-a49b-742a9f8ac231",
 CellID->344914144],
Cell[545072, 11417, 1280, 30, 94, "Text",ExpressionUUID->"25ba558f-1fbf-44a5-bbde-a7d6eb3038d2",
 CellID->913654955],
Cell[546355, 11449, 1498, 34, 106, "Text",ExpressionUUID->"f3bc5541-a894-4495-acb1-ec4b08c1d51d",
 CellID->1290752635],
Cell[547856, 11485, 1298, 30, 113, "Text",ExpressionUUID->"441c88c0-3314-4475-a1e2-88ce77264e1d",
 CellID->1947218098],
Cell[549157, 11517, 1275, 31, 75, "Text",ExpressionUUID->"c4f598a4-bea7-4026-813b-ca92dd30c43a",
 CellID->1391276453],
Cell[550435, 11550, 1528, 32, 94, "Text",ExpressionUUID->"f7fca178-20ea-4afe-a1a1-a1b4a1c63f21",
 CellID->1381397035]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[552012, 11588, 192, 2, 74, "TutorialMoreAboutSection",ExpressionUUID->"fa78c8db-14d6-4a0d-8252-9af79d768b1a",
 CellID->1551376301],
Cell[552207, 11592, 317, 6, 24, "TutorialMoreAbout",ExpressionUUID->"00810be7-b19d-4a5b-b588-ebed1abc28cb",
 CellID->1382532680]
}, Open  ]],
Cell[CellGroupData[{
Cell[552561, 11603, 128, 1, 74, "RelatedTutorialsSection",ExpressionUUID->"fd145e54-70cd-4136-9c8b-87751d462be1",
 CellID->453692220],
Cell[552692, 11606, 374, 6, 24, "RelatedTutorials",ExpressionUUID->"5f6c00f0-7630-4f8d-bfeb-6febdf8abef3",
 CellID->1638194690]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[553115, 11618, 110, 1, 72, "MetadataSection",ExpressionUUID->"85cebb6b-2ccc-46b3-951e-50950e5f690e",
 CellID->250316643],
Cell[553228, 11621, 547, 13, 26, "History",ExpressionUUID->"ec4583d7-7f88-403e-8680-7e303a0c66bc",
 CellID->151354428],
Cell[CellGroupData[{
Cell[553800, 11638, 123, 1, 21, "CategorizationSection",ExpressionUUID->"9471436c-27fb-4df2-842f-88233c4ac6a1",
 CellID->1193233348],
Cell[553926, 11641, 138, 2, 70, "Categorization",ExpressionUUID->"c4a5dd96-fabf-436b-8fa7-0d1bb4b0dedd",
 CellID->1470584150],
Cell[554067, 11645, 172, 2, 70, "Categorization",ExpressionUUID->"4e18aefa-631a-4bfe-a18c-7dcd37ef3a74",
 CellID->718515727],
Cell[554242, 11649, 169, 2, 70, "Categorization",ExpressionUUID->"56882922-7d9f-41a1-a37b-2d6efc141998",
 CellID->793276608],
Cell[554414, 11653, 216, 5, 70, "Categorization",ExpressionUUID->"beb56201-a656-42e9-952e-b46356238e53",
 CellID->1021470080]
}, Closed]],
Cell[CellGroupData[{
Cell[554667, 11663, 110, 1, 21, "KeywordsSection",ExpressionUUID->"0e602e4a-e48e-4868-b7db-c3530722f7fd",
 CellID->863360442],
Cell[554780, 11666, 100, 1, 70, "Keywords",ExpressionUUID->"9a3b8c5d-52df-492f-bf0e-a18d53b3c677",
 CellID->2099429562]
}, Closed]]
}, Open  ]]
}
]
*)

